diff --color -ur qtwebkit-5.212.0-alpha4/CMakeLists.txt qtwebkit-opensource-src-5.212/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -27,7 +27,7 @@
     WinCairo
     Qt
 )
-set(PORT "NOPORT" CACHE STRING "choose which WebKit port to build (one of ${ALL_PORTS})")
+set(PORT "Qt" CACHE STRING "choose which WebKit port to build (one of ${ALL_PORTS})")
 
 list(FIND ALL_PORTS ${PORT} RET)
 if (${RET} EQUAL -1)
@@ -83,6 +83,8 @@
     set(WTF_CPU_S390 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
     set(WTF_CPU_S390X 1)
+elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
+    set(WTF_CPU_RISCV64 1)
 else ()
     message(FATAL_ERROR "Unknown CPU '${LOWERCASE_CMAKE_SYSTEM_PROCESSOR}'")
 endif ()
Only in qtwebkit-opensource-src-5.212: include
diff --color -ur qtwebkit-5.212.0-alpha4/Source/cmake/OptionsQt.cmake qtwebkit-opensource-src-5.212/Source/cmake/OptionsQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/OptionsQt.cmake	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/cmake/OptionsQt.cmake	2020-09-22 12:30:04.000000000 +0100
@@ -3,7 +3,7 @@
 include(ECMEnableSanitizers)
 include(ECMPackageConfigHelpers)
 
-set(ECM_MODULE_DIR ${CMAKE_MODULE_PATH})
+set(ECM_MODULE_DIR ${CMAKE_CURRENT_LIST_DIR})
 
 set(PROJECT_VERSION_MAJOR 5)
 set(PROJECT_VERSION_MINOR 212)
@@ -13,6 +13,10 @@
 
 set(QT_CONAN_DIR "" CACHE PATH "Directory containing conanbuildinfo.cmake and conanfile.txt")
 if (QT_CONAN_DIR)
+    if (NOT QT_CONAN_FILE)
+        set(QT_CONAN_FILE "${QT_CONAN_DIR}/conanfile.txt")
+    endif ()
+    message(STATUS "Using conan directory: ${QT_CONAN_DIR}")
     find_program(CONAN_COMMAND NAMES conan PATHS $ENV{PIP3_PATH})
     if (NOT CONAN_COMMAND)
         message(FATAL_ERROR "conan executable not found. Make sure that Conan is installed and available in PATH")
@@ -28,18 +32,23 @@
             set(_conan_imports_dest \"\${_absolute_destdir}\${_conan_imports_dest}\")
         endif ()
 
-        message(\"Importing dependencies from conan to \${_conan_imports_dest}\")
+        message(STATUS \"Importing dependencies from conan to \${_conan_imports_dest}\")
         execute_process(
-            COMMAND \"${CONAN_COMMAND}\" imports --import-folder \${_conan_imports_dest} \"${QT_CONAN_DIR}/conanfile.txt\"
+            COMMAND \"${CONAN_COMMAND}\" imports --import-folder \${_conan_imports_dest} \"${QT_CONAN_FILE}\"
             WORKING_DIRECTORY \"${QT_CONAN_DIR}\"
             RESULT_VARIABLE _conan_imports_result
         )
-        message(\"conan imports result: \${_conan_imports_result}\")
+
+        if (NOT _conan_imports_result EQUAL 0)
+            message(FATAL_ERROR \"conan imports failed with code \${_conan_imports_result}\")
+        else ()
+            message(STATUS \"conan imports result: \${_conan_imports_result}\")
+        endif ()
 
         set(_conan_imports_manifest \"\${_conan_imports_dest}/conan_imports_manifest.txt\")
         if (EXISTS \${_conan_imports_manifest})
             file(REMOVE \${_conan_imports_manifest})
-            message(\"Removed conan install manifest: \${_conan_imports_manifest}\")
+            message(STATUS \"Removed conan install manifest: \${_conan_imports_manifest}\")
         endif ()
     ")
 endif ()
@@ -163,13 +172,17 @@
     endif ()
 endmacro()
 
-set(CMAKE_MACOSX_RPATH ON)
+if (APPLE)
+    set(CMAKE_MACOSX_RPATH ON)
+    set(CMAKE_FIND_FRAMEWORK LAST)
+endif ()
 
 add_definitions(-DBUILDING_QT__=1)
 add_definitions(-DQT_NO_EXCEPTIONS)
 add_definitions(-DQT_USE_QSTRINGBUILDER)
 add_definitions(-DQT_NO_CAST_TO_ASCII -DQT_ASCII_CAST_WARNINGS)
 add_definitions(-DQT_DEPRECATED_WARNINGS -DQT_DISABLE_DEPRECATED_BEFORE=0x050000)
+add_definitions(-DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT)
 
 # We use -fno-rtti with GCC and Clang, see OptionsCommon.cmake
 if (COMPILER_IS_GCC_OR_CLANG)
@@ -290,6 +303,7 @@
 cmake_dependent_option(ENABLE_TEST_SUPPORT "Build tools for running layout tests and related library code" ON
                                            "DEVELOPER_MODE" OFF)
 option(USE_STATIC_RUNTIME "Use static runtime (MSVC only)" OFF)
+option(ENABLE_PCH "Use pre-compiled headers (MSVC only)" ON)
 
 # Private options specific to the Qt port. Changing these options is
 # completely unsupported. They are intended for use only by WebKit developers.
@@ -419,40 +433,6 @@
     set(USE_SYSTEM_MALLOC 1)
 endif ()
 
-if (MSVC)
-    if (NOT WEBKIT_LIBRARIES_DIR)
-        if (DEFINED ENV{WEBKIT_LIBRARIES})
-            set(WEBKIT_LIBRARIES_DIR "$ENV{WEBKIT_LIBRARIES}")
-        else ()
-            set(WEBKIT_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/WebKitLibraries/win")
-        endif ()
-    endif ()
-
-    include_directories("${CMAKE_BINARY_DIR}/DerivedSources/ForwardingHeaders" "${CMAKE_BINARY_DIR}/DerivedSources" "${WEBKIT_LIBRARIES_DIR}/include")
-    set(CMAKE_INCLUDE_PATH "${WEBKIT_LIBRARIES_DIR}/include")
-    # bundled FindZlib is strange
-    set(ZLIB_ROOT "${WEBKIT_LIBRARIES_DIR}/include")
-    if (${MSVC_CXX_ARCHITECTURE_ID} STREQUAL "X86")
-        link_directories("${CMAKE_BINARY_DIR}/lib32" "${WEBKIT_LIBRARIES_DIR}/lib32")
-        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
-        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
-        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin32)
-        set(CMAKE_LIBRARY_PATH "${WEBKIT_LIBRARIES_DIR}/lib32")
-    else ()
-        link_directories("${CMAKE_BINARY_DIR}/lib64" "${WEBKIT_LIBRARIES_DIR}/lib64")
-        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
-        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
-        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin64)
-        set(CMAKE_LIBRARY_PATH "${WEBKIT_LIBRARIES_DIR}/lib64")
-    endif ()
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
-    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
-    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
-endif ()
-
 if (DEFINED ENV{SQLITE3SRCDIR})
     get_filename_component(SQLITE3SRC_ABS_DIR $ENV{SQLITE3SRCDIR} ABSOLUTE)
     set(SQLITE3_SOURCE_DIR ${SQLITE3SRC_ABS_DIR} CACHE PATH "Path to SQLite sources to use instead of system library" FORCE)
@@ -732,6 +712,14 @@
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gdb-index")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gdb-index")
     endif ()
+
+    if (MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)
+        # Create pdb files for debugging purposes, also for Release builds
+        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")
+        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
+        set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG")
+        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")
+    endif ()
 endif ()
 
 if (APPLE)
@@ -896,14 +884,6 @@
         /wd6246 /wd6255 /wd6387
     )
 
-    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
-        # Create pdb files for debugging purposes, also for Release builds
-        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")
-        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
-        set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG")
-        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")
-    endif ()
-
     add_compile_options(/GS)
 
     # We do not use exceptions
diff --color -ur qtwebkit-5.212.0-alpha4/Source/cmake/WebKitCommon.cmake qtwebkit-opensource-src-5.212/Source/cmake/WebKitCommon.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/WebKitCommon.cmake	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/cmake/WebKitCommon.cmake	2020-09-22 12:30:04.000000000 +0100
@@ -24,7 +24,11 @@
     # TODO Enforce version requirement for perl
     find_package(Perl 5.10.0 REQUIRED)
 
-    set(Python_ADDITIONAL_VERSIONS 3)
+    # Workaround for Windows Store python3.exe
+    # Official Python packages for Windows don't have python3.exe, only python.exe
+    if (NOT WIN32)
+        set(Python_ADDITIONAL_VERSIONS 3)
+    endif ()
     find_package(PythonInterp 2.7.0 REQUIRED)
 
     # We cannot check for RUBY_FOUND because it is set only when the full package is installed and
diff --color -ur qtwebkit-5.212.0-alpha4/Source/cmake/WebKitMacros.cmake qtwebkit-opensource-src-5.212/Source/cmake/WebKitMacros.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/WebKitMacros.cmake	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/cmake/WebKitMacros.cmake	2020-09-22 12:30:04.000000000 +0100
@@ -24,7 +24,7 @@
 endmacro()
 
 macro(ADD_PRECOMPILED_HEADER _header _cpp _source)
-    if (MSVC)
+    if (MSVC AND (ENABLE_PCH OR NOT PORT STREQUAL "Qt"))
         get_filename_component(PrecompiledBasename ${_header} NAME_WE)
         set(PrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/${PrecompiledBasename}.pch")
         set(_sources ${${_source}})
@@ -41,6 +41,10 @@
 
         list(APPEND ${_source} ${_cpp})
     endif ()
+    if (MSVC AND NOT ENABLE_PCH AND PORT STREQUAL "Qt")
+        set(_sources ${${_source}})
+        set_source_files_properties(${_sources} PROPERTIES COMPILE_FLAGS "/FI\"${_header}\"")
+    endif ()
     #FIXME: Add support for Xcode.
 endmacro()
 
@@ -285,7 +289,8 @@
         add_custom_command(TARGET ${_target} POST_BUILD COMMAND ${${_target}_POST_BUILD_COMMAND} VERBATIM)
     endif ()
 
-    if (APPLE AND NOT PORT STREQUAL "GTK" AND NOT ${${_target}_LIBRARY_TYPE} MATCHES STATIC)
+
+    if (APPLE AND NOT PORT STREQUAL "GTK" AND NOT ${${_target}_LIBRARY_TYPE} MATCHES STATIC AND (MACOS_BUILD_FRAMEWORKS OR NOT PORT STREQUAL "Qt"))
         set_target_properties(${_target} PROPERTIES FRAMEWORK TRUE)
         if (${_target}_PUBLIC_HEADERS)
             set_target_properties(${_target} PROPERTIES PUBLIC_HEADER "${${_target}_PUBLIC_HEADERS}")
diff --color -ur qtwebkit-5.212.0-alpha4/Source/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -24,14 +24,14 @@
     add_subdirectory(ThirdParty/woff2)
 endif ()
 
-if (ENABLE_WEBKIT)
-    add_subdirectory(WebKit)
-endif ()
-
 if (ENABLE_WEBKIT2)
     add_subdirectory(WebKit2)
 endif ()
 
+if (ENABLE_WEBKIT)
+    add_subdirectory(WebKit)
+endif ()
+
 WEBKIT_INCLUDE_CONFIG_FILES_IF_EXISTS()
 
 # -----------------------------------------------------------------------------
diff --color -ur qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/JavaScriptCore/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -1287,6 +1287,7 @@
 elseif (WTF_CPU_S390X)
 elseif (WTF_CPU_MIPS)
 elseif (WTF_CPU_SH4)
+elseif (WTF_CPU_RISCV64)
 elseif (WTF_CPU_X86)
 elseif (WTF_CPU_X86_64)
     if (MSVC AND ENABLE_JIT)
diff --color -ur qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/generate-bytecode-files qtwebkit-opensource-src-5.212/Source/JavaScriptCore/generate-bytecode-files
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/generate-bytecode-files	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/generate-bytecode-files	2020-09-22 12:30:04.000000000 +0100
@@ -163,7 +163,7 @@
         initBytecodesFile = openOrExit(initASMFileName, "w")
 
     try:
-        bytecodeSections = json.load(bytecodeFile, encoding = "utf-8")
+        bytecodeSections = json.load(bytecodeFile)
     except:
         print("Unexpected error parsing {0}: {1}".format(bytecodeJSONFile, sys.exc_info()))
 
diff --color -ur qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/jsc.cpp qtwebkit-opensource-src-5.212/Source/JavaScriptCore/jsc.cpp
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/jsc.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/jsc.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -189,7 +189,7 @@
 
 class ElementHandleOwner : public WeakHandleOwner {
 public:
-    bool isReachableFromOpaqueRoots(Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor) override
+    bool isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor) override
     {
         Element* element = jsCast<Element*>(handle.slot()->asCell());
         return visitor.containsOpaqueRoot(element->root());
diff --color -ur qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/parser/Parser.cpp qtwebkit-opensource-src-5.212/Source/JavaScriptCore/parser/Parser.cpp
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/parser/Parser.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/parser/Parser.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -1089,6 +1089,10 @@
     JSTokenLocation location(tokenLocation());
     int startLine = tokenLine();
     next();
+
+    DepthManager statementDepth(&m_statementDepth);
+    m_statementDepth++;
+
     handleProductionOrFail(OPENPAREN, "(", "start", "for-loop header");
     int nonLHSCount = m_parserState.nonLHSCount;
     int declarations = 0;
diff --color -ur qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/Scripts/generate-js-builtins.py qtwebkit-opensource-src-5.212/Source/JavaScriptCore/Scripts/generate-js-builtins.py
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/Scripts/generate-js-builtins.py	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/Scripts/generate-js-builtins.py	2020-09-22 12:30:04.000000000 +0100
@@ -124,7 +124,7 @@
     cli_parser.add_option("-t", "--test", action="store_true", help="Enable test mode.")
 
     arg_options, arg_values = cli_parser.parse_args()
-    if len(arg_values) is 0 and not arg_options.input_directory:
+    if len(arg_values) == 0 and not arg_options.input_directory:
         raise ParseException("At least one input file or directory expected.")
 
     if not arg_options.output_directory:
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebCore/bridge/qt/qt_runtime.cpp qtwebkit-opensource-src-5.212/Source/WebCore/bridge/qt/qt_runtime.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebCore/bridge/qt/qt_runtime.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/bridge/qt/qt_runtime.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -1591,6 +1591,7 @@
 
     JSValueRef callException = 0;
     ExecState* exec = toJS(m_context);
+    JSLockHolder lock(exec);
     JSObjectCallAsFunction(m_context, m_receiverFunction, m_receiver, argc, args.data(), &callException);
     if (callException)
         WebCore::reportException(exec, toJS(exec, callException));
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebCore/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebCore/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebCore/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -3366,6 +3366,7 @@
 set(WebCoreTestSupport_INCLUDE_DIRECTORIES
     "${WEBCORE_DIR}/platform/mock"
     "${WEBCORE_DIR}/testing"
+    "${WEBCORE_DIR}/testing/js"
     "${DERIVED_SOURCES_WEBCORE_DIR}"
 )
 
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebCore/css/makegrammar.pl qtwebkit-opensource-src-5.212/Source/WebCore/css/makegrammar.pl
--- qtwebkit-5.212.0-alpha4/Source/WebCore/css/makegrammar.pl	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/css/makegrammar.pl	2020-09-22 12:30:04.000000000 +0100
@@ -73,25 +73,6 @@
 }
 
 my $fileBase = File::Spec->join($outputDir, $filename);
-my @bisonCommand = ($bison, "-d", "-p", $symbolsPrefix, $grammarFilePath, "-o", "$fileBase.cpp");
+my @bisonCommand = ($bison, "--defines=$fileBase.h", "-p", $symbolsPrefix, $grammarFilePath, "-o", "$fileBase.cpp");
 push @bisonCommand, "--no-lines" if $^O eq "MSWin32"; # Work around bug in bison >= 3.0 on Windows where it puts backslashes into #line directives.
 system(@bisonCommand) == 0 or die;
-
-open HEADER, ">$fileBase.h" or die;
-print HEADER << "EOF";
-#ifndef CSSGRAMMAR_H
-#define CSSGRAMMAR_H
-EOF
-
-open HPP, "<$fileBase.cpp.h" or open HPP, "<$fileBase.hpp" or die;
-while (<HPP>) {
-    print HEADER;
-}
-close HPP;
-
-print HEADER "#endif\n";
-close HEADER;
-
-unlink("$fileBase.cpp.h");
-unlink("$fileBase.hpp");
-
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebCore/platform/MIMETypeRegistry.cpp qtwebkit-opensource-src-5.212/Source/WebCore/platform/MIMETypeRegistry.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebCore/platform/MIMETypeRegistry.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/platform/MIMETypeRegistry.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -254,6 +254,9 @@
     // Do not treat SVG as images directly because WebKit can handle them.
     supportedImageMIMETypes->remove("image/svg+xml");
     supportedImageResourceMIMETypes->remove("image/svg+xml");
+    // Do not treat PDF as images
+    supportedImageMIMETypes->remove("application/pdf");
+    supportedImageResourceMIMETypes->remove("application/pdf");
 #endif // PLATFORM(QT)
 #endif // USE(CG)
 }
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebCore/platform/network/qt/ResourceRequest.h qtwebkit-opensource-src-5.212/Source/WebCore/platform/network/qt/ResourceRequest.h
--- qtwebkit-5.212.0-alpha4/Source/WebCore/platform/network/qt/ResourceRequest.h	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/platform/network/qt/ResourceRequest.h	2020-09-22 12:30:04.000000000 +0100
@@ -32,7 +32,7 @@
 // HTTP/2 is implemented since Qt 5.8, but various QtNetwork bugs make it unusable in browser with Qt < 5.10.1
 // We also don't enable HTTP/2 for unencrypted connections because of possible compatibility issues; it can be
 // enabled manually by user application via custom QNAM subclass
-#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1)
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1) && !defined(QT_NO_SSL)
 #define USE_HTTP2 1
 #endif
 
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebKit/PlatformQt.cmake qtwebkit-opensource-src-5.212/Source/WebKit/PlatformQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/WebKit/PlatformQt.cmake	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/PlatformQt.cmake	2020-09-22 12:30:04.000000000 +0100
@@ -250,15 +250,15 @@
 
 if (ENABLE_WEBKIT2)
     if (APPLE)
-        set(WEBKIT2_LIBRARY -Wl,-force_load WebKit2)
+        set(WEBKIT2_LIBRARY -Wl,-force_load $<TARGET_FILE:WebKit2>)
     elseif (MSVC)
-        set(WEBKIT2_LIBRARY "-WHOLEARCHIVE:WebKit2${CMAKE_DEBUG_POSTFIX}")
+        set(WEBKIT2_LIBRARY "-WHOLEARCHIVE:$<TARGET_FILE:WebKit2>")
     elseif (UNIX OR MINGW)
-        set(WEBKIT2_LIBRARY -Wl,--whole-archive WebKit2 -Wl,--no-whole-archive)
+        set(WEBKIT2_LIBRARY -Wl,--whole-archive $<TARGET_FILE:WebKit2> -Wl,--no-whole-archive)
     else ()
         message(WARNING "Unknown system, linking with WebKit2 may fail!")
-        set(WEBKIT2_LIBRARY WebKit2)
     endif ()
+    set(WEBKIT2_LIBRARY ${WEBKIT2_LIBRARY} WebKit2) # For linking dependencies
 endif ()
 
 list(APPEND WebKit_LIBRARIES
@@ -419,6 +419,16 @@
 )
 
 file(GLOB WebKit_PRIVATE_HEADERS qt/Api/*_p.h)
+
+# This is needed to install WK2 private headers into macOS bundle
+if (ENABLE_WEBKIT2)
+    file(GLOB WebKit2_PRIVATE_HEADERS "${WEBKIT2_DIR}/UIProcess/API/qt/*_p.h")
+    foreach (_src ${WebKit2_PRIVATE_HEADERS})
+        set_property(SOURCE ${_src} PROPERTY SKIP_AUTOMOC ON)
+    endforeach ()
+    list(APPEND WebKit_PRIVATE_HEADERS ${WebKit2_PRIVATE_HEADERS})
+endif ()
+
 install(
     FILES
         ${WebKit_PRIVATE_HEADERS}
@@ -516,6 +526,10 @@
         BIN_INSTALL_DIR "$$QT_MODULE_BIN_BASE"
         LIB_INSTALL_DIR "$$QT_MODULE_LIB_BASE"
     )
+    set(WebKit_Private_PRI_ARGUMENTS
+        BIN_INSTALL_DIR "$$QT_MODULE_BIN_BASE"
+        LIB_INSTALL_DIR "$$QT_MODULE_LIB_BASE"
+    )
     if (MACOS_BUILD_FRAMEWORKS)
         list(APPEND WebKit_PRI_ARGUMENTS
             INCLUDE_INSTALL_DIR "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers"
@@ -524,6 +538,7 @@
         list(APPEND WebKit_Private_PRI_ARGUMENTS
             INCLUDE_INSTALL_DIR "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers/${PROJECT_VERSION}"
             INCLUDE_INSTALL_DIR2 "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers/${PROJECT_VERSION}/QtWebKit"
+            MODULE_CONFIG "lib_bundle"
         )
     else ()
         list(APPEND WebKit_PRI_ARGUMENTS
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -42,6 +42,10 @@
     AUTOMOC ON
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    target_compile_options(qmlwebkitplugin PRIVATE -frtti)
+endif ()
+
 add_custom_target(
     qmlwebkitplugin-files ALL
     COMMAND ${CMAKE_COMMAND} -E copy_if_different qmldir "${CMAKE_BINARY_DIR}/imports/QtWebKit/qmldir"
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/experimental/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/experimental/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/experimental/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/experimental/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -19,6 +19,10 @@
     AUTOMOC ON
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    target_compile_options(qmlwebkitexperimentalplugin PRIVATE -frtti)
+endif ()
+
 add_custom_target(
     qmlwebkitexperimentalplugin-files ALL
     COMMAND ${CMAKE_COMMAND} -E copy_if_different qmldir "${CMAKE_BINARY_DIR}/imports/QtWebKit/experimental/qmldir"
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -368,6 +368,10 @@
 void Connection::readyReadHandler()
 {
 #if PLATFORM(QT)
+    if (!m_socketNotifier) {
+        WTFLogAlways("Error receiving IPC message on socket %d in process %d: m_socketNotifier is null", m_socketDescriptor, getpid());
+        return;
+    }
     SocketNotifierResourceGuard socketNotifierEnabler(m_socketNotifier);
 #endif
 
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WebKit2/PlatformQt.cmake qtwebkit-opensource-src-5.212/Source/WebKit2/PlatformQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/PlatformQt.cmake	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/PlatformQt.cmake	2020-09-22 12:30:04.000000000 +0100
@@ -217,6 +217,21 @@
     WebProcess/qt/WebProcessQt.cpp
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    set_source_files_properties(
+        UIProcess/API/qt/qquicknetworkreply.cpp
+        UIProcess/API/qt/qquicknetworkrequest.cpp
+        UIProcess/API/qt/qquickurlschemedelegate.cpp
+        UIProcess/API/qt/qquickwebpage.cpp
+        UIProcess/API/qt/qquickwebview.cpp
+        UIProcess/API/qt/qwebiconimageprovider.cpp
+
+        UIProcess/Launcher/qt/ProcessLauncherQt.cpp
+    PROPERTIES
+        COMPILE_FLAGS -frtti
+    )
+endif ()
+
 qt5_add_resources(WebKit2_SOURCES
     WebKit2.qrc
 )
@@ -329,10 +344,6 @@
 
 WEBKIT_CREATE_FORWARDING_HEADERS(QtWebKit/private DIRECTORIES UIProcess/API/qt)
 
-if (ENABLE_API_TESTS)
-    add_subdirectory(UIProcess/API/qt/tests)
-endif ()
-
 file(GLOB WebKit2_PRIVATE_HEADERS UIProcess/API/qt/*_p.h)
 install(
     FILES
Only in qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt: tests
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WTF/wtf/dtoa/utils.h qtwebkit-opensource-src-5.212/Source/WTF/wtf/dtoa/utils.h
--- qtwebkit-5.212.0-alpha4/Source/WTF/wtf/dtoa/utils.h	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WTF/wtf/dtoa/utils.h	2020-09-22 12:30:04.000000000 +0100
@@ -49,7 +49,7 @@
 defined(__ARMEL__) || \
 defined(_MIPS_ARCH_MIPS32R2)
 #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1
-#elif CPU(MIPS) || CPU(MIPS64) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(SH4) || CPU(S390) || CPU(S390X) || CPU(IA64) || CPU(ALPHA) || CPU(ARM64) || CPU(HPPA)
+#elif CPU(MIPS) || CPU(MIPS64) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(SH4) || CPU(S390) || CPU(S390X) || CPU(IA64) || CPU(ALPHA) || CPU(ARM64) || CPU(HPPA) || CPU(RISCV64)
 #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1
 #elif defined(_M_IX86) || defined(__i386__)
 #if defined(_WIN32)
diff --color -ur qtwebkit-5.212.0-alpha4/Source/WTF/wtf/Platform.h qtwebkit-opensource-src-5.212/Source/WTF/wtf/Platform.h
--- qtwebkit-5.212.0-alpha4/Source/WTF/wtf/Platform.h	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Source/WTF/wtf/Platform.h	2020-09-22 12:30:04.000000000 +0100
@@ -176,6 +176,11 @@
 #define WTF_CPU_X86_SSE2 1
 #endif
 
+/* CPU(RISCV64) - RISCV64 */
+#if defined(__riscv) && defined(__riscv_xlen) && __riscv_xlen == 64
+#define WTF_CPU_RISCV64 1
+#endif
+
 /* CPU(ARM64) - Apple */
 #if (defined(__arm64__) && defined(__APPLE__)) || defined(__aarch64__)
 #define WTF_CPU_ARM64 1
@@ -707,7 +712,8 @@
     || CPU(S390X) \
     || CPU(MIPS64) \
     || CPU(PPC64) \
-    || CPU(PPC64LE)
+    || CPU(PPC64LE) \
+    || CPU(RISCV64)
 #define USE_JSVALUE64 1
 #else
 #define USE_JSVALUE32_64 1
diff --color -ur qtwebkit-5.212.0-alpha4/tests/CMakeLists.txt qtwebkit-opensource-src-5.212/tests/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/tests/CMakeLists.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/tests/CMakeLists.txt	2020-09-22 12:30:04.000000000 +0100
@@ -1 +1,5 @@
 add_subdirectory(webkitwidgets)
+
+if (ENABLE_WEBKIT2)
+    add_subdirectory(webkitqml)
+endif ()
diff --color -ur qtwebkit-5.212.0-alpha4/tests/tests.pro qtwebkit-opensource-src-5.212/tests/tests.pro
--- qtwebkit-5.212.0-alpha4/tests/tests.pro	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/tests/tests.pro	2020-09-22 12:30:04.000000000 +0100
@@ -1,2 +1,4 @@
 TEMPLATE = subdirs
 SUBDIRS += webkitwidgets
+# QTFIXME: Check if QML API was built
+SUBDIRS += webkitqml
Only in qtwebkit-opensource-src-5.212/tests: webkitqml
diff --color -ur qtwebkit-5.212.0-alpha4/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp qtwebkit-opensource-src-5.212/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -105,6 +105,7 @@
 public:
     tst_QWebPage();
     virtual ~tst_QWebPage();
+    void createRendererTreeInWebPage();
 
 public Q_SLOTS:
     void init();
@@ -198,6 +199,8 @@
     void showModalDialog();
     void testStopScheduledPageRefresh();
     void findText();
+    void findTextScroll();
+    void javascriptScroll();
     void supportedContentType();
     // [Qt] tst_QWebPage::infiniteLoopJS() timeouts with DFG JIT
     // https://bugs.webkit.org/show_bug.cgi?id=79040
@@ -3072,6 +3075,46 @@
     }
 }
 
+void tst_QWebPage::createRendererTreeInWebPage()
+{
+    QImage image(m_page->viewportSize(), QImage::Format_ARGB32);
+    QPainter painter(&image);
+    m_page->mainFrame()->render(&painter);
+    painter.end();
+}
+
+void tst_QWebPage::findTextScroll()
+{
+    m_view->setHtml(QString("<html><head></head><body style=\"padding:250px;\"><div>foo bar</div></body></html>"));
+    m_page->setViewportSize(QSize(200, 200));
+    QSignalSpy scrollRequestedSpy(m_page, SIGNAL(scrollRequested(int,int,QRect)));
+
+    QCOMPARE(m_page->mainFrame()->scrollPosition().y(), 0);
+
+    createRendererTreeInWebPage();
+
+    m_page->findText("bar");
+
+    QTRY_COMPARE(scrollRequestedSpy.count(), 1);
+    QVERIFY(m_page->mainFrame()->scrollPosition().y() > 40);
+}
+
+void tst_QWebPage::javascriptScroll()
+{
+    m_view->setHtml(QString("<html><head></head><body style=\"padding:250px;\"><div>foo bar</div></body></html>"));
+    m_page->setViewportSize(QSize(200, 200));
+    QSignalSpy scrollRequestedSpy(m_page, SIGNAL(scrollRequested(int,int,QRect)));
+
+    QCOMPARE(m_page->mainFrame()->scrollPosition().y(), 0);
+
+    createRendererTreeInWebPage();
+
+    m_page->mainFrame()->evaluateJavaScript("document.getElementsByTagName('div')[0].scrollIntoView()");
+
+    QTRY_COMPARE(scrollRequestedSpy.count(), 1);
+    QVERIFY(m_page->mainFrame()->scrollPosition().y() > 40);
+}
+
 void tst_QWebPage::supportedContentType()
 {
     QStringList contentTypes;
diff --color -ur qtwebkit-5.212.0-alpha4/Tools/qmake/projects/generate_forwarding_pris.pro qtwebkit-opensource-src-5.212/Tools/qmake/projects/generate_forwarding_pris.pro
--- qtwebkit-5.212.0-alpha4/Tools/qmake/projects/generate_forwarding_pris.pro	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Tools/qmake/projects/generate_forwarding_pris.pro	2020-09-22 12:30:04.000000000 +0100
@@ -26,12 +26,28 @@
     write_file($$forwarding_pri_name, FORWARDING_PRI_CONTENTS)|error()
 }
 
+defineTest(writeWebKitPrivateForwardingPri) {
+    module = webkit_private
+    configuration = $$1
+    cmake_build_dir = $$ROOT_BUILD_DIR/$$configuration
+    forwarding_pri_name = $$MODULE_QMAKE_OUTDIR/mkspecs/modules/qt_lib_$${module}.pri
+
+    FORWARDING_PRI_CONTENTS += \
+        "include($$cmake_build_dir/Source/WebKit/qt_lib_$${module}.pri)" \
+        "QT.$${module}.priority = 1" \
+        "QT.$${module}.includes = $$cmake_build_dir/DerivedSources/ForwardingHeaders/QtWebKit $$ROOT_WEBKIT_DIR/Source"
+
+    message("Writing $$forwarding_pri_name")
+    write_file($$forwarding_pri_name, FORWARDING_PRI_CONTENTS)|error()
+}
+
 
 debug_and_release {
     !build_pass {
         # Use release build in case of debug_and_release
         writeForwardingPri(webkit, release)
         writeForwardingPri(webkitwidgets, release)
+        writeWebKitPrivateForwardingPri(release)
     }
 } else {
     CONFIG(debug, debug|release) {
@@ -41,4 +57,5 @@
     }
     writeForwardingPri(webkit, $$configuration)
     writeForwardingPri(webkitwidgets, $$configuration)
+    writeWebKitPrivateForwardingPri($$configuration)
 }
Only in qtwebkit-opensource-src-5.212/Tools/qt: build-qtwebkit-conan.py
Only in qtwebkit-opensource-src-5.212/Tools/qt: conanfile.py
Only in qtwebkit-opensource-src-5.212/Tools/qt: installed-files-checker.py
diff --color -ur qtwebkit-5.212.0-alpha4/Tools/qt/jhbuild.modules qtwebkit-opensource-src-5.212/Tools/qt/jhbuild.modules
--- qtwebkit-5.212.0-alpha4/Tools/qt/jhbuild.modules	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Tools/qt/jhbuild.modules	2020-09-22 12:30:04.000000000 +0100
@@ -91,6 +91,7 @@
   <autotools id="glib"
              autogen-sh="configure"
              autogenargs="--disable-dtrace --disable-gtk-doc-html">
+    <makeargs value="CFLAGS+=-Wno-error"/>
     <branch module="/pub/GNOME/sources/glib/2.44/glib-2.44.1.tar.xz" version="2.44.1"
             repo="ftp.gnome.org"
             hash="sha256:8811deacaf8a503d0a9b701777ea079ca6a4277be10e3d730d2112735d5eca07">
Only in qtwebkit-opensource-src-5.212/Tools/qt: license_writer.sh
Only in qtwebkit-opensource-src-5.212/Tools/qt: merge.conf
Only in qtwebkit-opensource-src-5.212/Tools/qt: merge-helper.py
Only in qtwebkit-opensource-src-5.212/Tools/qt: QtBinaryChecklist.txt
Only in qtwebkit-opensource-src-5.212/Tools/qt: qt-downloader
Only in qtwebkit-opensource-src-5.212/Tools/qt: qt-downloader-requirements.txt
Only in qtwebkit-opensource-src-5.212/Tools/qt: setup-qt5-submodules-for-coin.sh
diff --color -ur qtwebkit-5.212.0-alpha4/Tools/qt/update-wip-qtwebkit-refs qtwebkit-opensource-src-5.212/Tools/qt/update-wip-qtwebkit-refs
--- qtwebkit-5.212.0-alpha4/Tools/qt/update-wip-qtwebkit-refs	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Tools/qt/update-wip-qtwebkit-refs	2020-09-22 12:30:04.000000000 +0100
@@ -34,6 +34,9 @@
 print "Remote '$remote': ", `git remote get-url $remote`, "\n";
 $? == 0 or die "git exited with code $?";
 
+print "Remote 'qtwebkit': ", `git remote get-url qtwebkit`, "\n";
+$? == 0 or die "git exited with code $?";
+
 print `git --no-pager log --color -n1 --decorate=full $commit`;
 $? == 0 or die "git exited with code $?";
 
@@ -45,3 +48,8 @@
 print "git push -f $remote $commit:refs/heads/wip/qtwebkit/5.212 && git push -f $remote $commit:refs/staging/wip/qtwebkit/5.212\n";
 `git push -f $remote $commit:refs/heads/wip/qtwebkit/5.212 && git push -f $remote $commit:refs/staging/wip/qtwebkit/5.212`;
 $? == 0 or die "git exited with code $?";
+
+my $qt5TagName = "qtwebkit-5.212-" . time();
+print "git tag -a '$qt5TagName' -m '$qt5TagName' && git push qtwebkit '$qt5TagName'\n";
+`git tag -a '$qt5TagName' -m '$qt5TagName' && git push qtwebkit '$qt5TagName'`;
+$? == 0 or die "git exited with code $?";
diff --color -ur qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/launcherwindow.cpp qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/launcherwindow.cpp
--- qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/launcherwindow.cpp	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/launcherwindow.cpp	2020-09-22 12:30:04.000000000 +0100
@@ -170,11 +170,13 @@
     } else {
         WebViewGraphicsBased* view = new WebViewGraphicsBased(splitter);
         m_view = view;
+#ifndef QT_NO_OPENGL
         if (!m_windowOptions.useQOpenGLWidgetViewport)
             toggleQGLWidgetViewport(m_windowOptions.useQGLWidgetViewport);
 #ifdef QT_OPENGL_LIB
         if (!m_windowOptions.useQGLWidgetViewport)
             toggleQOpenGLWidgetViewport(m_windowOptions.useQOpenGLWidgetViewport);
+#endif // QT_OPENGL_LIB
 #endif
         view->setPage(page());
 
@@ -1357,3 +1359,5 @@
         page()->findText(m_lineEdit->text(), QFlag(m_findFlag));
 }
 #endif
+
+#include "moc_launcherwindow.cpp"
diff --color -ur qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/useragentlist.txt qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/useragentlist.txt
--- qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/useragentlist.txt	2020-03-04 17:16:37.000000000 +0000
+++ qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/useragentlist.txt	2020-09-22 12:30:04.000000000 +0100
@@ -1,13 +1,17 @@
-Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) QtTestBrowser/0.1 Safari/535.1
-Mozilla/5.0 (SymbianOS/9.4; U; Series60/5.0) AppleWebKit/535.1 (KHTML, like Gecko) QtTestBrowser/0.1 Mobile Safari/535.1
-Mozilla/5.0 (Macintosh; PPC Mac OS X) AppleWebKit/125.2 (KHTML, like Gecko) Safari/125.8
-Mozilla/5.0 (Unknown; like Android 2.2; Intel Mac OS X 10_6) AppleWebKit/533.3 (KHTML, like Gecko) Version/4.0.3 Mobile Safari/533.3
-Mozilla/5.0 (iPhone; CPU OS 3_2 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
-Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7
-Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
-Opera/9.80 (Windows NT 6.0; U; en) Presto/2.8.99 Version/11.10
+Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0
+Mozilla/5.0 (Linux; Android 7.1.1; E6883) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Mobile Safari/537.36
+Mozilla/5.0 (Linux; Android 9; G8441) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.111 Mobile Safari/537.36
+Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Safari/605.1.15
 Mozilla/5.0 (SymbianOS/9.4; U; Series60/5.0 Nokia5800d-1b/20.2.014; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/413 (KHTML, like Gecko) Safari/413
-Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)
-Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
-Mozilla/5.0 (Windows; Windows NT 5.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.68 Safari/534.24
-Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1
+Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0
+Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18363
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) QtTestBrowser/0.1 Version/10.0 Safari/602.1
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15 Epiphany/605.1.15
+Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
+Mozilla/5.0 (X11; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0
+Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Mobile/15E148 Safari/604.1
+Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1
+Opera/9.80 (Windows NT 6.1) Presto/2.12.388 Version/12.18
+Opera/9.80 (X11; Linux x86_64) Presto/2.12.388 Version/12.16
