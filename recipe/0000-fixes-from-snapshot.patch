diff -Nru qtwebkit-5.212.0-alpha4/CMakeLists.txt qtwebkit-opensource-src-5.212/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -27,7 +27,7 @@
     WinCairo
     Qt
 )
-set(PORT "NOPORT" CACHE STRING "choose which WebKit port to build (one of ${ALL_PORTS})")
+set(PORT "Qt" CACHE STRING "choose which WebKit port to build (one of ${ALL_PORTS})")
 
 list(FIND ALL_PORTS ${PORT} RET)
 if (${RET} EQUAL -1)
@@ -83,6 +83,8 @@
     set(WTF_CPU_S390 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
     set(WTF_CPU_S390X 1)
+elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
+    set(WTF_CPU_RISCV64 1)
 else ()
     message(FATAL_ERROR "Unknown CPU '${LOWERCASE_CMAKE_SYSTEM_PROCESSOR}'")
 endif ()
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qhttpheader_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qhttpheader_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qhttpheader_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qhttpheader_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qhttpheader_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkreply_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkreply_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkreply_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkreply_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquicknetworkreply_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkrequest_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkrequest_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkrequest_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquicknetworkrequest_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquicknetworkrequest_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickurlschemedelegate_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickurlschemedelegate_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickurlschemedelegate_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickurlschemedelegate_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquickurlschemedelegate_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquickwebpage_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebpage_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquickwebpage_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquickwebview_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qquickwebview_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qquickwebview_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/raw/qrawwebview_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qrawwebview_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/raw/qrawwebview_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qtwebsecurityorigin_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qtwebsecurityorigin_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qtwebsecurityorigin_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qtwebsecurityorigin_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qtwebsecurityorigin_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebchannelwebkittransport_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebchannelwebkittransport_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebchannelwebkittransport_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebchannelwebkittransport_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebchannelwebkittransport_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdatabase_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdatabase_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdatabase_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdatabase_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebdatabase_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebdownloaditem_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebdownloaditem_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebdownloaditem_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebelement_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebelement_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebelement_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebelement_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebelement_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebhistory_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebhistory_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebhistory_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebhistory_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebhistory_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebiconimageprovider_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebiconimageprovider_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebiconimageprovider_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebiconimageprovider_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebiconimageprovider_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebkittest_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebkittest_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebkittest_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebkittest_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebkittest_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebloadrequest_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebloadrequest_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebloadrequest_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebloadrequest_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebloadrequest_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebnavigationhistory_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationhistory_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebnavigationhistory_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationrequest_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationrequest_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationrequest_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebnavigationrequest_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebnavigationrequest_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpermissionrequest_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpermissionrequest_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpermissionrequest_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpermissionrequest_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebpermissionrequest_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebplugindatabase_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebplugindatabase_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebplugindatabase_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebplugindatabase_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebplugindatabase_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebpreferences_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebpreferences_p_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebscriptworld_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebscriptworld_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebscriptworld_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebscriptworld_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebscriptworld_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebsecurityorigin_p.h qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebsecurityorigin_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/5.212/QtWebKit/private/qwebsecurityorigin_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/5.212/QtWebKit/private/qwebsecurityorigin_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/Api/qwebsecurityorigin_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/headers.pri qtwebkit-opensource-src-5.212/include/QtWebKit/headers.pri
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/headers.pri	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/headers.pri	2020-09-25 00:09:23.453615000 +1000
@@ -0,0 +1,6 @@
+SYNCQT.HEADER_FILES = WebKit/qt/Api/qwebdatabase.h WebKit/qt/Api/qwebelement.h WebKit/qt/Api/qwebfullscreenrequest.h WebKit/qt/Api/qwebfullscreenvideohandler.h WebKit/qt/Api/qwebhistory.h WebKit/qt/Api/qwebhistoryinterface.h WebKit/qt/Api/qwebkitglobal.h WebKit/qt/Api/qwebkitplatformplugin.h WebKit/qt/Api/qwebpluginfactory.h WebKit/qt/Api/qwebscriptworld.h WebKit/qt/Api/qwebsecurityorigin.h WebKit/qt/Api/qwebsettings.h 
+SYNCQT.GENERATED_HEADER_FILES = QWebDatabase QWebElement QWebElementCollection QWebFullScreenRequest QWebFullScreenVideoHandler QWebHistoryItem QWebHistory QWebHistoryInterface QWebSelectData QWebSelectMethod QWebNotificationData QWebNotificationPresenter QWebHapticFeedbackPlayer QWebTouchModifier QWebSpellChecker QWebKitPlatformPlugin QWebPluginFactory QWebScriptWorld QWebSecurityOrigin QWebSettings qtwebkitversion.h QtWebKitVersion QtWebKit 
+SYNCQT.PRIVATE_HEADER_FILES = WebKit/qt/Api/qhttpheader_p.h WebKit/qt/Api/qwebdatabase_p.h WebKit/qt/Api/qwebelement_p.h WebKit/qt/Api/qwebhistory_p.h WebKit/qt/Api/qwebplugindatabase_p.h WebKit/qt/Api/qwebscriptworld_p.h WebKit/qt/Api/qwebsecurityorigin_p.h WebKit2/UIProcess/API/qt/qquicknetworkreply_p.h WebKit2/UIProcess/API/qt/qquicknetworkrequest_p.h WebKit2/UIProcess/API/qt/qquickurlschemedelegate_p.h WebKit2/UIProcess/API/qt/qquickwebpage_p.h WebKit2/UIProcess/API/qt/qquickwebpage_p_p.h WebKit2/UIProcess/API/qt/qquickwebview_p.h WebKit2/UIProcess/API/qt/qquickwebview_p_p.h WebKit2/UIProcess/API/qt/qtwebsecurityorigin_p.h WebKit2/UIProcess/API/qt/qwebchannelwebkittransport_p.h WebKit2/UIProcess/API/qt/qwebdownloaditem_p.h WebKit2/UIProcess/API/qt/qwebdownloaditem_p_p.h WebKit2/UIProcess/API/qt/qwebiconimageprovider_p.h WebKit2/UIProcess/API/qt/qwebkittest_p.h WebKit2/UIProcess/API/qt/qwebloadrequest_p.h WebKit2/UIProcess/API/qt/qwebnavigationhistory_p.h WebKit2/UIProcess/API/qt/qwebnavigationhistory_p_p.h WebKit2/UIProcess/API/qt/qwebnavigationrequest_p.h WebKit2/UIProcess/API/qt/qwebpermissionrequest_p.h WebKit2/UIProcess/API/qt/qwebpreferences_p.h WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h WebKit2/UIProcess/API/qt/raw/qrawwebview_p.h WebKit2/UIProcess/API/qt/raw/qrawwebview_p_p.h 
+SYNCQT.QPA_HEADER_FILES = 
+SYNCQT.CLEAN_HEADER_FILES = WebKit/qt/Api/qwebdatabase.h WebKit/qt/Api/qwebelement.h WebKit/qt/Api/qwebfullscreenrequest.h WebKit/qt/Api/qwebfullscreenvideohandler.h WebKit/qt/Api/qwebhistory.h WebKit/qt/Api/qwebhistoryinterface.h WebKit/qt/Api/qwebkitglobal.h WebKit/qt/Api/qwebkitplatformplugin.h WebKit/qt/Api/qwebpluginfactory.h WebKit/qt/Api/qwebscriptworld.h WebKit/qt/Api/qwebsecurityorigin.h WebKit/qt/Api/qwebsettings.h 
+SYNCQT.INJECTIONS = 
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QtWebKit qtwebkit-opensource-src-5.212/include/QtWebKit/QtWebKit
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QtWebKit	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QtWebKit	2020-09-25 00:09:23.453615000 +1000
@@ -0,0 +1,16 @@
+#ifndef QT_QTWEBKIT_MODULE_H
+#define QT_QTWEBKIT_MODULE_H
+#include <QtWebKit/QtWebKitDepends>
+#include "qwebkitglobal.h"
+#include "qwebdatabase.h"
+#include "qwebelement.h"
+#include "qwebfullscreenrequest.h"
+#include "qwebfullscreenvideohandler.h"
+#include "qwebhistory.h"
+#include "qwebhistoryinterface.h"
+#include "qwebkitplatformplugin.h"
+#include "qwebpluginfactory.h"
+#include "qwebsecurityorigin.h"
+#include "qwebsettings.h"
+#include "qtwebkitversion.h"
+#endif
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QtWebKitVersion qtwebkit-opensource-src-5.212/include/QtWebKit/QtWebKitVersion
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QtWebKitVersion	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QtWebKitVersion	2020-09-25 00:09:23.453615000 +1000
@@ -0,0 +1 @@
+#include "qtwebkitversion.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qtwebkitversion.h qtwebkit-opensource-src-5.212/include/QtWebKit/qtwebkitversion.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qtwebkitversion.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qtwebkitversion.h	2020-09-25 00:09:23.453615000 +1000
@@ -0,0 +1,9 @@
+/* This file was generated by syncqt. */
+#ifndef QT_QTWEBKIT_VERSION_H
+#define QT_QTWEBKIT_VERSION_H
+
+#define QTWEBKIT_VERSION_STR "5.212"
+
+#define QTWEBKIT_VERSION 0x05D400
+
+#endif // QT_QTWEBKIT_VERSION_H
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebDatabase qtwebkit-opensource-src-5.212/include/QtWebKit/QWebDatabase
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebDatabase	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebDatabase	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebdatabase.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebdatabase.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebdatabase.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebdatabase.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebdatabase.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebdatabase.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebElement qtwebkit-opensource-src-5.212/include/QtWebKit/QWebElement
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebElement	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebElement	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebelement.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebElementCollection qtwebkit-opensource-src-5.212/include/QtWebKit/QWebElementCollection
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebElementCollection	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebElementCollection	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebelement.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebelement.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebelement.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebelement.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebelement.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebelement.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebFullScreenRequest qtwebkit-opensource-src-5.212/include/QtWebKit/QWebFullScreenRequest
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebFullScreenRequest	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebFullScreenRequest	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebfullscreenrequest.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebfullscreenrequest.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebfullscreenrequest.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebfullscreenrequest.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebfullscreenrequest.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebfullscreenrequest.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebFullScreenVideoHandler qtwebkit-opensource-src-5.212/include/QtWebKit/QWebFullScreenVideoHandler
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebFullScreenVideoHandler	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebFullScreenVideoHandler	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebfullscreenvideohandler.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebfullscreenvideohandler.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebfullscreenvideohandler.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebfullscreenvideohandler.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebfullscreenvideohandler.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebfullscreenvideohandler.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHapticFeedbackPlayer qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHapticFeedbackPlayer
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHapticFeedbackPlayer	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHapticFeedbackPlayer	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistory qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistory
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistory	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistory	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebhistory.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebhistory.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebhistory.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebhistory.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebhistory.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebhistory.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistoryInterface qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistoryInterface
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistoryInterface	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistoryInterface	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebhistoryinterface.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebhistoryinterface.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebhistoryinterface.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebhistoryinterface.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebhistoryinterface.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebhistoryinterface.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistoryItem qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistoryItem
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebHistoryItem	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebHistoryItem	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebhistory.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebkitglobal.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebkitglobal.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebkitglobal.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebkitglobal.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebkitglobal.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebKitPlatformPlugin qtwebkit-opensource-src-5.212/include/QtWebKit/QWebKitPlatformPlugin
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebKitPlatformPlugin	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebKitPlatformPlugin	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebkitplatformplugin.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebkitplatformplugin.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebkitplatformplugin.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebkitplatformplugin.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebNotificationData qtwebkit-opensource-src-5.212/include/QtWebKit/QWebNotificationData
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebNotificationData	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebNotificationData	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebNotificationPresenter qtwebkit-opensource-src-5.212/include/QtWebKit/QWebNotificationPresenter
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebNotificationPresenter	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebNotificationPresenter	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebPluginFactory qtwebkit-opensource-src-5.212/include/QtWebKit/QWebPluginFactory
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebPluginFactory	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebPluginFactory	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebpluginfactory.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebpluginfactory.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebpluginfactory.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebpluginfactory.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebpluginfactory.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebpluginfactory.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebScriptWorld qtwebkit-opensource-src-5.212/include/QtWebKit/QWebScriptWorld
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebScriptWorld	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebScriptWorld	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebscriptworld.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebscriptworld.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebscriptworld.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebscriptworld.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebscriptworld.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebscriptworld.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSecurityOrigin qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSecurityOrigin
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSecurityOrigin	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSecurityOrigin	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebsecurityorigin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebsecurityorigin.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebsecurityorigin.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebsecurityorigin.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebsecurityorigin.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebsecurityorigin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSelectData qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSelectData
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSelectData	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSelectData	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSelectMethod qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSelectMethod
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSelectMethod	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSelectMethod	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSettings qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSettings
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSettings	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSettings	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebsettings.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebsettings.h qtwebkit-opensource-src-5.212/include/QtWebKit/qwebsettings.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/qwebsettings.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/qwebsettings.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/Api/qwebsettings.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSpellChecker qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSpellChecker
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebSpellChecker	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebSpellChecker	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebTouchModifier qtwebkit-opensource-src-5.212/include/QtWebKit/QWebTouchModifier
--- qtwebkit-5.212.0-alpha4/include/QtWebKit/QWebTouchModifier	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKit/QWebTouchModifier	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebkitplatformplugin.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebframe_p.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebframe_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebframe_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebframe_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/WidgetApi/qwebframe_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebinspector_p.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebinspector_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebinspector_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebinspector_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/WidgetApi/qwebinspector_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebpage_p.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebpage_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebpage_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebpage_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/WidgetApi/qwebpage_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebviewaccessible_p.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebviewaccessible_p.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebviewaccessible_p.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/5.212/QtWebKitWidgets/private/qwebviewaccessible_p.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../../../../Source/WebKit/qt/WidgetApi/qwebviewaccessible_p.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/headers.pri qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/headers.pri
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/headers.pri	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/headers.pri	2020-09-25 00:09:23.433615000 +1000
@@ -0,0 +1,6 @@
+SYNCQT.HEADER_FILES = WebKit/qt/WidgetApi/qgraphicswebview.h WebKit/qt/WidgetApi/qwebframe.h WebKit/qt/WidgetApi/qwebinspector.h WebKit/qt/WidgetApi/qwebpage.h WebKit/qt/WidgetApi/qwebview.h 
+SYNCQT.GENERATED_HEADER_FILES = QGraphicsWebView QWebHitTestResult QWebFrame QWebInspector QWebPage QWebView qtwebkitwidgetsversion.h QtWebKitWidgetsVersion QtWebKitWidgets 
+SYNCQT.PRIVATE_HEADER_FILES = WebKit/qt/WidgetApi/qwebframe_p.h WebKit/qt/WidgetApi/qwebinspector_p.h WebKit/qt/WidgetApi/qwebpage_p.h WebKit/qt/WidgetApi/qwebviewaccessible_p.h 
+SYNCQT.QPA_HEADER_FILES = 
+SYNCQT.CLEAN_HEADER_FILES = WebKit/qt/WidgetApi/qgraphicswebview.h WebKit/qt/WidgetApi/qwebframe.h WebKit/qt/WidgetApi/qwebinspector.h WebKit/qt/WidgetApi/qwebpage.h WebKit/qt/WidgetApi/qwebview.h 
+SYNCQT.INJECTIONS = 
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QGraphicsWebView qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QGraphicsWebView
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QGraphicsWebView	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QGraphicsWebView	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qgraphicswebview.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qgraphicswebview.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qgraphicswebview.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qgraphicswebview.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qgraphicswebview.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/WidgetApi/qgraphicswebview.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QtWebKitWidgets qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QtWebKitWidgets
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QtWebKitWidgets	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QtWebKitWidgets	2020-09-25 00:09:23.433615000 +1000
@@ -0,0 +1,10 @@
+#ifndef QT_QTWEBKITWIDGETS_MODULE_H
+#define QT_QTWEBKITWIDGETS_MODULE_H
+#include <QtWebKitWidgets/QtWebKitWidgetsDepends>
+#include "qgraphicswebview.h"
+#include "qwebframe.h"
+#include "qwebinspector.h"
+#include "qwebpage.h"
+#include "qwebview.h"
+#include "qtwebkitwidgetsversion.h"
+#endif
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QtWebKitWidgetsVersion qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QtWebKitWidgetsVersion
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QtWebKitWidgetsVersion	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QtWebKitWidgetsVersion	2020-09-25 00:09:23.433615000 +1000
@@ -0,0 +1 @@
+#include "qtwebkitwidgetsversion.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qtwebkitwidgetsversion.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qtwebkitwidgetsversion.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qtwebkitwidgetsversion.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qtwebkitwidgetsversion.h	2020-09-25 00:09:23.433615000 +1000
@@ -0,0 +1,9 @@
+/* This file was generated by syncqt. */
+#ifndef QT_QTWEBKITWIDGETS_VERSION_H
+#define QT_QTWEBKITWIDGETS_VERSION_H
+
+#define QTWEBKITWIDGETS_VERSION_STR "5.212"
+
+#define QTWEBKITWIDGETS_VERSION 0x05D400
+
+#endif // QT_QTWEBKITWIDGETS_VERSION_H
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebFrame qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebFrame
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebFrame	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebFrame	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebframe.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebframe.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebframe.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebframe.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebframe.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/WidgetApi/qwebframe.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebHitTestResult qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebHitTestResult
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebHitTestResult	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebHitTestResult	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebframe.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebInspector qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebInspector
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebInspector	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebInspector	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebinspector.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebinspector.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebinspector.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebinspector.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebinspector.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/WidgetApi/qwebinspector.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebPage qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebPage
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebPage	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebPage	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebpage.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebpage.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebpage.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebpage.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebpage.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/WidgetApi/qwebpage.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebView qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebView
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/QWebView	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/QWebView	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "qwebview.h"
diff -Nru qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebview.h qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebview.h
--- qtwebkit-5.212.0-alpha4/include/QtWebKitWidgets/qwebview.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/include/QtWebKitWidgets/qwebview.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+#include "../../Source/WebKit/qt/WidgetApi/qwebview.h"
diff -Nru qtwebkit-5.212.0-alpha4/Source/cmake/OptionsQt.cmake qtwebkit-opensource-src-5.212/Source/cmake/OptionsQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/OptionsQt.cmake	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/cmake/OptionsQt.cmake	2020-09-22 21:30:04.000000000 +1000
@@ -3,7 +3,7 @@
 include(ECMEnableSanitizers)
 include(ECMPackageConfigHelpers)
 
-set(ECM_MODULE_DIR ${CMAKE_MODULE_PATH})
+set(ECM_MODULE_DIR ${CMAKE_CURRENT_LIST_DIR})
 
 set(PROJECT_VERSION_MAJOR 5)
 set(PROJECT_VERSION_MINOR 212)
@@ -13,6 +13,10 @@
 
 set(QT_CONAN_DIR "" CACHE PATH "Directory containing conanbuildinfo.cmake and conanfile.txt")
 if (QT_CONAN_DIR)
+    if (NOT QT_CONAN_FILE)
+        set(QT_CONAN_FILE "${QT_CONAN_DIR}/conanfile.txt")
+    endif ()
+    message(STATUS "Using conan directory: ${QT_CONAN_DIR}")
     find_program(CONAN_COMMAND NAMES conan PATHS $ENV{PIP3_PATH})
     if (NOT CONAN_COMMAND)
         message(FATAL_ERROR "conan executable not found. Make sure that Conan is installed and available in PATH")
@@ -28,18 +32,23 @@
             set(_conan_imports_dest \"\${_absolute_destdir}\${_conan_imports_dest}\")
         endif ()
 
-        message(\"Importing dependencies from conan to \${_conan_imports_dest}\")
+        message(STATUS \"Importing dependencies from conan to \${_conan_imports_dest}\")
         execute_process(
-            COMMAND \"${CONAN_COMMAND}\" imports --import-folder \${_conan_imports_dest} \"${QT_CONAN_DIR}/conanfile.txt\"
+            COMMAND \"${CONAN_COMMAND}\" imports --import-folder \${_conan_imports_dest} \"${QT_CONAN_FILE}\"
             WORKING_DIRECTORY \"${QT_CONAN_DIR}\"
             RESULT_VARIABLE _conan_imports_result
         )
-        message(\"conan imports result: \${_conan_imports_result}\")
+
+        if (NOT _conan_imports_result EQUAL 0)
+            message(FATAL_ERROR \"conan imports failed with code \${_conan_imports_result}\")
+        else ()
+            message(STATUS \"conan imports result: \${_conan_imports_result}\")
+        endif ()
 
         set(_conan_imports_manifest \"\${_conan_imports_dest}/conan_imports_manifest.txt\")
         if (EXISTS \${_conan_imports_manifest})
             file(REMOVE \${_conan_imports_manifest})
-            message(\"Removed conan install manifest: \${_conan_imports_manifest}\")
+            message(STATUS \"Removed conan install manifest: \${_conan_imports_manifest}\")
         endif ()
     ")
 endif ()
@@ -163,13 +172,17 @@
     endif ()
 endmacro()
 
-set(CMAKE_MACOSX_RPATH ON)
+if (APPLE)
+    set(CMAKE_MACOSX_RPATH ON)
+    set(CMAKE_FIND_FRAMEWORK LAST)
+endif ()
 
 add_definitions(-DBUILDING_QT__=1)
 add_definitions(-DQT_NO_EXCEPTIONS)
 add_definitions(-DQT_USE_QSTRINGBUILDER)
 add_definitions(-DQT_NO_CAST_TO_ASCII -DQT_ASCII_CAST_WARNINGS)
 add_definitions(-DQT_DEPRECATED_WARNINGS -DQT_DISABLE_DEPRECATED_BEFORE=0x050000)
+add_definitions(-DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT)
 
 # We use -fno-rtti with GCC and Clang, see OptionsCommon.cmake
 if (COMPILER_IS_GCC_OR_CLANG)
@@ -290,6 +303,7 @@
 cmake_dependent_option(ENABLE_TEST_SUPPORT "Build tools for running layout tests and related library code" ON
                                            "DEVELOPER_MODE" OFF)
 option(USE_STATIC_RUNTIME "Use static runtime (MSVC only)" OFF)
+option(ENABLE_PCH "Use pre-compiled headers (MSVC only)" ON)
 
 # Private options specific to the Qt port. Changing these options is
 # completely unsupported. They are intended for use only by WebKit developers.
@@ -419,40 +433,6 @@
     set(USE_SYSTEM_MALLOC 1)
 endif ()
 
-if (MSVC)
-    if (NOT WEBKIT_LIBRARIES_DIR)
-        if (DEFINED ENV{WEBKIT_LIBRARIES})
-            set(WEBKIT_LIBRARIES_DIR "$ENV{WEBKIT_LIBRARIES}")
-        else ()
-            set(WEBKIT_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/WebKitLibraries/win")
-        endif ()
-    endif ()
-
-    include_directories("${CMAKE_BINARY_DIR}/DerivedSources/ForwardingHeaders" "${CMAKE_BINARY_DIR}/DerivedSources" "${WEBKIT_LIBRARIES_DIR}/include")
-    set(CMAKE_INCLUDE_PATH "${WEBKIT_LIBRARIES_DIR}/include")
-    # bundled FindZlib is strange
-    set(ZLIB_ROOT "${WEBKIT_LIBRARIES_DIR}/include")
-    if (${MSVC_CXX_ARCHITECTURE_ID} STREQUAL "X86")
-        link_directories("${CMAKE_BINARY_DIR}/lib32" "${WEBKIT_LIBRARIES_DIR}/lib32")
-        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
-        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
-        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin32)
-        set(CMAKE_LIBRARY_PATH "${WEBKIT_LIBRARIES_DIR}/lib32")
-    else ()
-        link_directories("${CMAKE_BINARY_DIR}/lib64" "${WEBKIT_LIBRARIES_DIR}/lib64")
-        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
-        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
-        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin64)
-        set(CMAKE_LIBRARY_PATH "${WEBKIT_LIBRARIES_DIR}/lib64")
-    endif ()
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
-    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
-    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
-    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
-    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
-endif ()
-
 if (DEFINED ENV{SQLITE3SRCDIR})
     get_filename_component(SQLITE3SRC_ABS_DIR $ENV{SQLITE3SRCDIR} ABSOLUTE)
     set(SQLITE3_SOURCE_DIR ${SQLITE3SRC_ABS_DIR} CACHE PATH "Path to SQLite sources to use instead of system library" FORCE)
@@ -732,6 +712,14 @@
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gdb-index")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gdb-index")
     endif ()
+
+    if (MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)
+        # Create pdb files for debugging purposes, also for Release builds
+        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")
+        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
+        set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG")
+        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")
+    endif ()
 endif ()
 
 if (APPLE)
@@ -896,14 +884,6 @@
         /wd6246 /wd6255 /wd6387
     )
 
-    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
-        # Create pdb files for debugging purposes, also for Release builds
-        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")
-        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
-        set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG")
-        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")
-    endif ()
-
     add_compile_options(/GS)
 
     # We do not use exceptions
diff -Nru qtwebkit-5.212.0-alpha4/Source/cmake/WebKitCommon.cmake qtwebkit-opensource-src-5.212/Source/cmake/WebKitCommon.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/WebKitCommon.cmake	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/cmake/WebKitCommon.cmake	2020-09-22 21:30:04.000000000 +1000
@@ -24,7 +24,11 @@
     # TODO Enforce version requirement for perl
     find_package(Perl 5.10.0 REQUIRED)
 
-    set(Python_ADDITIONAL_VERSIONS 3)
+    # Workaround for Windows Store python3.exe
+    # Official Python packages for Windows don't have python3.exe, only python.exe
+    if (NOT WIN32)
+        set(Python_ADDITIONAL_VERSIONS 3)
+    endif ()
     find_package(PythonInterp 2.7.0 REQUIRED)
 
     # We cannot check for RUBY_FOUND because it is set only when the full package is installed and
diff -Nru qtwebkit-5.212.0-alpha4/Source/cmake/WebKitMacros.cmake qtwebkit-opensource-src-5.212/Source/cmake/WebKitMacros.cmake
--- qtwebkit-5.212.0-alpha4/Source/cmake/WebKitMacros.cmake	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/cmake/WebKitMacros.cmake	2020-09-22 21:30:04.000000000 +1000
@@ -24,7 +24,7 @@
 endmacro()
 
 macro(ADD_PRECOMPILED_HEADER _header _cpp _source)
-    if (MSVC)
+    if (MSVC AND (ENABLE_PCH OR NOT PORT STREQUAL "Qt"))
         get_filename_component(PrecompiledBasename ${_header} NAME_WE)
         set(PrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/${PrecompiledBasename}.pch")
         set(_sources ${${_source}})
@@ -41,6 +41,10 @@
 
         list(APPEND ${_source} ${_cpp})
     endif ()
+    if (MSVC AND NOT ENABLE_PCH AND PORT STREQUAL "Qt")
+        set(_sources ${${_source}})
+        set_source_files_properties(${_sources} PROPERTIES COMPILE_FLAGS "/FI\"${_header}\"")
+    endif ()
     #FIXME: Add support for Xcode.
 endmacro()
 
@@ -285,7 +289,8 @@
         add_custom_command(TARGET ${_target} POST_BUILD COMMAND ${${_target}_POST_BUILD_COMMAND} VERBATIM)
     endif ()
 
-    if (APPLE AND NOT PORT STREQUAL "GTK" AND NOT ${${_target}_LIBRARY_TYPE} MATCHES STATIC)
+
+    if (APPLE AND NOT PORT STREQUAL "GTK" AND NOT ${${_target}_LIBRARY_TYPE} MATCHES STATIC AND (MACOS_BUILD_FRAMEWORKS OR NOT PORT STREQUAL "Qt"))
         set_target_properties(${_target} PROPERTIES FRAMEWORK TRUE)
         if (${_target}_PUBLIC_HEADERS)
             set_target_properties(${_target} PROPERTIES PUBLIC_HEADER "${${_target}_PUBLIC_HEADERS}")
diff -Nru qtwebkit-5.212.0-alpha4/Source/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -24,14 +24,14 @@
     add_subdirectory(ThirdParty/woff2)
 endif ()
 
-if (ENABLE_WEBKIT)
-    add_subdirectory(WebKit)
-endif ()
-
 if (ENABLE_WEBKIT2)
     add_subdirectory(WebKit2)
 endif ()
 
+if (ENABLE_WEBKIT)
+    add_subdirectory(WebKit)
+endif ()
+
 WEBKIT_INCLUDE_CONFIG_FILES_IF_EXISTS()
 
 # -----------------------------------------------------------------------------
diff -Nru qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/JavaScriptCore/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -1287,6 +1287,7 @@
 elseif (WTF_CPU_S390X)
 elseif (WTF_CPU_MIPS)
 elseif (WTF_CPU_SH4)
+elseif (WTF_CPU_RISCV64)
 elseif (WTF_CPU_X86)
 elseif (WTF_CPU_X86_64)
     if (MSVC AND ENABLE_JIT)
diff -Nru qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/generate-bytecode-files qtwebkit-opensource-src-5.212/Source/JavaScriptCore/generate-bytecode-files
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/generate-bytecode-files	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/generate-bytecode-files	2020-09-22 21:30:04.000000000 +1000
@@ -163,7 +163,7 @@
         initBytecodesFile = openOrExit(initASMFileName, "w")
 
     try:
-        bytecodeSections = json.load(bytecodeFile, encoding = "utf-8")
+        bytecodeSections = json.load(bytecodeFile)
     except:
         print("Unexpected error parsing {0}: {1}".format(bytecodeJSONFile, sys.exc_info()))
 
diff -Nru qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/jsc.cpp qtwebkit-opensource-src-5.212/Source/JavaScriptCore/jsc.cpp
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/jsc.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/jsc.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -189,7 +189,7 @@
 
 class ElementHandleOwner : public WeakHandleOwner {
 public:
-    bool isReachableFromOpaqueRoots(Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor) override
+    bool isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor) override
     {
         Element* element = jsCast<Element*>(handle.slot()->asCell());
         return visitor.containsOpaqueRoot(element->root());
diff -Nru qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/parser/Parser.cpp qtwebkit-opensource-src-5.212/Source/JavaScriptCore/parser/Parser.cpp
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/parser/Parser.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/parser/Parser.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -1089,6 +1089,10 @@
     JSTokenLocation location(tokenLocation());
     int startLine = tokenLine();
     next();
+
+    DepthManager statementDepth(&m_statementDepth);
+    m_statementDepth++;
+
     handleProductionOrFail(OPENPAREN, "(", "start", "for-loop header");
     int nonLHSCount = m_parserState.nonLHSCount;
     int declarations = 0;
diff -Nru qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/Scripts/generate-js-builtins.py qtwebkit-opensource-src-5.212/Source/JavaScriptCore/Scripts/generate-js-builtins.py
--- qtwebkit-5.212.0-alpha4/Source/JavaScriptCore/Scripts/generate-js-builtins.py	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/JavaScriptCore/Scripts/generate-js-builtins.py	2020-09-22 21:30:04.000000000 +1000
@@ -124,7 +124,7 @@
     cli_parser.add_option("-t", "--test", action="store_true", help="Enable test mode.")
 
     arg_options, arg_values = cli_parser.parse_args()
-    if len(arg_values) is 0 and not arg_options.input_directory:
+    if len(arg_values) == 0 and not arg_options.input_directory:
         raise ParseException("At least one input file or directory expected.")
 
     if not arg_options.output_directory:
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebCore/bridge/qt/qt_runtime.cpp qtwebkit-opensource-src-5.212/Source/WebCore/bridge/qt/qt_runtime.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebCore/bridge/qt/qt_runtime.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/bridge/qt/qt_runtime.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -1591,6 +1591,7 @@
 
     JSValueRef callException = 0;
     ExecState* exec = toJS(m_context);
+    JSLockHolder lock(exec);
     JSObjectCallAsFunction(m_context, m_receiverFunction, m_receiver, argc, args.data(), &callException);
     if (callException)
         WebCore::reportException(exec, toJS(exec, callException));
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebCore/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebCore/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebCore/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -3366,6 +3366,7 @@
 set(WebCoreTestSupport_INCLUDE_DIRECTORIES
     "${WEBCORE_DIR}/platform/mock"
     "${WEBCORE_DIR}/testing"
+    "${WEBCORE_DIR}/testing/js"
     "${DERIVED_SOURCES_WEBCORE_DIR}"
 )
 
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebCore/css/makegrammar.pl qtwebkit-opensource-src-5.212/Source/WebCore/css/makegrammar.pl
--- qtwebkit-5.212.0-alpha4/Source/WebCore/css/makegrammar.pl	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/css/makegrammar.pl	2020-09-22 21:30:04.000000000 +1000
@@ -73,25 +73,6 @@
 }
 
 my $fileBase = File::Spec->join($outputDir, $filename);
-my @bisonCommand = ($bison, "-d", "-p", $symbolsPrefix, $grammarFilePath, "-o", "$fileBase.cpp");
+my @bisonCommand = ($bison, "--defines=$fileBase.h", "-p", $symbolsPrefix, $grammarFilePath, "-o", "$fileBase.cpp");
 push @bisonCommand, "--no-lines" if $^O eq "MSWin32"; # Work around bug in bison >= 3.0 on Windows where it puts backslashes into #line directives.
 system(@bisonCommand) == 0 or die;
-
-open HEADER, ">$fileBase.h" or die;
-print HEADER << "EOF";
-#ifndef CSSGRAMMAR_H
-#define CSSGRAMMAR_H
-EOF
-
-open HPP, "<$fileBase.cpp.h" or open HPP, "<$fileBase.hpp" or die;
-while (<HPP>) {
-    print HEADER;
-}
-close HPP;
-
-print HEADER "#endif\n";
-close HEADER;
-
-unlink("$fileBase.cpp.h");
-unlink("$fileBase.hpp");
-
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebCore/platform/MIMETypeRegistry.cpp qtwebkit-opensource-src-5.212/Source/WebCore/platform/MIMETypeRegistry.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebCore/platform/MIMETypeRegistry.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/platform/MIMETypeRegistry.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -254,6 +254,9 @@
     // Do not treat SVG as images directly because WebKit can handle them.
     supportedImageMIMETypes->remove("image/svg+xml");
     supportedImageResourceMIMETypes->remove("image/svg+xml");
+    // Do not treat PDF as images
+    supportedImageMIMETypes->remove("application/pdf");
+    supportedImageResourceMIMETypes->remove("application/pdf");
 #endif // PLATFORM(QT)
 #endif // USE(CG)
 }
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebCore/platform/network/qt/ResourceRequest.h qtwebkit-opensource-src-5.212/Source/WebCore/platform/network/qt/ResourceRequest.h
--- qtwebkit-5.212.0-alpha4/Source/WebCore/platform/network/qt/ResourceRequest.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebCore/platform/network/qt/ResourceRequest.h	2020-09-22 21:30:04.000000000 +1000
@@ -32,7 +32,7 @@
 // HTTP/2 is implemented since Qt 5.8, but various QtNetwork bugs make it unusable in browser with Qt < 5.10.1
 // We also don't enable HTTP/2 for unencrypted connections because of possible compatibility issues; it can be
 // enabled manually by user application via custom QNAM subclass
-#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1)
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1) && !defined(QT_NO_SSL)
 #define USE_HTTP2 1
 #endif
 
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit/PlatformQt.cmake qtwebkit-opensource-src-5.212/Source/WebKit/PlatformQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/WebKit/PlatformQt.cmake	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/PlatformQt.cmake	2020-09-22 21:30:04.000000000 +1000
@@ -250,15 +250,15 @@
 
 if (ENABLE_WEBKIT2)
     if (APPLE)
-        set(WEBKIT2_LIBRARY -Wl,-force_load WebKit2)
+        set(WEBKIT2_LIBRARY -Wl,-force_load $<TARGET_FILE:WebKit2>)
     elseif (MSVC)
-        set(WEBKIT2_LIBRARY "-WHOLEARCHIVE:WebKit2${CMAKE_DEBUG_POSTFIX}")
+        set(WEBKIT2_LIBRARY "-WHOLEARCHIVE:$<TARGET_FILE:WebKit2>")
     elseif (UNIX OR MINGW)
-        set(WEBKIT2_LIBRARY -Wl,--whole-archive WebKit2 -Wl,--no-whole-archive)
+        set(WEBKIT2_LIBRARY -Wl,--whole-archive $<TARGET_FILE:WebKit2> -Wl,--no-whole-archive)
     else ()
         message(WARNING "Unknown system, linking with WebKit2 may fail!")
-        set(WEBKIT2_LIBRARY WebKit2)
     endif ()
+    set(WEBKIT2_LIBRARY ${WEBKIT2_LIBRARY} WebKit2) # For linking dependencies
 endif ()
 
 list(APPEND WebKit_LIBRARIES
@@ -419,6 +419,16 @@
 )
 
 file(GLOB WebKit_PRIVATE_HEADERS qt/Api/*_p.h)
+
+# This is needed to install WK2 private headers into macOS bundle
+if (ENABLE_WEBKIT2)
+    file(GLOB WebKit2_PRIVATE_HEADERS "${WEBKIT2_DIR}/UIProcess/API/qt/*_p.h")
+    foreach (_src ${WebKit2_PRIVATE_HEADERS})
+        set_property(SOURCE ${_src} PROPERTY SKIP_AUTOMOC ON)
+    endforeach ()
+    list(APPEND WebKit_PRIVATE_HEADERS ${WebKit2_PRIVATE_HEADERS})
+endif ()
+
 install(
     FILES
         ${WebKit_PRIVATE_HEADERS}
@@ -516,6 +526,10 @@
         BIN_INSTALL_DIR "$$QT_MODULE_BIN_BASE"
         LIB_INSTALL_DIR "$$QT_MODULE_LIB_BASE"
     )
+    set(WebKit_Private_PRI_ARGUMENTS
+        BIN_INSTALL_DIR "$$QT_MODULE_BIN_BASE"
+        LIB_INSTALL_DIR "$$QT_MODULE_LIB_BASE"
+    )
     if (MACOS_BUILD_FRAMEWORKS)
         list(APPEND WebKit_PRI_ARGUMENTS
             INCLUDE_INSTALL_DIR "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers"
@@ -524,6 +538,7 @@
         list(APPEND WebKit_Private_PRI_ARGUMENTS
             INCLUDE_INSTALL_DIR "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers/${PROJECT_VERSION}"
             INCLUDE_INSTALL_DIR2 "$$QT_MODULE_LIB_BASE/QtWebKit.framework/Headers/${PROJECT_VERSION}/QtWebKit"
+            MODULE_CONFIG "lib_bundle"
         )
     else ()
         list(APPEND WebKit_PRI_ARGUMENTS
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -42,6 +42,10 @@
     AUTOMOC ON
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    target_compile_options(qmlwebkitplugin PRIVATE -frtti)
+endif ()
+
 add_custom_target(
     qmlwebkitplugin-files ALL
     COMMAND ${CMAKE_COMMAND} -E copy_if_different qmldir "${CMAKE_BINARY_DIR}/imports/QtWebKit/qmldir"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/experimental/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/experimental/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebKit/qt/declarative/experimental/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit/qt/declarative/experimental/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -19,6 +19,10 @@
     AUTOMOC ON
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    target_compile_options(qmlwebkitexperimentalplugin PRIVATE -frtti)
+endif ()
+
 add_custom_target(
     qmlwebkitexperimentalplugin-files ALL
     COMMAND ${CMAKE_COMMAND} -E copy_if_different qmldir "${CMAKE_BINARY_DIR}/imports/QtWebKit/experimental/qmldir"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/Platform/IPC/unix/ConnectionUnix.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -368,6 +368,10 @@
 void Connection::readyReadHandler()
 {
 #if PLATFORM(QT)
+    if (!m_socketNotifier) {
+        WTFLogAlways("Error receiving IPC message on socket %d in process %d: m_socketNotifier is null", m_socketDescriptor, getpid());
+        return;
+    }
     SocketNotifierResourceGuard socketNotifierEnabler(m_socketNotifier);
 #endif
 
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/PlatformQt.cmake qtwebkit-opensource-src-5.212/Source/WebKit2/PlatformQt.cmake
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/PlatformQt.cmake	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/PlatformQt.cmake	2020-09-22 21:30:04.000000000 +1000
@@ -217,6 +217,21 @@
     WebProcess/qt/WebProcessQt.cpp
 )
 
+if (COMPILER_IS_GCC_OR_CLANG)
+    set_source_files_properties(
+        UIProcess/API/qt/qquicknetworkreply.cpp
+        UIProcess/API/qt/qquicknetworkrequest.cpp
+        UIProcess/API/qt/qquickurlschemedelegate.cpp
+        UIProcess/API/qt/qquickwebpage.cpp
+        UIProcess/API/qt/qquickwebview.cpp
+        UIProcess/API/qt/qwebiconimageprovider.cpp
+
+        UIProcess/Launcher/qt/ProcessLauncherQt.cpp
+    PROPERTIES
+        COMPILE_FLAGS -frtti
+    )
+endif ()
+
 qt5_add_resources(WebKit2_SOURCES
     WebKit2.qrc
 )
@@ -329,10 +344,6 @@
 
 WEBKIT_CREATE_FORWARDING_HEADERS(QtWebKit/private DIRECTORIES UIProcess/API/qt)
 
-if (ENABLE_API_TESTS)
-    add_subdirectory(UIProcess/API/qt/tests)
-endif ()
-
 file(GLOB WebKit2_PRIVATE_HEADERS UIProcess/API/qt/*_p.h)
 install(
     FILES
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Library General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public License
- * along with this program; see the file COPYING.LIB.  If not, write to
- * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301, USA.
- *
- */
-#include "bytearraytestdata.h"
-
-ByteArrayTestData::ByteArrayTestData(QObject* parent)
-    : QObject(parent)
-{
-    QString text = QStringLiteral("<html><head><title>title with copyright %1</title></head><body>content</body></html>");
-    text = text.arg(QChar::fromLatin1(169));
-
-    m_latin1Data = text.toLatin1();
-    m_utf8Data = text.toUtf8();
-
-    Q_ASSERT(m_latin1Data != m_utf8Data);
-}
-
-ByteArrayTestData::~ByteArrayTestData()
-{
-}
-
-QVariant ByteArrayTestData::latin1Data() const
-{
-    return QVariant(m_latin1Data);
-}
-
-QVariant ByteArrayTestData::utf8Data() const
-{
-    return QVariant(m_utf8Data);
-}
-
-#include "moc_bytearraytestdata.cpp"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.h qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.h
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/bytearraytestdata.h	1970-01-01 10:00:00.000000000 +1000
@@ -1,51 +0,0 @@
-/*
- * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Library General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public License
- * along with this program; see the file COPYING.LIB.  If not, write to
- * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301, USA.
- *
- */
-
-#ifndef bytearraytestdata_h
-#define bytearraytestdata_h
-
-#if 0
-#pragma qt_no_master_include
-#endif
-
-#include "qwebkitglobal.h"
-#include <QByteArray>
-#include <QObject>
-#include <QtQuick/qquickitem.h>
-
-class ByteArrayTestData : public QObject {
-    Q_OBJECT
-    Q_PROPERTY(QVariant latin1Data READ latin1Data)
-    Q_PROPERTY(QVariant utf8Data READ utf8Data)
-
-public:
-    ByteArrayTestData(QObject* parent = 0);
-    virtual ~ByteArrayTestData();
-    QVariant latin1Data() const;
-    QVariant utf8Data() const;
-
-private:
-    QByteArray m_latin1Data;
-    QByteArray m_utf8Data;
-};
-
-QML_DECLARE_TYPE(ByteArrayTestData)
-
-#endif // bytearraytestdata_h
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/CMakeLists.txt qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/CMakeLists.txt	1970-01-01 10:00:00.000000000 +1000
@@ -1,101 +0,0 @@
-include_directories(
-    "${CMAKE_SOURCE_DIR}/Source"
-    "${FORWARDING_HEADERS_DIR}/QtWebKit"
-    "${WEBKIT_DIR}/qt/Api"
-)
-
-include_directories(SYSTEM
-    ${Qt5Quick_INCLUDE_DIRS}
-    ${Qt5Quick_PRIVATE_INCLUDE_DIRS}
-    ${Qt5QuickTest_INCLUDE_DIRS}
-)
-
-set(tst_qmltests_DEFINITIONS
-    IMPORT_DIR="${CMAKE_BINARY_DIR}/imports"
-    QWP_PATH="${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
-    TESTS_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
-)
-
-set(tst_qmltests_DesktopBehavior_DEFINITIONS
-    ${tst_qmltests_DEFINITIONS}
-
-    QUICK_TEST_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}/qmltests/DesktopBehavior"
-    DISABLE_FLICKABLE_VIEWPORT=1
-)
-
-set(tst_qmltests_WebView_DEFINITIONS
-    ${tst_qmltests_DEFINITIONS}
-
-    QUICK_TEST_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}/qmltests/WebView"
-)
-
-set(qmltests_QML_SOURCES
-    qmltests/DesktopBehavior/tst_linkHovered.qml
-    qmltests/DesktopBehavior/tst_loadHtml.qml
-    qmltests/DesktopBehavior/tst_navigationRequested.qml
-
-    qmltests/WebView/tst_applicationScheme.qml
-    qmltests/WebView/tst_colorChooser.qml
-    qmltests/WebView/tst_doubleTapToZoom.qml
-    qmltests/WebView/tst_download.qml
-    qmltests/WebView/tst_evaluateJavaScript.qml
-    qmltests/WebView/tst_favIconLoad.qml
-    qmltests/WebView/tst_findText.qml
-    qmltests/WebView/tst_fitToView.qml
-    qmltests/WebView/tst_geopermission.qml
-    qmltests/WebView/tst_itemSelector.qml
-    qmltests/WebView/tst_javaScriptDialogs.qml
-    qmltests/WebView/tst_loadFail.qml
-    qmltests/WebView/tst_loadHtml.qml
-    qmltests/WebView/tst_loadProgress.qml
-    qmltests/WebView/tst_loadProgressSignal.qml
-    qmltests/WebView/tst_loadUrl.qml
-    qmltests/WebView/tst_messaging.qml
-    qmltests/WebView/tst_multiFileUpload.qml
-    qmltests/WebView/tst_navigationHistory.qml
-    qmltests/WebView/tst_notification.qml
-    qmltests/WebView/tst_origin.qml
-    qmltests/WebView/tst_preferences.qml
-    qmltests/WebView/tst_properties.qml
-    qmltests/WebView/tst_resize.qml
-    qmltests/WebView/tst_singleFileUpload.qml
-    qmltests/WebView/tst_titleChanged.qml
-    qmltests/WebView/tst_userScripts.qml
-    qmltests/WebView/tst_webchannel.qml
-    qmltests/WebView/tst_wheelEventHandling.qml
-
-    qmltests/common/TestWebView.qml
-)
-
-set(qmltests_SOURCES
-    bytearraytestdata.cpp
-    util.cpp
-
-    qmltests/tst_qmltests.cpp
-    ${qmltests_QML_SOURCES}
-)
-
-qt5_add_resources(qmltests_SOURCES qmltests/resources.qrc)
-
-set(qmltests_LIBRARIES
-    WebKit
-    ${Qt5Quick_LIBRARIES}
-    ${Qt5QuickTest_LIBRARIES}
-    ${Qt5Test_LIBRARIES}
-)
-
-if (SHARED_CORE)
-    list(APPEND qmltests_LIBRARIES
-        WebKit2
-    )
-endif ()
-
-add_executable(tst_qmltests_WebView ${qmltests_SOURCES})
-target_compile_definitions(tst_qmltests_WebView PRIVATE ${tst_qmltests_WebView_DEFINITIONS})
-target_link_libraries(tst_qmltests_WebView ${qmltests_LIBRARIES})
-set_target_properties(tst_qmltests_WebView PROPERTIES AUTOMOC ON)
-
-add_executable(tst_qmltests_DesktopBehavior ${qmltests_SOURCES})
-target_compile_definitions(tst_qmltests_DesktopBehavior PRIVATE ${tst_qmltests_DesktopBehavior_DEFINITIONS})
-target_link_libraries(tst_qmltests_DesktopBehavior ${qmltests_LIBRARIES})
-set_target_properties(tst_qmltests_DesktopBehavior PROPERTIES AUTOMOC ON)
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page2.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page2.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page2.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page2.html	1970-01-01 10:00:00.000000000 +1000
@@ -1 +0,0 @@
-<h1>Basic page 2</h1>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/basic_page.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<html>
-<head>
-<title> Basic Page </title>
-</head>
-<h1>Basic page</h1>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/bluesquare.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/bluesquare.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/bluesquare.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/bluesquare.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,5 +0,0 @@
-<body style="margin:60px">
-    <table style="border:10px solid blue; width:80px; height:80px">
-        <tr><td>&nbsp;</td></tr>
-    </table>
-</body>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/direct-image-compositing.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/direct-image-compositing.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/direct-image-compositing.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/direct-image-compositing.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,66 +0,0 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
-   "http://www.w3.org/TR/html4/loose.dtd">
-
-<html lang="en">
-<head>
-  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
-  <title>Testing direct image layer optimisation</title>
-  <style type="text/css" media="screen">
-    img {
-      float: left;
-      width: 150px;
-      height: 150px;
-    }
-    img {
-      -webkit-transform: rotate3d(0, 0, 1, 0);
-    }
-    .test {
-      float: left;
-      height: 200px;
-      width: 260px;
-    }
-   </style>
-</head>
-<body>
-
-  <h1>Image optimisation in layers</h1>
-
-  <p>
-    This test exercises direct compositing of images with hardware acceleration. The visual results
-    using ACCELERATED_COMPOSITING and regular TOT should be identical. Running this test manually with
-    the correct debug options will show which elements are directly composited. See
-    <a href="https://bugs.webkit.org/show_bug.cgi?id=23361">https://bugs.webkit.org/show_bug.cgi?id=23361</a>
-  </p>
-
-  <div class="test">
-    <img src="resources/simple_image.png">
-    Basic image - no style - can be directly composited
-  </div>
-
-  <div class="test">
-    <img src="resources/simple_image.png" style="border: 5px solid blue;">
-    5px blue border - can NOT be directly composited
-  </div>
-
-  <div class="test">
-    <img src="resources/simple_image.png" style="margin: 5px 5px;">
-    margin - can NOT be directly composited
-  </div>
-
-  <div class="test">
-    <img src="resources/simple_image.png" style="background-color: grey;">
-    solid background - can be directly composited
-  </div>
-
-  <div class="test">
-    <img src="resources/simple_image.png" style="background: orange url(resources/simple_image.png) -50px -50px;">
-    background image - can NOT be directly composited
-  </div>
-
-  <div class="test">
-    <img src="resources/simple_image.png" style="-webkit-transform: rotate3d(0, 0, 1, 10deg);">
-    rotated but otherwise no style - can be directly composited
-  </div>
-
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/inputmethod.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/inputmethod.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/inputmethod.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/inputmethod.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,11 +0,0 @@
-<html>
-<head>
-<title>Basic Page For Input Method Testing</title>
-</head>
-<body>
-<h1>Basic page</h1>
-<input id="inputField" />
-<input id="emailInputField" type="email" />
-<div id="editableDiv" contenteditable></div>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/redsquare.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/redsquare.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/redsquare.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/redsquare.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,5 +0,0 @@
-<body style="margin:20px">
-    <table style="border:10px solid red; width:160px; height:160px">
-        <tr><td>&nbsp;</td></tr>
-    </table>
-</body>
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_noBackground1.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_noBackground1.png differ
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_noBackground3.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_noBackground3.png differ
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_paint.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/resources/qwkview_paint.png differ
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/resources/simple_image.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/resources/simple_image.png differ
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/scroll.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/scroll.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/html/scroll.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/html/scroll.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,29 +0,0 @@
-<!DOCTYPE html>
-<html>
-<meta name="viewport" content="width=200, height=500, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1"/>
-<script type="text/javascript">
-function pageScroll() {
-    window.scrollBy(0,50); // horizontal and vertical scroll increments
-}
-</script> 
-<style>
-    body {
-        background-color: blue;
-        margin: 50 50 50 50;
-    }
-    div {
-        font-color: white;
-        background-color: green;
-        width: 300px;
-        height: 1000px;
-    } 
-</style>
-
-<head>
-<title>Scroll test </title>
-</head>
-<body onload="pageScroll()">
-<div>
-</div>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/inspectorserver.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/inspectorserver.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/inspectorserver.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/inspectorserver.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,4 +0,0 @@
-include(../tests.pri)
-SOURCES += $${TARGET}.cpp
-QT += webkit-private
-DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/tst_inspectorserver.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/tst_inspectorserver.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/tst_inspectorserver.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/inspectorserver/tst_inspectorserver.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,183 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#include "../testwindow.h"
-#include "../util.h"
-
-#include <QNetworkAccessManager>
-#include <QNetworkReply>
-#include <QNetworkRequest>
-#include <QScopedPointer>
-#include <QtQml/QQmlEngine>
-#include <QtTest/QtTest>
-#include <private/qquickwebview_p.h>
-#include <private/qwebpreferences_p.h>
-
-#define INSPECTOR_SERVER_PORT "23654"
-static const QUrl s_inspectorServerHttpBaseUrl("http://localhost:" INSPECTOR_SERVER_PORT);
-static const QUrl s_inspectorServerWebSocketBaseUrl("ws://localhost:" INSPECTOR_SERVER_PORT);
-
-class tst_InspectorServer : public QObject {
-    Q_OBJECT
-public:
-    tst_InspectorServer();
-
-private Q_SLOTS:
-    void init();
-    void cleanup();
-
-    void testPageList();
-    void testRemoteDebuggingMessage();
-    void openRemoteDebuggingSession();
-private:
-    void prepareWebViewComponent();
-    inline QQuickWebView* newWebView();
-    inline QQuickWebView* webView() const;
-    QJsonArray fetchPageList() const;
-    QScopedPointer<TestWindow> m_window;
-    QScopedPointer<QQmlComponent> m_component;
-};
-
-tst_InspectorServer::tst_InspectorServer()
-{
-    qputenv("QTWEBKIT_INSPECTOR_SERVER", INSPECTOR_SERVER_PORT);
-    addQtWebProcessToPath();
-    prepareWebViewComponent();
-}
-
-void tst_InspectorServer::prepareWebViewComponent()
-{
-    static QQmlEngine* engine = new QQmlEngine(this);
-    engine->addImportPath(QString::fromUtf8(IMPORT_DIR));
-
-    m_component.reset(new QQmlComponent(engine, this));
-
-    m_component->setData(QByteArrayLiteral("import QtQuick 2.0\n"
-                                           "import QtWebKit 3.0\n"
-                                           "WebView {}")
-                         , QUrl());
-}
-
-QQuickWebView* tst_InspectorServer::newWebView()
-{
-    QObject* viewInstance = m_component->create();
-
-    return qobject_cast<QQuickWebView*>(viewInstance);
-}
-
-void tst_InspectorServer::init()
-{
-    m_window.reset(new TestWindow(newWebView()));
-    webView()->experimental()->preferences()->setDeveloperExtrasEnabled(true);
-}
-
-void tst_InspectorServer::cleanup()
-{
-    m_window.reset();
-}
-
-inline QQuickWebView* tst_InspectorServer::webView() const
-{
-    return static_cast<QQuickWebView*>(m_window->webView.data());
-}
-
-QJsonArray tst_InspectorServer::fetchPageList() const
-{
-    QNetworkAccessManager qnam;
-    QScopedPointer<QNetworkReply> reply(qnam.get(QNetworkRequest(s_inspectorServerHttpBaseUrl.resolved(QUrl("pagelist.json")))));
-    waitForSignal(reply.data(), SIGNAL(finished()));
-    return QJsonDocument::fromJson(reply->readAll()).array();
-}
-
-void tst_InspectorServer::testPageList()
-{
-    QUrl testPageUrl = QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-    LoadStartedCatcher catcher(webView());
-    webView()->setUrl(testPageUrl);
-    waitForSignal(&catcher, SIGNAL(finished()));
-
-    // Our page has developerExtrasEnabled and should be the only one in the list.
-    QJsonArray pageList = fetchPageList();
-    QCOMPARE(pageList.size(), 1);
-    QCOMPARE(testPageUrl.toString(), pageList.at(0).toObject().value("url").toString());
-}
-
-void tst_InspectorServer::testRemoteDebuggingMessage()
-{
-    QJsonArray pageList = fetchPageList();
-    QCOMPARE(pageList.size(), 1);
-
-    // Test sending a raw remote debugging message through our web socket server.
-    // For this specific message see: http://code.google.com/chrome/devtools/docs/protocol/tot/runtime.html#command-evaluate
-    QLatin1String jsExpression("2 + 2");
-    QLatin1String jsExpressionResult("4");
-    QScopedPointer<QQuickWebView> webSocketQueryWebView(newWebView());
-    webSocketQueryWebView->loadHtml(QString(
-        "<script type=\"text/javascript\">\n"
-        "var socket = new WebSocket('%1/devtools/page/%2');\n"
-        "socket.onmessage = function(message) {\n"
-            "var response = JSON.parse(message.data);\n"
-            "if (response.id === 1)\n"
-                "document.title = response.result.result.value;\n"
-        "}\n"
-        "socket.onopen = function() {\n"
-            "socket.send('{\"id\": 1, \"method\": \"Runtime.evaluate\", \"params\": {\"expression\": \"%3\" } }');\n"
-        "}\n"
-        "</script>")
-        .arg(s_inspectorServerWebSocketBaseUrl.toString())
-        .arg(pageList.at(0).toObject().value("id").toDouble())
-        .arg(jsExpression));
-
-    for (int i = 0; i < 10; ++i) {
-        if (!webSocketQueryWebView->title().isEmpty())
-            break;
-        waitForSignal(webSocketQueryWebView.data(), SIGNAL(titleChanged()), 500);
-    }
-
-    QCOMPARE(webSocketQueryWebView->title(), jsExpressionResult);
-}
-
-void tst_InspectorServer::openRemoteDebuggingSession()
-{
-    QJsonArray pageList = fetchPageList();
-    QCOMPARE(pageList.size(), 1);
-
-    QScopedPointer<QQuickWebView> inspectorWebView(newWebView());
-    LoadStartedCatcher catcher2(inspectorWebView.data());
-    inspectorWebView->setUrl(s_inspectorServerHttpBaseUrl.resolved(QUrl(pageList.at(0).toObject().value("inspectorUrl").toString())));
-    waitForSignal(&catcher2, SIGNAL(finished()));
-    for (int i = 0; i < 10; ++i) {
-        if (!inspectorWebView->title().isEmpty())
-            break;
-        waitForSignal(inspectorWebView.data(), SIGNAL(titleChanged()), 500);
-    }
-
-    // To test the whole pipeline this exploits a behavior of the inspector front-end which won't provide any title unless the
-    // debugging session was established correctly through web socket. It should be something like "Web Inspector - <Page URL>".
-    // So this test case will fail if:
-    // - The page list didn't return a valid inspector URL
-    // - Or the front-end couldn't be loaded through the inspector HTTP server
-    // - Or the web socket connection couldn't be established between the front-end and the page through the inspector server
-    // Let's see if this test isn't raising too many false positives, in which case we should use a better predicate if available.
-    QVERIFY(!inspectorWebView->title().isEmpty());
-}
-
-QTEST_MAIN(tst_InspectorServer)
-
-#include "tst_inspectorserver.moc"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/publicapi/publicapi.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/publicapi/publicapi.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/publicapi/publicapi.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/publicapi/publicapi.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,3 +0,0 @@
-include(../tests.pri)
-SOURCES += $${TARGET}.cpp
-QT += webkit-private
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/publicapi/tst_publicapi.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/publicapi/tst_publicapi.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/publicapi/tst_publicapi.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/publicapi/tst_publicapi.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,188 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#include "config.h"
-
-#include <QMetaEnum>
-#include <QMetaMethod>
-#include <QMetaObject>
-#include <QMetaProperty>
-#include <QMetaType>
-#include <QtTest/QtTest>
-#include <private/qquickwebview_p.h>
-#include <private/qwebloadrequest_p.h>
-#include <private/qwebnavigationrequest_p.h>
-
-class tst_publicapi : public QObject {
-    Q_OBJECT
-private Q_SLOTS:
-    void publicAPI();
-};
-
-static QList<const QMetaObject*> typesToCheck = QList<const QMetaObject*>()
-    << &QQuickWebView::staticMetaObject
-    << &QWebLoadRequest::staticMetaObject
-    << &QWebNavigationRequest::staticMetaObject;
-
-static QStringList expectedAPI = QStringList()
-    << "QQuickWebView.AcceptRequest --> NavigationRequestAction"
-    << "QQuickWebView.IgnoreRequest --> NavigationRequestAction"
-    << "QQuickWebView.LoadStartedStatus --> LoadStatus"
-    << "QQuickWebView.LoadStoppedStatus --> LoadStatus"
-    << "QQuickWebView.LoadSucceededStatus --> LoadStatus"
-    << "QQuickWebView.LoadFailedStatus --> LoadStatus"
-    << "QQuickWebView.NoErrorDomain --> ErrorDomain"
-    << "QQuickWebView.InternalErrorDomain --> ErrorDomain"
-    << "QQuickWebView.NetworkErrorDomain --> ErrorDomain"
-    << "QQuickWebView.HttpErrorDomain --> ErrorDomain"
-    << "QQuickWebView.DownloadErrorDomain --> ErrorDomain"
-    << "QQuickWebView.LinkClickedNavigation --> NavigationType"
-    << "QQuickWebView.FormSubmittedNavigation --> NavigationType"
-    << "QQuickWebView.BackForwardNavigation --> NavigationType"
-    << "QQuickWebView.ReloadNavigation --> NavigationType"
-    << "QQuickWebView.FormResubmittedNavigation --> NavigationType"
-    << "QQuickWebView.OtherNavigation --> NavigationType"
-    << "QQuickWebView.title --> QString"
-    << "QQuickWebView.url --> QUrl"
-    << "QQuickWebView.icon --> QUrl"
-    << "QQuickWebView.canGoBack --> bool"
-    << "QQuickWebView.canGoForward --> bool"
-    << "QQuickWebView.loading --> bool"
-    << "QQuickWebView.loadProgress --> int"
-    << "QQuickWebView.titleChanged() --> void"
-    << "QQuickWebView.navigationHistoryChanged() --> void"
-    << "QQuickWebView.loadingChanged(QWebLoadRequest*) --> void"
-    << "QQuickWebView.loadProgressChanged() --> void"
-    << "QQuickWebView.urlChanged() --> void"
-    << "QQuickWebView.iconChanged() --> void"
-    << "QQuickWebView.linkHovered(QUrl,QString) --> void"
-    << "QQuickWebView.navigationRequested(QWebNavigationRequest*) --> void"
-    << "QQuickWebView.loadHtml(QString,QUrl,QUrl) --> void"
-    << "QQuickWebView.loadHtml(QString,QUrl) --> void"
-    << "QQuickWebView.loadHtml(QString) --> void"
-    << "QQuickWebView.goBack() --> void"
-    << "QQuickWebView.goForward() --> void"
-    << "QQuickWebView.stop() --> void"
-    << "QQuickWebView.reload() --> void"
-    << "QWebLoadRequest.url --> QUrl"
-    << "QWebLoadRequest.status --> QQuickWebView::LoadStatus"
-    << "QWebLoadRequest.errorString --> QString"
-    << "QWebLoadRequest.errorDomain --> QQuickWebView::ErrorDomain"
-    << "QWebLoadRequest.errorCode --> int"
-    << "QWebNavigationRequest.url --> QUrl"
-    << "QWebNavigationRequest.mouseButton --> int"
-    << "QWebNavigationRequest.keyboardModifiers --> int"
-    << "QWebNavigationRequest.action --> QQuickWebView::NavigationRequestAction"
-    << "QWebNavigationRequest.navigationType --> QQuickWebView::NavigationType"
-    << "QWebNavigationRequest.isMainFrame --> bool"
-    << "QWebNavigationRequest.actionChanged() --> void"
-    ;
-
-static bool isCheckedEnum(const QByteArray& typeName)
-{
-    QList<QByteArray> tokens = typeName.split(':');
-    if (tokens.size() == 3) {
-        QByteArray& enumClass = tokens[0];
-        QByteArray& enumName = tokens[2];
-        foreach (const QMetaObject* mo, typesToCheck) {
-            if (mo->className() != enumClass)
-                continue;
-            for (int i = mo->enumeratorOffset(); i < mo->enumeratorCount(); ++i)
-                if (mo->enumerator(i).name() == enumName)
-                    return true;
-        }
-    }
-    return false;
-}
-
-static bool isCheckedClass(const QByteArray& typeName)
-{
-    foreach (const QMetaObject* mo, typesToCheck) {
-        QByteArray moTypeName(mo->className());
-        if (moTypeName == typeName || moTypeName + "*" == typeName)
-            return true;
-    }
-    return false;
-}
-
-static void checkKnownType(const QByteArray& typeName)
-{
-    if ((typeName != "void" && !QMetaType::type(typeName)) || QMetaType::type(typeName) >= QMetaType::User) {
-        bool knownEnum = isCheckedEnum(typeName);
-        bool knownClass = isCheckedClass(typeName);
-        QVERIFY2(knownEnum || knownClass, qPrintable(QString("The API uses an unknown type [%1], you might have to add it to the typesToCheck list.").arg(typeName.constData())));
-    }
-}
-
-static void gatherAPI(const QString& prefix, const QMetaEnum& metaEnum, QStringList* output)
-{
-    for (int i = 0; i < metaEnum.keyCount(); ++i)
-        *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(metaEnum.key(i)).arg(metaEnum.name());
-}
-
-static void gatherAPI(const QString& prefix, const QMetaProperty& property, QStringList* output)
-{
-    *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(property.name()).arg(property.typeName());
-    checkKnownType(property.typeName());
-}
-
-static void gatherAPI(const QString& prefix, const QMetaMethod& method, QStringList* output)
-{
-    if (method.access() != QMetaMethod::Private) {
-        const char* methodTypeName = !!strlen(method.typeName()) ? method.typeName() : "void";
-        *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(QString::fromLatin1(method.methodSignature())).arg(QString::fromLatin1(methodTypeName));
-
-        checkKnownType(methodTypeName);
-        foreach (QByteArray paramType, method.parameterTypes())
-            checkKnownType(paramType);
-    }
-}
-
-static void gatherAPI(const QString& prefix, const QMetaObject* meta, QStringList* output)
-{
-    // *Offset points us only at the leaf class members, we don't have inheritance in our API yet anyway.
-    for (int i = meta->enumeratorOffset(); i < meta->enumeratorCount(); ++i)
-        gatherAPI(prefix, meta->enumerator(i), output);
-    for (int i = meta->propertyOffset(); i < meta->propertyCount(); ++i)
-        gatherAPI(prefix, meta->property(i), output);
-    for (int i = meta->methodOffset(); i < meta->methodCount(); ++i)
-        gatherAPI(prefix, meta->method(i), output);
-}
-
-void tst_publicapi::publicAPI()
-{
-    QStringList actualAPI;
-    foreach (const QMetaObject* meta, typesToCheck)
-        gatherAPI(QString::fromLatin1(meta->className()) + ".", meta, &actualAPI);
-
-    // Uncomment to print the actual API.
-    // foreach(QString actual, actualAPI)
-    //     printf("    << \"%s\"\n", qPrintable(actual));
-
-    // Make sure that nothing slips in the public API unintentionally.
-    foreach (QString actual, actualAPI)
-        QVERIFY2(expectedAPI.contains(actual), qPrintable(actual));
-    // Make sure that the expected list is up-to-date with intentionally added APIs.
-    foreach (QString expected, expectedAPI)
-        QVERIFY2(actualAPI.contains(expected), qPrintable(expected));
-}
-
-QTEST_MAIN(tst_publicapi)
-
-#include "tst_publicapi.moc"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/alert.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/alert.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/alert.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/alert.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,8 +0,0 @@
-<!doctype html>
-<html>
-<head>
-<script>alert("Hello Qt");</script>
-</head>
-<body>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/append-document-title.js qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/append-document-title.js
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/append-document-title.js	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/append-document-title.js	1970-01-01 10:00:00.000000000 +1000
@@ -1 +0,0 @@
-document.title += " with appendix";
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/big-user-script.js qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/big-user-script.js
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/big-user-script.js	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/big-user-script.js	1970-01-01 10:00:00.000000000 +1000
@@ -1,110 +0,0 @@
-// Used to make sure serialization of user scripts between UI process and Web process can handle files bigger
-// than the maximum message size defined in ConnectionXXX classes.
-
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-// ////////////////////////////////////////////////////////////////////////////////////////////////////
-
-document.title = "Big user script changed title";
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/change-document-title.js qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/change-document-title.js
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/change-document-title.js	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/change-document-title.js	1970-01-01 10:00:00.000000000 +1000
@@ -1 +0,0 @@
-document.title = "New title";
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/colorChooser.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/colorChooser.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/colorChooser.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/colorChooser.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,21 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head>
-<title>Title</title>
-<script>
-function detectInputTypeColorEnabled() {
-    var element = document.getElementById('test')
-    element.value = 'should sanitize';
-    if (element.value != 'should sanitize')
-        document.title = 'Feature enabled';
-    else
-        document.title = 'Feature disabled';
-}
-function updateTitle(element) {
-    document.title = element.value;
-}
-</script>
-</head>
-<body onload='detectInputTypeColorEnabled()'>
-<input id='test' type='color' onclick='updateTitle(this)' onchange='updateTitle(this)' style='width:50px; height:50px; position:"absolute"; top:0px; left:0px'>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/confirm.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/confirm.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/confirm.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/confirm.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,19 +0,0 @@
-<!doctype html>
-<html>
-<head>
-<script>
-document.title = "";
-function updateTitle(accepted) {
-    if (accepted)
-        document.title += " ACCEPTED";
-    else
-        document.title += " REJECTED";
-}
-
-updateTitle(confirm("ACCEPT"));
-updateTitle(confirm("REJECT"));
-</script>
-</head>
-<body>
-</body>
-</html>
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/download.zip and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/download.zip differ
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/evaluatejavascript.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/evaluatejavascript.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/evaluatejavascript.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/evaluatejavascript.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,10 +0,0 @@
-<!doctype html>
-<html>
-    <head>
-        <meta charset="UTF-8">
-        <title>Evaluate JavaScript</title>
-    </head>
-    <body>
-        <div id="text">Hello from the WebProcess :-)</div>
-    </body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon2.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon2.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon2.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon2.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,10 +0,0 @@
-<html>
-<head>
-</head>
-<link type="image/png" href="small-favicon.png" sizes="16x16" rel="icon" />
-<body>
-<p>It's expected that you see a favicon displayed for this page when you open it as a local file.</p>
-<p>The favicon looks like this:</p>
-<img src="small-favicon.png"/>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,10 +0,0 @@
-<html>
-<head>
-</head>
-<link type="image/png" href="favicon.png" sizes="48x48" rel="icon" />
-<body>
-<p>It's expected that you see a favicon displayed for this page when you open it as a local file.</p>
-<p>The favicon looks like this:</p>
-<img src="favicon.png"/>
-</body>
-</html>
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/favicon.png differ
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/font-preferences.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/font-preferences.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/font-preferences.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/font-preferences.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,31 +0,0 @@
-<html>
-<head>
-<title>Original Title</title>
-</head>
-<script type="text/javascript">
-function getTestId() {
-    url = document.location.href
-    var i, j = 0;
-    for (i = url.length - 1; i >= 0; --i) {
-        if (url[i] == '?')
-            break
-        else if (url[i] == '#')
-            j = i - 1
-    }
-    return url.substr(i + 1, j - i)
-}
-
-function getStyleForId(id, styleProp) {
-    return document.defaultView.getComputedStyle(document.getElementById(id), null).getPropertyValue(styleProp);
-}
-
-function changeTitle() {
-    document.title = getStyleForId(getTestId(), window.location.hash.substr(1))
-}
-</script>
-<body onload='setTimeout("changeTitle()", 100)'>
-<p id="standard">hello</p>
-<code id="fixed">hello</code>
-<p id="minimum" style="font-size: smaller">hello</p>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/geolocation.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/geolocation.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/geolocation.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/geolocation.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,29 +0,0 @@
-<head>
-<title>Geolocation Permission API Test</title>
-<meta content="width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;" name="viewport"/>
-<script>
-var watchId = 0;
-
-function successHandler(location) {
-    var message = document.getElementById("message"), html = [];
-    html.push("<img width='256' height='256' src='http://maps.google.com/maps/api/staticmap?center=", location.coords.latitude, ",", location.coords.longitude, "&markers=size:small|color:blue|", location.coords.latitude, ",", location.coords.longitude, "&zoom=14&size=256x256&sensor=false' />");
-    html.push("<p>Longitude: ", location.coords.longitude, "</p>");
-    html.push("<p>Latitude: ", location.coords.latitude, "</p>");
-    html.push("<p>Accuracy: ", location.coords.accuracy, " meters</p>");
-    message.innerHTML = html.join("");
-}
-
-function errorHandler(error) {
-    alert('Attempt to get location failed: ' + error.message);
-}
-
-<!-- One shot example -->
-navigator.geolocation.getCurrentPosition(successHandler, errorHandler);
-
-</script>
-</head>
-<body>
-<div id="message">Location unknown</div>
-</body>
-</html>
-
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/javascript.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/javascript.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/javascript.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/javascript.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,8 +0,0 @@
-<html>
-<head><title>Original Title</title></head>
-<body>
-<script type="text/javascript">
-document.title = "New Title";
-</script>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/link.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/link.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/link.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/link.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<!doctype html>
-<html>
-<body onload="document.links['foo'].focus();">
-<a name="foo" href="test1.html">Link</a>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/localStorage.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/localStorage.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/localStorage.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/localStorage.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,9 +0,0 @@
-<html>
-<head><title>Original Title</title></head>
-<body>
-<script type="text/javascript">
-document.title = localStorage.getItem('title');
-localStorage.setItem('title', 'New Title');
-</script>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/messaging.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/messaging.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/messaging.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/messaging.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,15 +0,0 @@
-<!doctype html>
-<html>
-<head>
-<script>
-    function initialize() {
-        navigator.qt.onmessage = function(ev) {
-            var reversed = ev.data.split("").reverse().join("");
-            navigator.qt.postMessage(reversed);
-        }
-    }
-</script>
-</head>
-<body onload="initialize();">
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/multifileupload.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/multifileupload.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/multifileupload.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/multifileupload.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,11 +0,0 @@
-<html>
-<head>
-<meta name="viewport" initial-scale=1">
-<title> Mutli-file Upload </title>
-<script src = "./titleupdate.js">
-</script>
-
-<body>
-<input type="file" name="file" id="upfile" onchange="updateTitle()" multiple/>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/notification.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/notification.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/notification.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/notification.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,19 +0,0 @@
-<html>
-<head>
-  <title>Desktop Notification Permission test</title>
-  <script>
-    requestPermission = function(cb) {
-      window.Notification.requestPermission(function() {
-        if (cb)
-           cb(window.Notification.permission);
-      });
-    }
-    requestPermission()
-  </script>
-</head>
-
-<body>
-  Desktop Notification test
-</body>
-
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/prompt.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/prompt.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/prompt.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/prompt.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,13 +0,0 @@
-<!doctype html>
-<html>
-<head>
-<script>
-document.title = prompt("Please, reverse the default value", "Hello Qt");
-if (prompt("REJECT") !== null) {
-    document.title = "FAIL";
-}
-</script>
-</head>
-<body>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/qrctest.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/qrctest.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/qrctest.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/qrctest.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<html>
-<head><title>Loaded from qrc.</title></head>
-<body>
-Hello. I was loaded from a qrc file. Amazing.
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/redirect.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/redirect.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/redirect.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/redirect.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,8 +0,0 @@
-<!doctype html>
-<html>
-<head>
-<meta http-equiv="refresh" content="2; url=test1.html"
-</head>
-<body>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/select.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/select.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/select.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/select.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,18 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head>
-<title>No new selection was made</title>
-<script>
-function updateTitle(selectElement) {
-    var index = selectElement.selectedIndex;
-    document.title = selectElement.options[index].value;
-}
-</script>
-</head>
-<body>
-<select onchange="updateTitle(this)">
-<option value="__open__" >Open</option>
-<option value="__closed__" >Closed</option>
-<option value="__all__" >All</option>
-</select>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/selectwithsize.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/selectwithsize.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/selectwithsize.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/selectwithsize.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,18 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head>
-<title>No new selection was made</title>
-<script>
-function updateTitle(selectElement) {
-    var index = selectElement.selectedIndex;
-    document.title = selectElement.options[index].value;
-}
-</script>
-</head>
-<body>
-<select size=2 onchange="updateTitle(this)">
-<option value="__open__" >Open</option>
-<option value="__closed__" >Closed</option>
-<option value="__all__" >All</option>
-</select>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/singlefileupload.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/singlefileupload.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/singlefileupload.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/singlefileupload.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,11 +0,0 @@
-<html>
-<head>
-<meta name="viewport" initial-scale=1">
-<title> Single File Upload </title>
-<script src = "./titleupdate.js">
-</script>
-
-<body>
-<input type="file" name="file" id="upfile" onchange="updateTitle()"/>
-</body>
-</html>
Binary files qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/small-favicon.png and qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/small-favicon.png differ
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test1.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test1.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test1.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test1.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<html>
-<head><title>Test page 1</title></head>
-<body>
-Hello.
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test2.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test2.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test2.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test2.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<html>
-<head><title>Test page with huge link area</title></head>
-<body>
-<a title="A title" href="test1.html"><img width=200 height=200></a>
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test3.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test3.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test3.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test3.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,18 +0,0 @@
-<html>
-<head>
-<title>Test page 3</title>
-</head>
-<script type="text/javascript">
-function kickOffTitleChange()
-{
-    var t = setTimeout("changeTitle('New Title')",3000);
-}
-function changeTitle(title)
-{
-    document.title = title;
-}
-</script>
-<body onload="kickOffTitleChange()">
-Hello.
-</body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test4.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test4.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test4.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test4.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,118 +0,0 @@
-<html>
-    <head>
-        <title>Long Page To Scroll</title>
-        <style>
-            #content {
-                 margin: auto;
-                 width:  100%;
-                 background: #eeeeee;
-                 font-size: 50px;
-            }
-        </style>
-        <meta name="viewport" content="initial-scale=2.0"/>
-    </head>
-    <body>
-        <div id="content">
-            bla00<br/>
-            bla01<br/>
-            bla02<br/>
-            bla03<br/>
-            bla04<br/>
-            bla05<br/>
-            bla06<br/>
-            bla07<br/>
-            bla08<br/>
-            bla09<br/>
-            bla10<br/>
-            bla11<br/>
-            bla12<br/>
-            bla13<br/>
-            bla14<br/>
-            bla15<br/>
-            bla16<br/>
-            bla17<br/>
-            bla18<br/>
-            bla19<br/>
-            bla20<br/>
-            bla21<br/>
-            bla22<br/>
-            bla23<br/>
-            bla24<br/>
-            bla25<br/>
-            bla26<br/>
-            bla27<br/>
-            bla28<br/>
-            bla29<br/>
-            bla30<br/>
-            bla31<br/>
-            bla32<br/>
-            bla33<br/>
-            bla34<br/>
-            bla35<br/>
-            bla36<br/>
-            bla37<br/>
-            bla38<br/>
-            bla39<br/>
-            bla40<br/>
-            bla41<br/>
-            bla42<br/>
-            bla43<br/>
-            bla44<br/>
-            bla45<br/>
-            bla46<br/>
-            bla47<br/>
-            bla48<br/>
-            bla49<br/>
-            bla50<br/>
-            bla51<br/>
-            bla52<br/>
-            bla53<br/>
-            bla54<br/>
-            bla55<br/>
-            bla56<br/>
-            bla57<br/>
-            bla58<br/>
-            bla59<br/>
-            bla60<br/>
-            bla61<br/>
-            bla62<br/>
-            bla63<br/>
-            bla64<br/>
-            bla65<br/>
-            bla66<br/>
-            bla67<br/>
-            bla68<br/>
-            bla69<br/>
-            bla70<br/>
-            bla71<br/>
-            bla72<br/>
-            bla73<br/>
-            bla74<br/>
-            bla75<br/>
-            bla76<br/>
-            bla77<br/>
-            bla78<br/>
-            bla79<br/>
-            bla80<br/>
-            bla81<br/>
-            bla82<br/>
-            bla83<br/>
-            bla84<br/>
-            bla85<br/>
-            bla86<br/>
-            bla87<br/>
-            bla88<br/>
-            bla89<br/>
-            bla90<br/>
-            bla91<br/>
-            bla92<br/>
-            bla93<br/>
-            bla94<br/>
-            bla95<br/>
-            bla96<br/>
-            bla97<br/>
-            bla98<br/>
-            bla99<br/>
-        </div>
-    </body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test5.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test5.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test5.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/test5.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,10 +0,0 @@
-<html>
-  <head>
-    <title>Local page with viewport meta tag: width=device-width</title>
-    <meta name="viewport" content="width=device-width"/>
-  </head>
-  <body>
-    <style type="text/css">body {width: 960px; height: 1440px; margin: 0; padding: 0;}</style>
-    <div>blah</div>
-  </body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/TestWebView.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/TestWebView.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/TestWebView.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/TestWebView.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,51 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-
-WebView {
-    property var loadStatus: null
-    property var viewportReady: false
-
-    function waitForLoadSucceeded() {
-        var success = _waitFor(function() { return loadStatus == WebView.LoadSucceededStatus })
-        loadStatus = null
-        return success
-    }
-    function waitForViewportReady() {
-        // Note: You need to have "when: windowShown" in your TestCase for this to work.
-        // The viewport is locked until the first frame is rendered, and the rendering isn't
-        // activated until the WebView is visible in a mapped QQuickView.
-        return _waitFor(function() { return viewportReady })
-    }
-    function waitForLoadFailed() {
-        var failure = _waitFor(function() { return loadStatus == WebView.LoadFailedStatus })
-        loadStatus = null
-        return failure
-    }
-    function waitForLoadStopped() {
-        var stop = _waitFor(function() { return loadStatus == WebView.LoadStoppedStatus })
-        loadStatus = null
-        return stop
-    }
-    function _waitFor(predicate) {
-        var timeout = 5000
-        var i = 0
-        while (i < timeout && !predicate()) {
-            testResult.wait(50)
-            i += 50
-        }
-        return predicate()
-    }
-
-    TestResult { id: testResult }
-
-    experimental.onLoadVisuallyCommitted: viewportReady = true
-    onLoadingChanged: {
-        loadStatus = loadRequest.status
-        if (loadRequest.status == WebView.LoadStartedStatus)
-            viewportReady = false
-    }
-
-}
-
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/titleupdate.js qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/titleupdate.js
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/titleupdate.js	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/titleupdate.js	1970-01-01 10:00:00.000000000 +1000
@@ -1,15 +0,0 @@
-function updateTitle()
-{
-    var inp = document.getElementById("upfile");
-    var allfiles = new String("");
-    var name = new String("");
-    for (var i = 0; i < inp.files.length; ++i)
-    {
-        name = inp.files.item(i).name;
-        if (allfiles.length == 0)
-            allfiles = name;
-        else
-            allfiles = allfiles + "," + name;
-    }
-    document.title = allfiles;
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/webchannel.html qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/webchannel.html
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/webchannel.html	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/common/webchannel.html	1970-01-01 10:00:00.000000000 +1000
@@ -1,21 +0,0 @@
-<!DOCTYPE html>
-<html>
-    <head>
-        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
-        <script type="text/javascript" src="qrc:///qtwebchannel/qwebchannel.js"></script>
-        <script type="text/javascript">
-            //BEGIN SETUP
-            var channel = new QWebChannel(navigator.qtWebChannelTransport, function(channel) {
-                window.testObject = channel.objects.testObject;
-                testObject.runTest.connect(function(foo) {
-                    testObject.foo = foo;
-                    testObject.bar(foo);
-                });
-                testObject.clientInitialized(testObject.foo);
-            });
-            //END SETUP
-        </script>
-    </head>
-    <body>
-    </body>
-</html>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_linkHovered.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_linkHovered.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_linkHovered.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_linkHovered.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,80 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 200
-    height: 400
-    focus: true
-
-    property string lastUrl
-    property string lastTitle
-
-    SignalSpy {
-        id: spy
-        target: webView
-        signalName: "linkHovered"
-    }
-
-    onLinkHovered: {
-        webView.lastUrl = hoveredUrl
-        webView.lastTitle = hoveredTitle
-    }
-
-    TestCase {
-        name: "DesktopWebViewLinkHovered"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            webView.lastUrl = ""
-            webView.lastTitle = ""
-            spy.clear()
-        }
-
-        function test_linkHovered() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/test2.html")
-            verify(webView.waitForLoadSucceeded())
-            mouseMove(webView, 100, 100)
-            spy.wait()
-            compare(spy.count, 1)
-            compare(webView.lastUrl, Qt.resolvedUrl("../common/test1.html"))
-            compare(webView.lastTitle, "A title")
-            mouseMove(webView, 100, 300)
-            spy.wait()
-            compare(spy.count, 2)
-            compare(webView.lastUrl, "")
-            compare(webView.lastTitle, "")
-        }
-
-        function test_linkHoveredDoesntEmitRepeated() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/test2.html")
-            verify(webView.waitForLoadSucceeded())
-
-            for (var i = 0; i < 100; i += 10)
-                mouseMove(webView, 100, 100 + i)
-
-            spy.wait()
-            compare(spy.count, 1)
-            compare(webView.lastUrl, Qt.resolvedUrl("../common/test1.html"))
-
-            for (var i = 0; i < 100; i += 10)
-                mouseMove(webView, 100, 300 + i)
-
-            spy.wait()
-            compare(spy.count, 2)
-            compare(webView.lastUrl, "")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_loadHtml.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_loadHtml.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_loadHtml.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_loadHtml.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,53 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 200
-    height: 400
-    focus: true
-
-    property string lastUrl
-
-    SignalSpy {
-        id: linkHoveredSpy
-        target: webView
-        signalName: "linkHovered"
-    }
-
-    onLinkHovered: {
-        webView.lastUrl = hoveredUrl
-    }
-
-    TestCase {
-        name: "DesktopWebViewLoadHtml"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            webView.lastUrl = ""
-            linkHoveredSpy.clear()
-        }
-
-        function test_baseUrlAfterLoadHtml() {
-            linkHoveredSpy.clear()
-            compare(linkHoveredSpy.count, 0)
-            webView.loadHtml("<html><head><title>Test page with huge link area</title></head><body><a title=\"A title\" href=\"test1.html\"><img width=200 height=200></a></body></html>", "http://www.example.foo.com")
-            verify(webView.waitForLoadSucceeded())
-            compare("http://www.example.foo.com/", webView.url)
-            mouseMove(webView, 100, 100)
-            linkHoveredSpy.wait()
-            compare(linkHoveredSpy.count, 1)
-            compare(webView.lastUrl, "http://www.example.foo.com/test1.html")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_navigationRequested.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_navigationRequested.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_navigationRequested.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior/tst_navigationRequested.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,116 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-Item {
-    property int expectedLength: 0
-    property int totalBytes: 0
-    property bool shouldDownload: false
-    property url beginUrl: Qt.resolvedUrl("../common/test2.html")
-    property url endUrl: Qt.resolvedUrl("../common/test1.html")
-
-    TestWebView {
-        id: webView
-        width: 200
-        height: 200
-
-        signal downloadFinished()
-
-        onNavigationRequested: {
-            if (shouldDownload)
-                request.action = WebViewExperimental.DownloadRequest
-            else if (request.mouseButton == Qt.MiddleButton && request.keyboardModifiers & Qt.ControlModifier) {
-                otherWebView.url = request.url
-                request.action = WebView.IgnoreRequest
-            }
-        }
-
-        experimental.onDownloadRequested: {
-            download.target = downloadItem
-            expectedLength = downloadItem.expectedContentLength
-            downloadItem.destinationPath = downloadItem.suggestedFilename
-            downloadItem.start()
-        }
-
-        Connections {
-            id: download
-            ignoreUnknownSignals: true
-            onSucceeded: {
-                totalBytes = download.target.totalBytesReceived
-                webView.downloadFinished()
-            }
-        }
-    }
-
-    TestWebView {
-        id: otherWebView
-    }
-
-    SignalSpy {
-        id: downloadSpy
-        target: webView.experimental
-        signalName: "downloadRequested"
-    }
-
-    SignalSpy {
-        id: downloadFinishedSpy
-        target: webView
-        signalName: "downloadFinished"
-    }
-
-    TestCase {
-        name: "DesktopWebViewNavigationRequested"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            downloadSpy.clear()
-            downloadFinishedSpy.clear()
-            shouldDownload = false
-        }
-
-        function test_usePolicy() {
-            webView.url = beginUrl
-            verify(webView.waitForLoadSucceeded())
-            mouseClick(webView, 100, 100, Qt.LeftButton)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Test page 1")
-            compare(webView.url, endUrl)
-        }
-
-        function test_ignorePolicy() {
-            webView.url = beginUrl
-            verify(webView.waitForLoadSucceeded())
-            mouseClick(webView, 100, 100, Qt.MiddleButton, Qt.ControlModifier)
-            verify(otherWebView.waitForLoadSucceeded())
-            verify(webView.loadStatus == null)
-            compare(webView.url, beginUrl)
-            compare(otherWebView.title, "Test page 1")
-            compare(otherWebView.url, endUrl)
-        }
-
-        function test_downloadPolicy() {
-            webView.url = beginUrl
-            verify(webView.waitForLoadSucceeded())
-            downloadSpy.clear()
-            downloadFinishedSpy.clear()
-            expectedLength = 0
-            shouldDownload = true
-            mouseClick(webView, 100, 100, Qt.LeftButton)
-            downloadSpy.wait()
-            compare(downloadSpy.count, 1)
-            downloadFinishedSpy.wait()
-            compare(downloadFinishedSpy.count, 1)
-            compare(totalBytes, expectedLength)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/DesktopBehavior.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,18 +0,0 @@
-include(../tests.pri)
-SOURCES += tst_qmltests.cpp
-TARGET = tst_qmltests_DesktopBehavior
-OBJECTS_DIR = .obj_DesktopBehavior
-
-QT += webkit-private
-CONFIG += testcase
-
-QT += qmltest
-
-DEFINES += DISABLE_FLICKABLE_VIEWPORT=1
-# Test the QML files under DesktopBehavior in the source repository.
-DEFINES += QUICK_TEST_SOURCE_DIR=\"\\\"$$PWD$${QMAKE_DIR_SEP}DesktopBehavior\\\"\"
-DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
-
-OTHER_FILES += \
-    DesktopBehavior/* \
-    common/*
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/qmltests.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/qmltests.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/qmltests.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/qmltests.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,3 +0,0 @@
-TEMPLATE = subdirs
-
-SUBDIRS += DesktopBehavior.pro WebView.pro
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/resources.qrc qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/resources.qrc
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/resources.qrc	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/resources.qrc	1970-01-01 10:00:00.000000000 +1000
@@ -1,6 +0,0 @@
-<RCC>
-    <qresource prefix="/">
-        <file>common/change-document-title.js</file>
-        <file>common/qrctest.html</file>
-    </qresource>
-</RCC>
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/tst_qmltests.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/tst_qmltests.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/tst_qmltests.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/tst_qmltests.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,48 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#include "../bytearraytestdata.h"
-#include "../util.h"
-
-#include "private/qquickwebview_p.h"
-#include <QVarLengthArray>
-#include <QtQuickTest/quicktest.h>
-
-int main(int argc, char** argv)
-{
-    QVarLengthArray<char*, 8> arguments;
-    for (int i = 0; i < argc; ++i)
-        arguments.append(argv[i]);
-
-    arguments.append(const_cast<char*>("-import"));
-    arguments.append(const_cast<char*>(IMPORT_DIR));
-
-    argc = arguments.count();
-    argv = arguments.data();
-
-    suppressDebugOutput();
-    addQtWebProcessToPath();
-
-    qmlRegisterType<ByteArrayTestData>("Test", 1, 0, "ByteArrayTestData");
-
-#ifdef DISABLE_FLICKABLE_VIEWPORT
-    QQuickWebViewExperimental::setFlickableViewportEnabled(false);
-#endif
-    return quick_test_main(argc, argv, "qmltests", QUICK_TEST_SOURCE_DIR);
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_applicationScheme.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_applicationScheme.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_applicationScheme.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_applicationScheme.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,129 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import Test 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    experimental {
-        urlSchemeDelegates: [
-            UrlSchemeDelegate {
-                scheme: "applicationScheme"
-                onReceivedRequest: {
-                    reply.data = "<html><head><title>Test Application Scheme</title></head><body>A test page.</body></html>"
-                    reply.send()
-                }
-            },
-            UrlSchemeDelegate {
-                scheme: "scheme1"
-                onReceivedRequest: {
-                    reply.data = "<html><head><title>Scheme1 Reply</title></head><body>A test page.</body></html>"
-                    reply.send()
-                }
-            },
-            UrlSchemeDelegate {
-                scheme: "scheme2"
-                onReceivedRequest: {
-                    reply.data = "<html><head><title>Scheme2 Reply</title></head><body>A test page.</body></html>"
-                    reply.send()
-                }
-            },
-            UrlSchemeDelegate {
-                scheme: "scheme3"
-                onReceivedRequest: {
-                    if (request.url == "scheme3://url1")
-                        reply.data = "<html><head><title>Scheme3 Reply1</title></head><body>A test page.</body></html>"
-                    else if (request.url == "scheme3://url2")
-                        reply.data = "<html><head><title>Scheme3 Reply2</title></head><body>A test page.</body></html>"
-                    else
-                        reply.data = "<html><head><title>Should not happen</title></head><body>A test page.</body></html>"
-                    reply.send()
-                }
-            },
-            UrlSchemeDelegate {
-                scheme: "schemeCharset"
-                onReceivedRequest: {
-                    if (request.url == "schemecharset://latin1") {
-                        reply.data = byteArrayHelper.latin1Data
-                        reply.contentType = "text/html; charset=iso-8859-1"
-                    } else if (request.url == "schemecharset://utf-8") {
-                        reply.data = byteArrayHelper.utf8Data
-                        reply.contentType = "text/html; charset=utf-8"
-                    }
-                    reply.send()
-                }
-            }
-
-        ]
-    }
-
-    ByteArrayTestData {
-        id: byteArrayHelper
-    }
-
-    TestCase {
-        name: "WebViewApplicationSchemes"
-
-        function test_applicationScheme() {
-            skip("QTFIXME: application schemes are not supported yet")
-            var testUrl = "applicationScheme://something"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Test Application Scheme")
-        }
-
-        function test_multipleSchemes() {
-            skip("QTFIXME: application schemes are not supported yet")
-            // Test if we receive the right reply when defining multiple schemes.
-            var testUrl = "scheme2://some-url-string"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Scheme2 Reply")
-
-            testUrl = "scheme1://some-url-string"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Scheme1 Reply")
-        }
-
-        function test_multipleUrlsForScheme() {
-            skip("QTFIXME: application schemes are not supported yet")
-            var testUrl = "scheme3://url1"
-            webView.url = testUrl            
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Scheme3 Reply1")
-
-            testUrl = "scheme3://url2"
-            webView.url = testUrl            
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Scheme3 Reply2")
-
-        }
-
-        function test_charsets() {            
-            skip("QTFIXME: application schemes are not supported yet")
-            var testUrl = "schemeCharset://latin1"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "title with copyright ©")
-
-            testUrl = "schemeCharset://utf-8"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "title with copyright ©")
-        }
-
-        function test_qrcScheme() {
-            var testUrl = "qrc:///common/qrctest.html"
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Loaded from qrc.")
-
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_colorChooser.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_colorChooser.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_colorChooser.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_colorChooser.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,103 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    width: 400
-    height: 400
-
-    property bool featureEnabled
-
-    property string selectedColor
-    property bool shouldReject
-    property bool shouldAcceptCurrent
-
-    experimental.colorChooser: Item {
-        Component.onCompleted: {
-            if (WebView.view.shouldReject)
-                model.reject()
-            else if (WebView.view.shouldAcceptCurrent)
-                model.accept(model.currentColor)
-            else
-                model.accept(WebView.view.selectedColor)
-        }
-    }
-
-    function openColorChooser() {
-        webView.experimental.test.touchTap(webView, 25, 25)
-    }
-
-    SignalSpy {
-        id: titleSpy
-        target: webView
-        signalName: "titleChanged"
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewColorChooser"
-        when: windowShown
-
-        function init() {
-            webView.url = Qt.resolvedUrl("../common/colorChooser.html")
-            verify(webView.waitForLoadSucceeded())
-
-            while (webView.title != "Feature enabled" && webView.title != "Feature disabled")
-                wait(0)
-
-            webView.featureEnabled = (webView.title == "Feature enabled")
-            if (!webView.featureEnabled)
-                return
-
-            titleSpy.clear()
-
-            webView.shouldReject = false
-            webView.shouldAcceptCurrent = false
-        }
-
-        function cleanup() {
-            titleSpy.clear()
-        }
-
-        function test_accept() {
-            if (!webView.featureEnabled)
-                return
-
-            // The title changes here twice: first
-            // when we click, it changes from "Feature enabled"
-            // to the sanitized color and next, when we
-            // pick a new color with the chooser.
-            webView.selectedColor = "#020020"
-            openColorChooser()
-            while (titleSpy.count != 2)
-                wait(0)
-            compare(webView.title, "#020020")
-        }
-
-        function test_currentValue() {
-            if (!webView.featureEnabled)
-                return
-
-            webView.shouldAcceptCurrent = true
-            openColorChooser()
-            titleSpy.wait()
-            compare(titleSpy.count, 1)
-            compare(webView.title, "#000000")
-        }
-
-        function test_reject() {
-            if (!webView.featureEnabled)
-                return
-
-            webView.shouldReject = true;
-            openColorChooser()
-            titleSpy.wait()
-            compare(titleSpy.count, 1)
-            compare(webView.title, "#000000")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_doubleTapToZoom.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_doubleTapToZoom.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_doubleTapToZoom.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_doubleTapToZoom.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,218 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import Test 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 320
-        height: 240
-
-        property variant result
-
-        property variant content: "data:text/html," +
-            "<head>" +
-            "    <meta name='viewport' content='width=device-width'>" +
-            "</head>" +
-            "<body>" +
-            "    <div id='target' " +
-            "         style='position:absolute; left:20; top:20; width:220; height:80;'>" +
-            "    </div>" +
-            "    <div id='smalltarget' " +
-            "         style='position:absolute; left:20; top:120; width:140; height:80;'>" +
-            "    </div>" +
-            "</body>"
-
-        signal resultReceived
-    }
-
-    SignalSpy {
-        id: resultSpy
-        target: webView
-        signalName: "resultReceived"
-    }
-
-    SignalSpy {
-        id: scaleSpy
-        target: webView.experimental.test
-        signalName: "contentsScaleCommitted"
-    }
-
-    TestCase {
-        name: "DoubleTapToZoom"
-        when: windowShown
-
-        property variant test: webView.experimental.test
-
-        function init() {
-            resultSpy.clear()
-            scaleSpy.clear()
-        }
-
-        function windowSize() {
-            resultSpy.clear();
-            var result;
-
-             webView.experimental.evaluateJavaScript(
-                "window.innerWidth + 'x' + window.innerHeight",
-                function(size) { webView.resultReceived(); result = size });
-            resultSpy.wait();
-            return result;
-        }
-
-        function elementRect(id) {
-            resultSpy.clear();
-            var result;
-
-             webView.experimental.evaluateJavaScript(
-                "JSON.stringify(document.getElementById('" + id + "').getBoundingClientRect());",
-                function(rect) { webView.resultReceived(); result = JSON.parse(rect); });
-            resultSpy.wait();
-            return result;
-        }
-
-        function doubleTapAtPoint(x, y) {
-            scaleSpy.clear()
-            test.touchDoubleTap(webView, x, y)
-            scaleSpy.wait()
-        }
-
-        function test_basic_zoomInAndBack() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(windowSize(), "320x240")
-
-            compare(test.contentsScale, 1.0)
-
-            var rect = elementRect("target");
-            var newScale = webView.width / (rect.width + 2 * 10) // inflated by 10px
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, newScale)
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_double_zoomInAndBack() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(windowSize(), "320x240")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var smalltarget = elementRect("smalltarget");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 160)
-
-            compare(test.contentsScale, smallTargetScale)
-
-            // Zoom out by double clicking first the small target and then the large target.
-            doubleTapAtPoint(100, 120)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_double_zoomInAndBack2() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(windowSize(), "320x240")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var smalltarget = elementRect("smalltarget");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 160)
-
-            compare(test.contentsScale, smallTargetScale)
-
-            // Zoom out by double clicking the small target twice.
-            doubleTapAtPoint(100, 120)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 160)
-
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_double_zoomInOutAndBack() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(windowSize(), "320x240")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var smalltarget = elementRect("smalltarget");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 160)
-
-            compare(test.contentsScale, smallTargetScale)
-
-            // Zoom out by double clicking the large target twice.
-            doubleTapAtPoint(100, 40)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_double_zoomInOutAndBack2() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(windowSize(), "320x240")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var smalltarget = elementRect("smalltarget");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
-
-            // Zoom in directly to the small target, and then out over the large target.
-            doubleTapAtPoint(100, 140)
-
-            compare(test.contentsScale, smallTargetScale)
-
-            doubleTapAtPoint(100, 20)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, 1.0)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_download.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_download.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_download.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_download.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,86 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-
-WebView {
-    id: webView
-    width: 200
-    height: 200
-
-    property int expectedLength: 0
-    property int totalBytes: 0
-
-    signal downloadFinished()
-
-    SignalSpy {
-        id: spy
-        target: experimental
-        signalName: "downloadRequested"
-    }
-
-    SignalSpy {
-        id: downloadFinishedSpy
-        target: webView
-        signalName: "downloadFinished"
-    }
-
-    experimental.onDownloadRequested: {
-        download.target = downloadItem
-        expectedLength = downloadItem.expectedContentLength
-        downloadItem.destinationPath = downloadItem.suggestedFilename
-        downloadItem.start()
-    }
-
-    Connections {
-        id: download
-        ignoreUnknownSignals: true
-        onSucceeded: {
-            totalBytes = download.target.totalBytesReceived
-            webView.downloadFinished()
-        }
-    }
-
-    TestCase {
-        name: "WebViewDownload"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            spy.clear()
-            downloadFinishedSpy.clear()
-            expectedLength = 0
-        }
-
-        function test_downloadRequest() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/download.zip")
-            spy.wait()
-            compare(spy.count, 1)
-        }
-
-        function test_expectedLength() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/download.zip")
-            spy.wait()
-            compare(spy.count, 1)
-            compare(expectedLength, 325)
-        }
-
-        function test_succeeded() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/download.zip")
-            spy.wait()
-            compare(spy.count, 1)
-            downloadFinishedSpy.wait()
-            compare(totalBytes, expectedLength)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_evaluateJavaScript.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_evaluateJavaScript.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_evaluateJavaScript.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_evaluateJavaScript.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,226 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        property variant lastMessage
-        property variant lastResult
-
-        experimental.preferences.navigatorQtObjectEnabled: true
-        experimental.onMessageReceived: {
-            lastMessage = message
-        }
-    }
-
-    SignalSpy {
-        id: messageSpy
-        target: webView.experimental
-        signalName: "messageReceived"
-    }
-
-    SignalSpy {
-        id: resultSpy
-        target: webView
-        signalName: "lastResultChanged"
-    }
-
-    TestCase {
-        name: "JavaScriptEvaluation"
-
-        function init() {
-            messageSpy.clear()
-            webView.lastMessage = null
-
-            resultSpy.clear()
-            webView.lastResult = null
-        }
-
-        function test_basic() {
-            messageSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "navigator.qt.onmessage = function(message) {" +
-                "    var result = message.data.split('');" +
-                "    result = result.reverse().join('');" +
-                "    navigator.qt.postMessage(result);" +
-                "}");
-
-            webView.experimental.postMessage("DLROW OLLEH");
-            messageSpy.wait()
-            compare(webView.lastMessage.data, "HELLO WORLD")
-        }
-
-        function test_propertyObjectWithChild() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() {" +
-                "    var parent = new Object;" +
-                "    var child = new Object;" +
-                "    parent['level'] = '1';" +
-                "    child['level'] = 2;" +
-                "    parent['child'] = child;" +
-                "    return parent;" +
-                "})()",
-
-                function(result) {
-                    webView.lastResult = result
-                });
-
-            resultSpy.wait()
-
-            compare(JSON.stringify(webView.lastResult),
-                '{"level":"1","child":{"level":2}}')
-        }
-
-        function test_undefinedValue() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "undefined")
-            compare(webView.lastResult, undefined)
-        }
-
-        function test_nullValue() {
-            resultSpy.clear()
-
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { return { value: null } })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "object")
-            verify(typeof webView.lastResult.value === "object")
-            compare(webView.lastResult.value, null)
-        }
-
-        function test_booleanValue() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { return true })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "boolean")
-            compare(webView.lastResult, true)
-        }
-
-        function test_stringValue() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { return 'dongs' })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "string")
-            compare(webView.lastResult, "dongs")
-        }
-
-        function test_integerValue() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { return 1337 })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "number")
-            compare(webView.lastResult, 1337)
-        }
-
-        function test_floatValue() {
-            resultSpy.clear()
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() { return 13.37 })()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            verify(typeof webView.lastResult === "number")
-            compare(webView.lastResult, 13.37)
-        }
-
-        function test_queryTitle() {
-            resultSpy.clear()
-            var testUrl = Qt.resolvedUrl("../common/evaluatejavascript.html")
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() {" +
-                "   return document.title" +
-                "})()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            compare(webView.lastResult, "Evaluate JavaScript")
-        }
-
-        function test_queryById() {
-            resultSpy.clear()
-            var testUrl = Qt.resolvedUrl("../common/evaluatejavascript.html")
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-
-            webView.experimental.evaluateJavaScript(
-                "(function() {" +
-                "   return document.getElementById('text').innerHTML" +
-                "})()",
-
-                function(result) {
-                    webView.lastResult = result
-                })
-
-            resultSpy.wait()
-            compare(webView.lastResult, "Hello from the WebProcess :-)")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_favIconLoad.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_favIconLoad.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_favIconLoad.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_favIconLoad.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,59 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    SignalSpy {
-        id: spy
-        target: webView
-        signalName: "iconChanged"
-    }
-
-    Image {
-        id: favicon
-        asynchronous: true
-        source: webView.icon
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewLoadFavIcon"
-        when: windowShown
-
-        function init() {
-            if (webView.icon != '') {
-                // If this is not the first test, then load a blank page without favicon, restoring the initial state.
-                webView.url = 'about:blank'
-                verify(webView.waitForLoadSucceeded())
-                spy.wait()
-            }
-            spy.clear()
-        }
-
-        function test_favIconLoad() {
-            compare(spy.count, 0)
-            var url = Qt.resolvedUrl("../common/favicon.html")
-            webView.url = url
-            verify(webView.waitForLoadSucceeded())
-            spy.wait()
-            compare(spy.count, 1)
-            compare(favicon.width, 48)
-            compare(favicon.height, 48)
-        }
-
-        function test_favIconLoadEncodedUrl() {
-            compare(spy.count, 0)
-            var url = Qt.resolvedUrl("../common/favicon2.html?favicon=load should work with#whitespace!")
-            webView.url = url
-            verify(webView.waitForLoadSucceeded())
-            spy.wait()
-            compare(spy.count, 1)
-            compare(favicon.width, 16)
-            compare(favicon.height, 16)
-
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_findText.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_findText.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_findText.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_findText.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,145 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    property int matchCount: -1
-    property bool findFailed: false
-    function clear() {
-        textFoundSpy.clear()
-        findFailed = false
-        matchCount = -1
-    }
-
-    SignalSpy {
-        id: textFoundSpy
-        target: webView.experimental
-        signalName: "textFound"
-    }
-
-    experimental.onTextFound: {
-        webView.matchCount = matchCount
-        findFailed = matchCount == 0
-    }
-    TestCase {
-        name: "WebViewFindText"
-
-        function test_findText() {
-            var findFlags = WebViewExperimental.FindHighlightAllOccurrences |
-                              WebViewExperimental.FindCaseSensitively
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("Hello", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 1)
-        }
-        function test_findTextCaseInsensitive() {
-            var findFlags = 0
-
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("heLLo", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 1)
-        }
-        function test_findTextManyMatches() {
-            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test4.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("bla", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 100)
-        }
-        function test_findTextBackward() {
-            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test4.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 10)
-            for(var i=0; i < 9; i++) {
-                webView.experimental.findText("bla0", findFlags)
-                textFoundSpy.wait()
-            }
-            compare(textFoundSpy.count, 10)
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 11)
-            compare(findFailed, true)
-
-            webView.clear()
-            findFlags |= WebViewExperimental.FindBackward
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-        }
-        function test_findTextFailNoWrap() {
-            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test4.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 10)
-            for(var i=0; i < 9; i++) {
-                webView.experimental.findText("bla0", findFlags)
-                textFoundSpy.wait()
-            }
-            compare(textFoundSpy.count, 10)
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 11)
-            compare(findFailed, true)
-        }
-        function test_findTextWrap() {
-            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
-            findFlags |= WebViewExperimental.FindWrapsAroundDocument
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test4.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("bla0", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(matchCount, 10)
-            for(var i=0; i < 19; i++) {
-                webView.experimental.findText("bla0", findFlags)
-                textFoundSpy.wait()
-            }
-            compare(textFoundSpy.count, 20)
-        }
-        function test_findTextFailCaseSensitive() {
-            var findFlags = WebViewExperimental.FindCaseSensitively
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("heLLo", findFlags)
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(findFailed, true)
-        }
-        function test_findTextNotFound() {
-            webView.clear()
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.findText("string-that-is-not-threre")
-            textFoundSpy.wait()
-            compare(textFoundSpy.count, 1)
-            compare(findFailed, true)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_fitToView.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_fitToView.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_fitToView.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_fitToView.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,131 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import Test 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 480
-        height: 720
-
-        property variant result
-
-        property variant content: "data:text/html," +
-            "<head>" +
-            "    <meta name='viewport' content='width=device-width'>" +
-            "</head>" +
-            "<body style='margin: 0px'>" +
-            "    <div id='target' style='display:none; width:960px; height:1440px;'></div>" +
-            "</body>"
-
-        signal resultReceived
-    }
-
-    SignalSpy {
-        id: resultSpy
-        target: webView
-        signalName: "resultReceived"
-    }
-
-    SignalSpy {
-        id: scaleSpy
-        target: webView.experimental.test
-        signalName: "contentsScaleCommitted"
-    }
-
-    TestCase {
-        name: "FitToView"
-        when: windowShown
-
-        property variant test: webView.experimental.test
-
-        function init() {
-            resultSpy.clear()
-            scaleSpy.clear()
-        }
-
-        function run(signalSpy, script) {
-            signalSpy.clear();
-            var result;
-             webView.experimental.evaluateJavaScript(
-                script, function(value) { webView.resultReceived(); result = value });
-            signalSpy.wait();
-            return result;
-        }
-
-        function documentSize() {
-            return run(resultSpy, "document.width + 'x' + document.height");
-        }
-
-        function setDisplay(id, value) {
-            // When changing to/from 'none' to 'block', this will result in a
-            // contentsScaleCommitted scale, even if it results in  the same
-            // scale, making it possible to check whether user interaction
-            // blocks fit-to-view or not.
-            run(scaleSpy, "document.getElementById('" + id + "').style.display = '" + value + "';");
-        }
-
-        function test_basic() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(documentSize(), "480x720")
-            compare(test.contentsScale, 1.0)
-
-            setDisplay("target", "block")
-            compare(documentSize(), "960x1440")
-            compare(test.contentsScale, 0.5)
-
-            // Add user interaction.
-            test.touchTap(webView, 10, 10)
-
-            // We are no longer within valid bounds after this change
-            // so we have to change our scale back to 1.0.
-            setDisplay("target", "none")
-            compare(documentSize(), "480x720")
-            compare(test.contentsScale, 1.0)
-
-            // We had user interaction, size should change but not scale.
-            setDisplay("target", "block")
-            compare(documentSize(), "960x1440")
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_localPageDeviceWidth() {
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.url = "../common/test5.html"
-            verify(webView.waitForLoadSucceeded())
-            compare(test.contentsScale, 0.5)
-
-            // Add user interaction.
-            test.touchTap(webView, 10, 10)
-
-            webView.reload()
-            verify(webView.waitForLoadSucceeded())
-            // The page should still fit to view after a reload
-            compare(test.contentsScale, 0.5)
-        }
-
-        function test_localPageInitialScale() {
-            webView.url = "about:blank"
-            verify(webView.waitForLoadSucceeded())
-
-            webView.url = "../common/test4.html"
-            verify(webView.waitForLoadSucceeded())
-
-            compare(test.contentsScale, 2.0)
-
-            // Add user interaction.
-            test.touchTap(webView, 10, 10)
-
-            webView.reload()
-            verify(webView.waitForLoadSucceeded())
-            compare(test.contentsScale, 2.0)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_geopermission.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_geopermission.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_geopermission.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_geopermission.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,54 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-
-WebView {
-    id: webView
-    width: 200
-    height: 200
-
-    property bool expectedPermission: false
-
-    SignalSpy {
-        id: spy
-        target: experimental
-        signalName: "permissionRequested"
-    }
-
-    experimental.onPermissionRequested: {
-        //Must be false by default
-        if (!permission.allow) {
-           permission.allow = true
-        } else
-           console.log("Fail: permission must be set to false")
-
-        if (permission.type == PermissionRequest.Geolocation) {
-            console.log("Permission is geotype")
-        }
-    }
-
-    TestCase {
-        name: "WebViewGeopermission"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            spy.clear()
-        }
-
-        function test_permissionRequest() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/geolocation.html")
-            spy.wait()
-            compare(spy.count, 1)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_itemSelector.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_itemSelector.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_itemSelector.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_itemSelector.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,117 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    width: 400
-    height: 400
-
-    property int initialSelection
-    property int finalSelection
-    property bool useAcceptDirectly
-    property bool selectorLoaded
-
-    experimental.itemSelector: Item {
-        Component.onCompleted: {
-            if (WebView.view.initialSelection != -1)
-                model.items.select(WebView.view.initialSelection)
-
-            if (WebView.view.finalSelection == -1)
-                model.reject()
-            else {
-                if (useAcceptDirectly) {
-                    model.accept(WebView.view.finalSelection)
-                } else {
-                    model.items.select(WebView.view.finalSelection)
-                    model.accept()
-                }
-            }
-
-            WebView.view.selectorLoaded = true
-        }
-    }
-
-    SignalSpy {
-        id: titleSpy
-        target: webView
-        signalName: "titleChanged"
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewItemSelector"
-        when: windowShown
-
-        function init() {
-            webView.initialSelection = -1
-            webView.finalSelection = -1
-            webView.useAcceptDirectly = false
-            webView.selectorLoaded = false
-            webView.url = Qt.resolvedUrl("../common/select.html")
-            verify(webView.waitForLoadSucceeded())
-            titleSpy.clear()
-        }
-
-        function openItemSelector() {
-            webView.experimental.test.touchTap(webView, 15, 15)
-        }
-
-        function test_accept() {
-            webView.finalSelection = 1
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "__closed__")
-        }
-
-        function test_acceptDirectly() {
-            webView.finalSelection = 1
-            webView.useAcceptDirectly = true
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "__closed__")
-        }
-
-        function test_selectFirstThenAccept() {
-            webView.initialSelection = 1
-            webView.finalSelection = 2
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "__all__")
-        }
-
-        function test_selectFirstThenAcceptDirectly() {
-            webView.initialSelection = 1
-            webView.finalSelection = 2
-            webView.useAcceptDirectly = true
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "__all__")
-        }
-
-        function test_reject() {
-            openItemSelector()
-            tryCompare(webView, "selectorLoaded", true)
-            compare(webView.title, "No new selection was made")
-        }
-
-        function test_selectFirstThenReject() {
-            webView.initialSelection = 1
-            webView.finalSelection = -1
-            openItemSelector()
-            tryCompare(webView, "selectorLoaded", true)
-            compare(webView.title, "No new selection was made")
-        }
-
-        function test_selectWithSize() {
-            webView.url = Qt.resolvedUrl("../common/selectwithsize.html")
-            verify(webView.waitForLoadSucceeded())
-            titleSpy.clear()
-
-            test_selectFirstThenAcceptDirectly()
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_javaScriptDialogs.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_javaScriptDialogs.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_javaScriptDialogs.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_javaScriptDialogs.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,103 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    property bool modelMessageEqualsMessage: false
-    property string messageFromAlertDialog: ""
-    property int confirmCount: 0
-    property int promptCount: 0
-
-    experimental {
-        alertDialog: Item {
-            Component.onCompleted: {
-                // Testing both attached property and id defined in the Component context.
-                WebView.view.messageFromAlertDialog = message
-                parent.modelMessageEqualsMessage = Boolean(model.message == message)
-                model.dismiss()
-            }
-        }
-
-        confirmDialog: Item {
-            Component.onCompleted: {
-                WebView.view.confirmCount += 1
-                if (message == "ACCEPT")
-                    model.accept()
-                else
-                    model.reject()
-            }
-        }
-
-        promptDialog: Item {
-            Component.onCompleted: {
-                WebView.view.promptCount += 1
-                if (message == "REJECT")
-                    model.reject()
-                else {
-                    var reversedDefaultValue = defaultValue.split("").reverse().join("")
-                    model.accept(reversedDefaultValue)
-                }
-            }
-        }
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewJavaScriptDialogs"
-
-        function init() {
-            webView.modelMessageEqualsMessage = false
-            webView.messageFromAlertDialog = ""
-            webView.confirmCount = 0
-            webView.promptCount = 0
-        }
-
-        function test_alert() {
-            webView.url = Qt.resolvedUrl("../common/alert.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.messageFromAlertDialog, "Hello Qt")
-            verify(webView.modelMessageEqualsMessage)
-        }
-
-        function test_alertWithoutDialog() {
-            webView.experimental.alertDialog = null
-            webView.url = Qt.resolvedUrl("../common/alert.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.messageFromAlertDialog, "")
-        }
-
-        function test_confirm() {
-            webView.url = Qt.resolvedUrl("../common/confirm.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.confirmCount, 2)
-            compare(webView.title, "ACCEPTED REJECTED")
-        }
-
-        function test_confirmWithoutDialog() {
-            webView.experimental.confirmDialog = null
-            webView.url = Qt.resolvedUrl("../common/confirm.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.confirmCount, 0)
-            compare(webView.title, "ACCEPTED ACCEPTED")
-        }
-
-        function test_prompt() {
-            webView.url = Qt.resolvedUrl("../common/prompt.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.promptCount, 2)
-            compare(webView.title, "tQ olleH")
-        }
-
-        function test_promptWithoutDialog() {
-            webView.experimental.promptDialog = null
-            webView.url = Qt.resolvedUrl("../common/prompt.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.promptCount, 0)
-            compare(webView.title, "FAIL")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadFail.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadFail.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadFail.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadFail.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,30 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    property variant testUrl
-
-    TestCase {
-        id: test
-        name: "WebViewLoadFail"
-        function test_fail() {
-            testUrl = Qt.resolvedUrl("file_that_does_not_exist.html")
-            webView.url = testUrl
-            verify(webView.waitForLoadFailed())
-        }
-    }
-
-    onLoadingChanged: {
-        if (loadRequest.status == WebView.LoadFailedStatus) {
-            test.compare(loadRequest.url, testUrl)
-            test.compare(loadRequest.errorCode, NetworkReply.ContentNotFoundError)
-            test.compare(loadRequest.errorDomain, WebView.NetworkErrorDomain)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadHtml.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadHtml.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadHtml.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadHtml.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,21 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 200
-    height: 400
-
-    TestCase {
-        name: "WebViewLoadHtml"
-
-        function test_loadProgressAfterLoadHtml() {
-            compare(webView.loadProgress, 0)
-            webView.loadHtml("<html><head><title>Test page 1</title></head><body>Hello.</body></html>")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.loadProgress, 100)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgress.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgress.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgress.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgress.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,22 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    TestCase {
-        name: "WebViewLoadProgress"
-
-        function test_loadProgress() {
-            compare(webView.loadProgress, 0)
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            compare(webView.loadProgress, 0)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.loadProgress, 100)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgressSignal.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgressSignal.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgressSignal.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadProgressSignal.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,33 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    SignalSpy {
-        id: spyProgress
-        target: webView
-        signalName: "loadProgressChanged"
-    }
-
-    TestCase {
-        name: "WebViewLoadProgressSignal"
-
-        function test_loadProgressSignal() {
-            compare(spyProgress.count, 0)
-            compare(webView.loadProgress, 0)
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            spyProgress.wait()
-            compare(true, webView.loadProgress > -1 && webView.loadProgress < 101)
-            if (webView.loadProgress > 0 && webView.loadProgress < 100) {
-                verify(webView.waitForLoadSucceeded())
-                spyProgress.wait()
-                compare(webView.loadProgress, 100)
-            }
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadUrl.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadUrl.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadUrl.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_loadUrl.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,141 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    property variant lastUrl
-    property bool watchProgress: false
-    property int numLoadStarted: 0
-    property int numLoadSucceeded: 0
-
-    focus: true
-
-    onLoadProgressChanged: {
-        if (watchProgress && webView.loadProgress != 100) {
-            watchProgress = false
-            url = ''
-        }
-    }
-
-    onLoadingChanged: {
-        if (loadRequest.status == WebView.LoadStartedStatus)
-            ++numLoadStarted
-        if (loadRequest.status == WebView.LoadSucceededStatus)
-            ++numLoadSucceeded
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewLoadUrl"
-        when: windowShown
-
-        function test_loadIgnoreEmptyUrl() {
-            var url = Qt.resolvedUrl("../common/test1.html")
-
-            webView.url = url
-            verify(webView.waitForLoadSucceeded())
-            compare(numLoadStarted, 1)
-            compare(numLoadSucceeded, 1)
-            compare(webView.url, url)
-
-            lastUrl = webView.url
-            webView.url = ''
-            wait(1000)
-            compare(numLoadStarted, 1)
-            compare(numLoadSucceeded, 1)
-            compare(webView.url, lastUrl)
-
-            webView.url = 'about:blank'
-            verify(webView.waitForLoadSucceeded())
-            compare(numLoadStarted, 2)
-            compare(numLoadSucceeded, 2)
-            compare(webView.url, 'about:blank')
-
-            // It shouldn't interrupt any ongoing load when an empty url is used.
-            watchProgress = true
-            webView.url = url
-            webView.waitForLoadSucceeded()
-            compare(numLoadStarted, 3)
-            compare(numLoadSucceeded, 3)
-            verify(!watchProgress)
-            compare(webView.url, url)
-        }
-
-        function test_urlProperty() {
-            var url = Qt.resolvedUrl("../common/test1.html")
-
-            webView.url = url
-            compare(webView.url, url)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, url)
-
-            var bogusSite = "http://www.somesitethatdoesnotexist.abc/"
-            webView.url = bogusSite
-            compare(webView.url, bogusSite)
-            verify(webView.waitForLoadFailed())
-            compare(webView.url, bogusSite)
-
-            webView.url = "about:blank" // Reset from previous test
-            verify(webView.waitForLoadSucceeded())
-
-            var handleLoadFailed = function(loadRequest) {
-                if (loadRequest.status == WebView.LoadFailedStatus) {
-                    compare(webView.url, bogusSite)
-                    compare(loadRequest.url, bogusSite)
-                    webView.loadHtml("load failed", bogusSite, bogusSite)
-                }
-            }
-            webView.loadingChanged.connect(handleLoadFailed)
-            webView.url = bogusSite
-            compare(webView.url, bogusSite)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, bogusSite)
-            webView.loadingChanged.disconnect(handleLoadFailed)
-
-            var dataUrl = "data:text/html,foo"
-            webView.url = dataUrl
-            compare(webView.url, dataUrl)
-
-            var redirectUrl = Qt.resolvedUrl("../common/redirect.html")
-            webView.url = redirectUrl
-            compare(webView.url, redirectUrl)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, redirectUrl)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, url)
-
-            var linkUrl = Qt.resolvedUrl("../common/link.html")
-            webView.url = linkUrl
-            compare(webView.url, linkUrl)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, linkUrl)
-            webView.loadingChanged.connect(function(loadRequest) {
-                compare(webView.url, loadRequest.url)
-                compare(webView.url, url)
-            })
-            webView.forceActiveFocus()
-            keyPress(Qt.Key_Return) // Link is focused
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, url)
-        }
-
-        function test_stopStatus() {
-            var url = Qt.resolvedUrl("../common/test1.html")
-
-            webView.loadingChanged.connect(function(loadRequest) {
-                if (loadRequest.status == WebView.LoadStopStatus) {
-                    compare(webView.url, url)
-                    compare(loadRequest.url, url)
-                }
-            })
-
-            webView.url = url
-            compare(webView.url, url)
-            webView.stop()
-            verify(webView.waitForLoadStopped())
-            compare(webView.url, url)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_messaging.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_messaging.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_messaging.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_messaging.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,89 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        property variant lastMessage
-        experimental.preferences.navigatorQtObjectEnabled: true
-        experimental.onMessageReceived: {
-            lastMessage = message
-        }
-    }
-
-    TestWebView {
-        id: otherWebView
-        property variant lastMessage
-        experimental.preferences.navigatorQtObjectEnabled: true
-        experimental.onMessageReceived: {
-            lastMessage = message
-        }
-    }
-
-    TestWebView {
-        id: disabledWebView
-        property bool receivedMessage
-        experimental.preferences.navigatorQtObjectEnabled: false
-        experimental.onMessageReceived: {
-            receivedMessage = true
-        }
-    }
-
-    SignalSpy {
-        id: messageSpy
-        target: webView.experimental
-        signalName: "messageReceived"
-    }
-
-    SignalSpy {
-        id: otherMessageSpy
-        target: otherWebView.experimental
-        signalName: "messageReceived"
-    }
-
-    TestCase {
-        name: "WebViewMessaging"
-        property url testUrl: Qt.resolvedUrl("../common/messaging.html")
-
-        function init() {
-            messageSpy.clear()
-            webView.lastMessage = null
-            otherMessageSpy.clear()
-            otherWebView.lastMessage = null
-        }
-
-        function test_basic() {
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            webView.experimental.postMessage("HELLO")
-            messageSpy.wait()
-            compare(webView.lastMessage.data, "OLLEH")
-            compare(webView.lastMessage.origin.toString(), testUrl.toString())
-        }
-
-        function test_twoWebViews() {
-            webView.url = testUrl
-            otherWebView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            verify(otherWebView.waitForLoadSucceeded())
-            webView.experimental.postMessage("FIRST")
-            otherWebView.experimental.postMessage("SECOND")
-            messageSpy.wait()
-            otherMessageSpy.wait()
-            compare(webView.lastMessage.data, "TSRIF")
-            compare(otherWebView.lastMessage.data, "DNOCES")
-        }
-
-        function test_disabled() {
-            disabledWebView.url = testUrl
-            verify(!disabledWebView.experimental.preferences.navigatorQtObjectEnabled)
-            verify(disabledWebView.waitForLoadSucceeded())
-            disabledWebView.experimental.postMessage("HI")
-            wait(1000)
-            verify(!disabledWebView.receivedMessage)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_multiFileUpload.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_multiFileUpload.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_multiFileUpload.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_multiFileUpload.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,60 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    width: 400
-    height: 400
-
-    property bool selectFile
-
-    experimental.filePicker: Item {
-        Component.onCompleted: {
-            var selectedFiles = ["filename1", "filename2"]
-            if (selectFile)
-                model.accept(selectedFiles)
-            else
-                model.reject();
-        }
-    }
-
-    SignalSpy {
-        id: titleSpy
-        target: webView
-        signalName: "titleChanged"
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewMultiFilePicker"
-        when: windowShown
-
-        function init() {
-            webView.url = Qt.resolvedUrl("../common/multifileupload.html")
-            verify(webView.waitForLoadSucceeded())
-            titleSpy.clear()
-        }
-
-        function openItemSelector() {
-            webView.experimental.test.touchTap(webView, 15, 15)
-        }
-
-        function test_accept() {
-            webView.selectFile = true;
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "filename1,filename2")
-        }
-
-        function test_reject() {
-            var oldTitle = webView.title
-            webView.selectFile = false;
-            openItemSelector()
-            compare(webView.title, oldTitle)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_navigationHistory.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_navigationHistory.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_navigationHistory.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_navigationHistory.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,95 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    ListView {
-        id: backItemsList
-        anchors.fill: parent
-        model: webView.experimental.navigationHistory.backItems
-        delegate:
-            Text {
-                color:"black"
-                text: "title : " + title
-            }
-    }
-
-    ListView {
-        id: forwardItemsList
-        anchors.fill: parent
-        model: webView.experimental.navigationHistory.forwardItems
-        delegate:
-            Text {
-                color:"black"
-                text: "title : " + title
-            }
-    }
-
-    TestCase {
-        name: "WebViewNavigationHistory"
-
-        function test_navigationHistory() {
-            compare(webView.loadProgress, 0)
-            webView.url = Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.canGoBack, false)
-            compare(webView.canGoForward, false)
-            compare(backItemsList.count, 0)
-            compare(forwardItemsList.count, 0)
-            webView.url = Qt.resolvedUrl("../common/test2.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
-            compare(webView.canGoBack, true)
-            compare(webView.canGoForward, false)
-            compare(backItemsList.count, 1)
-            webView.experimental.goBackTo(0)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/test1.html"))
-            compare(webView.canGoBack, false)
-            compare(webView.canGoForward, true)
-            compare(backItemsList.count, 0)
-            compare(forwardItemsList.count, 1)
-            webView.goForward()
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
-            compare(webView.canGoBack, true)
-            compare(webView.canGoForward, false)
-            compare(backItemsList.count, 1)
-            compare(forwardItemsList.count, 0)
-            webView.url = Qt.resolvedUrl("../common/javascript.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/javascript.html"))
-            compare(webView.canGoBack, true)
-            compare(webView.canGoForward, false)
-            compare(backItemsList.count, 2)
-            compare(forwardItemsList.count, 0)
-            webView.experimental.goBackTo(1)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/test1.html"))
-            compare(webView.canGoBack, false)
-            compare(webView.canGoForward, true)
-            compare(backItemsList.count, 0)
-            compare(forwardItemsList.count, 2)
-            webView.experimental.goForwardTo(1)
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/javascript.html"))
-            compare(webView.canGoBack, true)
-            compare(webView.canGoForward, false)
-            compare(backItemsList.count, 2)
-            compare(forwardItemsList.count, 0)
-            webView.goBack()
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
-            compare(webView.canGoBack, true)
-            compare(webView.canGoForward, true)
-            compare(backItemsList.count, 1)
-            compare(forwardItemsList.count, 1)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_notification.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_notification.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_notification.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_notification.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,55 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-
-WebView {
-    id: webView
-    width: 200
-    height: 200
-
-    property bool expectedPermission: false
-
-    SignalSpy {
-        id: spy
-        target: experimental
-        signalName: "permissionRequested"
-    }
-
-    experimental.onPermissionRequested: {
-        // Must be false by default
-        if (!permission.allow) {
-           permission.allow = true
-        } else {
-           console.log("Fail: permission must be set to false")
-        }
-
-        if (permission.type == PermissionRequest.Notification) {
-            console.log("Permission is Desktop Notification")
-        }
-    }
-
-    TestCase {
-        name: "WebViewDesktopNotificationPermission"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            spy.clear()
-        }
-
-        function test_permissionRequest() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/notification.html")
-            spy.wait()
-            compare(spy.count, 1)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_origin.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_origin.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_origin.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_origin.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,57 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-
-WebView {
-    id: webView
-    width: 200
-    height: 200
-
-    property bool success: true
-    property int port: 0
-    property string scheme: "file"
-
-    SignalSpy {
-        id: spy
-        target: experimental
-        signalName: "permissionRequested"
-    }
-
-    experimental.onPermissionRequested: {
-        if (permission.origin.port != webView.port) {
-            console.log("Expected port value should be zero.")
-            webView.success = false
-        }
-
-        if (permission.origin.scheme != webView.scheme) {
-            console.log("Expected scheme should be \"file\".")
-            webView.success = false
-        }
-    }
-
-    TestCase {
-        name: "WebViewSecurityOrigin"
-
-        // Delayed windowShown to workaround problems with Qt5 in debug mode.
-        when: false
-        Timer {
-            running: parent.windowShown
-            repeat: false
-            interval: 1
-            onTriggered: parent.when = true
-        }
-
-        function init() {
-            spy.clear()
-        }
-
-        function test_permissionRequest() {
-            compare(spy.count, 0)
-            webView.url = Qt.resolvedUrl("../common/geolocation.html")
-            spy.wait()
-            compare(spy.count, 1)
-            compare(webView.success, true)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_preferences.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_preferences.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_preferences.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_preferences.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,337 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 400
-        height: 300
-
-        experimental.preferences.javascriptEnabled: true
-        experimental.preferences.localStorageEnabled: true
-        experimental.preferences.pluginsEnabled: true
-
-        TestWebView {
-            id: webView2
-            width: 400
-            height: 300
-        }
-
-        SignalSpy {
-            id: titleSpy
-            target: webView
-            signalName: "titleChanged"
-        }
-
-        SignalSpy {
-            id: standardFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "standardFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: fixedFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "fixedFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: serifFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "serifFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: sansSerifFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "sansSerifFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: cursiveFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "cursiveFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: fantasyFontFamilySpy
-            target: webView.experimental.preferences
-            signalName: "fantasyFontFamilyChanged"
-        }
-
-        SignalSpy {
-            id: minimumFontSizeSpy
-            target: webView.experimental.preferences
-            signalName: "minimumFontSizeChanged"
-        }
-
-        SignalSpy {
-            id: defaultFontSizeSpy
-            target: webView.experimental.preferences
-            signalName: "defaultFontSizeChanged"
-        }
-
-        SignalSpy {
-            id: defaultFixedFontSizeSpy
-            target: webView.experimental.preferences
-            signalName: "defaultFixedFontSizeChanged"
-        }
-
-        TestCase {
-            name: "WebViewPreferences"
-
-            property bool shouldSetupFonts: true
-            property string defaultStandardFontFamily
-            property string defaultFixedFontFamily
-            property string defaultSerifFontFamily
-            property string defaultSansSerifFontFamily
-            property string defaultCursiveFontFamily
-            property string defaultFantasyFontFamily
-            property int defaultMinimumFontSize
-            property int defaultFontSize
-            property int defaultFixedFontSize
-
-            function init() {
-                if (shouldSetupFonts) {
-                    // Setup initial values (may be different per platform).
-                    shouldSetupFonts = false
-                    defaultStandardFontFamily = webView.experimental.preferences.standardFontFamily
-                    defaultFixedFontFamily = webView.experimental.preferences.fixedFontFamily
-                    defaultSerifFontFamily = webView.experimental.preferences.serifFontFamily
-                    defaultSansSerifFontFamily = webView.experimental.preferences.sansSerifFontFamily
-                    defaultCursiveFontFamily = webView.experimental.preferences.cursiveFontFamily
-                    defaultFantasyFontFamily = webView.experimental.preferences.fantasyFontFamily
-                    defaultMinimumFontSize = webView.experimental.preferences.minimumFontSize
-                    defaultFontSize = webView.experimental.preferences.defaultFontSize
-                    defaultFixedFontSize = webView.experimental.preferences.defaultFixedFontSize
-                }
-                else {
-                    // Restore default values before starting a new test case.
-                    webView.experimental.preferences.standardFontFamily = defaultStandardFontFamily
-                    webView.experimental.preferences.fixedFontFamily = defaultFixedFontFamily
-                    webView.experimental.preferences.serifFontFamily = defaultSerifFontFamily
-                    webView.experimental.preferences.sansSerifFontFamily = defaultSansSerifFontFamily
-                    webView.experimental.preferences.cursiveFontFamily = defaultCursiveFontFamily
-                    webView.experimental.preferences.fantasyFontFamily = defaultFantasyFontFamily
-                    webView.experimental.preferences.minimumFontSize = defaultMinimumFontSize
-                    webView.experimental.preferences.defaultFontSize = defaultFontSize
-                    webView.experimental.preferences.defaultFixedFontSize = defaultFixedFontSize
-
-                    if (webView.url != '' && webView.url != 'about:blank') {
-                        webView.url = 'about:blank'
-                        verify(webView.waitForLoadSucceeded())
-                    }
-
-                    standardFontFamilySpy.clear()
-                    fixedFontFamilySpy.clear()
-                    serifFontFamilySpy.clear()
-                    sansSerifFontFamilySpy.clear()
-                    cursiveFontFamilySpy.clear()
-                    fantasyFontFamilySpy.clear()
-                    minimumFontSizeSpy.clear()
-                    defaultFontSizeSpy.clear()
-                    defaultFixedFontSizeSpy.clear()
-                }
-
-                webView.experimental.preferences.javascriptEnabled = true
-                webView.experimental.preferences.localStorageEnabled = true
-                webView.experimental.preferences.pluginsEnabled = true
-                titleSpy.clear()
-            }
-
-            function test_javascriptEnabled() {
-                webView.experimental.preferences.javascriptEnabled = true
-                var testUrl = Qt.resolvedUrl("../common/javascript.html")
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "New Title")
-            }
-
-            function test_javascriptDisabled() {
-                webView.experimental.preferences.javascriptEnabled = false
-                var testUrl = Qt.resolvedUrl("../common/javascript.html")
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-            }
-
-            function test_localStorageDisabled() {
-                webView.experimental.preferences.localStorageEnabled = false
-                var testUrl = Qt.resolvedUrl("../common/localStorage.html")
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-            }
-
-            function test_localStorageEnabled() {
-                webView.experimental.preferences.localStorageEnabled = true
-                var testUrl = Qt.resolvedUrl("../common/localStorage.html")
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "New Title")
-            }
-
-            function test_preferencesAffectCurrentViewOnly() {
-                webView.experimental.preferences.javascriptEnabled = true
-                webView2.experimental.preferences.javascriptEnabled = true
-                var testUrl = Qt.resolvedUrl("../common/javascript.html")
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                webView2.url = testUrl
-                verify(webView2.waitForLoadSucceeded())
-                compare(webView.title, "New Title")
-                compare(webView2.title, "New Title")
-                webView.experimental.preferences.javascriptEnabled = false
-                webView.url = testUrl
-                verify(webView.waitForLoadSucceeded())
-                webView2.url = testUrl
-                verify(webView2.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                compare(webView2.title, "New Title")
-            }
-
-            function unquote(text) {
-                return text[0] === "'" ? text.slice(1, -1) : text
-            }
-
-            function test_standardFontFamilyChanged() {
-                var url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-family")
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(unquote(webView.title), defaultStandardFontFamily)
-
-                webView.experimental.preferences.standardFontFamily = "foobar"
-                standardFontFamilySpy.wait()
-                compare(standardFontFamilySpy.count, 1)
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, "foobar")
-            }
-
-            function test_fontSizeChanged() {
-                var url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-size")
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")                
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, defaultFontSize.toString() + "px")
-
-                webView.experimental.preferences.defaultFontSize = defaultFontSize + 1
-                defaultFontSizeSpy.wait()
-                compare(defaultFontSizeSpy.count, 1)
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, (defaultFontSize + 1).toString() + "px")
-            }
-
-            function test_fixedFontSizeChanged() {
-                var url = Qt.resolvedUrl("../common/font-preferences.html?fixed#font-size")
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, defaultFixedFontSize.toString() + "px")
-
-                webView.experimental.preferences.defaultFixedFontSize = defaultFixedFontSize + 1
-                defaultFixedFontSizeSpy.wait()
-                compare(defaultFixedFontSizeSpy.count, 1)
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, (defaultFixedFontSize + 1).toString() + "px")
-
-                webView.url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-size")
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, defaultFontSize.toString() + "px")
-            }
-
-            function test_minimumFontSizeChanged() {
-                verify(defaultMinimumFontSize < defaultFontSize)
-                var url = Qt.resolvedUrl("../common/font-preferences.html?minimum#font-size")
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                var smallerFontSize = webView.title
-                smallerFontSize = smallerFontSize.substring(0, smallerFontSize.length - 2)
-                smallerFontSize = parseInt(smallerFontSize)
-                verify(smallerFontSize < defaultFontSize)
-
-                webView.experimental.preferences.minimumFontSize = defaultFontSize
-                minimumFontSizeSpy.wait()
-                compare(minimumFontSizeSpy.count, 1)
-                webView.url = url
-                verify(webView.waitForLoadSucceeded())
-                compare(webView.title, "Original Title")
-                titleSpy.clear()
-
-                titleSpy.wait()
-                compare(webView.title, defaultFontSize.toString() + "px")
-            }
-
-            function test_defaultFontsChanged() {
-                // As there's currently no way to test through JS if a generic font was indeed changed
-                // we keep this test for really basic coverage.
-
-                webView.experimental.preferences.standardFontFamily = "foobar0"
-                standardFontFamilySpy.wait()
-                webView.experimental.preferences.fixedFontFamily = "foobar1"
-                fixedFontFamilySpy.wait()
-                webView.experimental.preferences.serifFontFamily = "foobar2"
-                serifFontFamilySpy.wait()
-                webView.experimental.preferences.sansSerifFontFamily = "foobar3"
-                sansSerifFontFamilySpy.wait()
-                webView.experimental.preferences.cursiveFontFamily = "foobar4"
-                cursiveFontFamilySpy.wait()
-                webView.experimental.preferences.fantasyFontFamily = "foobar5"
-                fantasyFontFamilySpy.wait()
-
-                compare(standardFontFamilySpy.count, 1)
-                compare(fixedFontFamilySpy.count, 1)
-                compare(serifFontFamilySpy.count, 1)
-                compare(sansSerifFontFamilySpy.count, 1)
-                compare(cursiveFontFamilySpy.count, 1)
-                compare(fantasyFontFamilySpy.count, 1)
-
-                compare(webView.experimental.preferences.standardFontFamily, "foobar0")
-                compare(webView.experimental.preferences.fixedFontFamily, "foobar1")
-                compare(webView.experimental.preferences.serifFontFamily, "foobar2")
-                compare(webView.experimental.preferences.sansSerifFontFamily, "foobar3")
-                compare(webView.experimental.preferences.cursiveFontFamily, "foobar4")
-                compare(webView.experimental.preferences.fantasyFontFamily, "foobar5")
-            }
-
-
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_properties.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_properties.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_properties.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_properties.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,27 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    TestCase {
-        name: "WebViewProperties"
-
-        function test_title() {
-            webView.url =  Qt.resolvedUrl("../common/test1.html")
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.title, "Test page 1")
-        }
-
-        function test_url() {
-            var testUrl = Qt.resolvedUrl("../common/test1.html")
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())
-            compare(webView.url, testUrl)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_resize.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_resize.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_resize.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_resize.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,175 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import Test 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 320
-        height: 480
-
-        property variant result
-
-        property variant content: "data:text/html," +
-            "<head>" +
-            "    <meta name='viewport' content='width=device-width'>" +
-            "</head>" +
-            "<body>" +
-            "    <div id='target' style='width: 240px; height: 360px;'>" +
-            "    </div>" +
-            "</body>"
-
-        signal resultReceived
-    }
-
-    SignalSpy {
-        id: resultSpy
-        target: webView
-        signalName: "resultReceived"
-    }
-
-    SignalSpy {
-        id: scaleSpy
-        target: webView.experimental.test
-        signalName: "contentsScaleCommitted"
-    }
-
-    SignalSpy {
-        id: sizeSpy
-        target: webView.experimental.test
-        signalName: "contentsSizeChanged"
-    }
-
-    TestCase {
-        name: "Resize"
-        when: windowShown
-
-        property variant test: webView.experimental.test
-
-        function init() {
-            resultSpy.clear()
-            scaleSpy.clear()
-            sizeSpy.clear()
-        }
-
-        function run(signalSpy, script) {
-            signalSpy.clear();
-            var result;
-            webView.experimental.evaluateJavaScript(
-                script,
-                function(value) { webView.resultReceived(); result = value });
-            signalSpy.wait();
-            return result;
-        }
-
-        function contentsSize() {
-            return test.contentsSize.width + "x" + test.contentsSize.height;
-        }
-
-        function elementRect(id) {
-            return JSON.parse(run(resultSpy, "JSON.stringify(document.getElementById('" + id + "').getBoundingClientRect());"))
-        }
-
-        function doubleTapAtPoint(x, y) {
-            scaleSpy.clear()
-            test.touchDoubleTap(webView, x, y)
-            scaleSpy.wait()
-        }
-
-        function resize(w, h) {
-            sizeSpy.clear()
-            webView.width = w
-            sizeSpy.wait()
-            webView.height = h
-            sizeSpy.wait()
-        }
-
-        function test_basic() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-
-            resize(480, 720)
-            compare(contentsSize(), "480x720")
-            compare(test.contentsScale, 1.0)
-
-            resize(320, 480)
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-
-        }
-
-        function test_resizeAfterNeutralZoom() {
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-
-            // Zoom in and out.
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, targetScale)
-
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, 1.0)
-
-            // Now check resizing still works as expected.
-            resize(480, 720)
-            compare(contentsSize(), "480x720")
-            compare(test.contentsScale, 1.0)
-
-            resize(320, 480)
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-        }
-
-        function test_resizeZoomedIn() {
-            // Note that if we change the behavior of resize on zoomed-in content, for instance
-            // to preserve the visible width (like rotate), this test will need to be updated.
-            webView.url = webView.content
-            verify(webView.waitForViewportReady())
-
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-
-            var target = elementRect("target");
-            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
-
-            // Double tap to zoom in.
-            doubleTapAtPoint(100, 50)
-
-            compare(test.contentsScale, targetScale)
-
-            // Resize just a small bit, not changing scale.
-            resize(288, 432)
-            compare(contentsSize(), "288x432")
-            compare(test.contentsScale, targetScale)
-
-            // And double tap to reset zoom.
-            target = elementRect("target");
-            targetScale = webView.width / (target.width + 2 * 10)
-            doubleTapAtPoint(100, 50)
-            compare(test.contentsScale, targetScale)
-
-            // Double tap again to zoom out.
-            doubleTapAtPoint(100, 50)
-            compare(contentsSize(), "288x432")
-            compare(test.contentsScale, 1.0)
-
-            // And reset
-            resize(320, 480)
-            compare(contentsSize(), "320x480")
-            compare(test.contentsScale, 1.0)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_singleFileUpload.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_singleFileUpload.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_singleFileUpload.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_singleFileUpload.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,84 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-TestWebView {
-    id: webView
-
-    width: 400
-    height: 400
-
-    property bool selectFile
-    property bool returnEmpty: false
-    property bool acceptMultiple: false
-
-    experimental.filePicker: Item {
-        Component.onCompleted: {
-            if (returnEmpty)
-                model.accept("");
-            else if (selectFile) {
-                var selectedFiles = ["filename1", "filename2"];
-                if (acceptMultiple)
-                    model.accept(selectedFiles);
-                else
-                    model.accept("acceptedfilename");
-            } else
-                model.reject();
-        }
-    }
-
-    SignalSpy {
-        id: titleSpy
-        target: webView
-        signalName: "titleChanged"
-    }
-
-    TestCase {
-        id: test
-        name: "WebViewSingleFilePicker"
-        when: windowShown
-
-        function init() {
-            webView.url = Qt.resolvedUrl("../common/singlefileupload.html")
-            verify(webView.waitForLoadSucceeded())
-            titleSpy.clear()
-        }
-
-        function openItemSelector() {
-            webView.experimental.test.touchTap(webView, 15, 15)
-        }
-
-        function test_accept() {
-            webView.selectFile = true;
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "acceptedfilename")
-        }
-
-        function test_multiple() {
-            webView.selectFile = true;
-            webView.returnEmpty = false;
-            webView.acceptMultiple = true;
-            openItemSelector()
-            titleSpy.wait()
-            compare(webView.title, "filename1")
-        }
-
-        function test_rejectIfEmptyAccept() {
-            var oldTitle = webView.title
-            webView.selectFile = false;
-            webView.returnEmpty = true;
-            openItemSelector()
-            compare(webView.title, oldTitle)
-        }
-
-        function test_reject() {
-            var oldTitle = webView.title
-            webView.selectFile = false;
-            openItemSelector()
-            compare(webView.title, oldTitle)
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_titleChanged.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_titleChanged.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_titleChanged.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_titleChanged.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,32 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import "../common"
-
-TestWebView {
-    id: webView
-    width: 400
-    height: 300
-
-    SignalSpy {
-        id: spyTitle
-        target: webView
-        signalName: "titleChanged"
-    }
-
-    TestCase {
-        name: "WebViewTitleChangedSignal"
-
-        function test_titleFirstLoad() {
-            compare(spyTitle.count, 0)
-            var testUrl = Qt.resolvedUrl("../common/test3.html")
-            webView.url = testUrl
-            verify(webView.waitForLoadSucceeded())            
-            compare(webView.title, "Test page 3")
-            spyTitle.clear()
-
-            spyTitle.wait()
-            compare(webView.title, "New Title")
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_userScripts.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_userScripts.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_userScripts.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_userScripts.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,113 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 400
-        height: 300
-    }
-
-    TestWebView {
-        id: webViewWithConditionalUserScripts
-        width: 400
-        height: 300
-
-        onNavigationRequested: {
-            var urlString = request.url.toString();
-            if (urlString.indexOf("test1.html") !== -1)
-                experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js")];
-            else if (urlString.indexOf("test2.html") !== -1)
-                experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js")];
-            else
-                experimental.userScripts = [];
-        }
-    }
-
-    TestCase {
-        name: "WebViewUserScripts"
-
-        function init() {
-            webView.url = "";
-            webView.experimental.userScripts = [];
-        }
-
-        function test_oneScript() {
-            webView.url = Qt.resolvedUrl("../common/test1.html");
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "Test page 1");
-
-            webView.experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js")];
-            compare(webView.title, "Test page 1");
-
-            webView.reload();
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "New title");
-
-            webView.url = Qt.resolvedUrl("../common/test2.html");
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "New title");
-
-            webView.experimental.userScripts = [];
-            compare(webView.title, "New title");
-
-            webView.reload();
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "Test page with huge link area");
-        }
-
-        function test_twoScripts() {
-            webView.url = Qt.resolvedUrl("../common/test1.html");
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "Test page 1");
-
-            webView.experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js"), Qt.resolvedUrl("../common/append-document-title.js")];
-            webView.reload();
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "New title with appendix");
-
-            // Make sure we can remove scripts from the preload list.
-            webView.experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js")];
-            webView.reload();
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "Test page 1 with appendix");
-
-            // Make sure the scripts are loaded in order.
-            webView.experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js"), Qt.resolvedUrl("../common/change-document-title.js")];
-            webView.reload();
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "New title");
-        }
-
-        function test_setUserScriptsConditionally() {
-            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test1.html");
-            webViewWithConditionalUserScripts.waitForLoadSucceeded();
-            compare(webViewWithConditionalUserScripts.title, "New title");
-
-            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test2.html");
-            webViewWithConditionalUserScripts.waitForLoadSucceeded();
-            compare(webViewWithConditionalUserScripts.title, "Test page with huge link area with appendix");
-
-            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test3.html");
-            webViewWithConditionalUserScripts.waitForLoadSucceeded();
-            compare(webViewWithConditionalUserScripts.title, "Test page 3");
-        }
-
-        function test_bigScript() {
-            webView.experimental.userScripts = [Qt.resolvedUrl("../common/big-user-script.js")];
-            webView.url = Qt.resolvedUrl("../common/test1.html");
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "Big user script changed title");
-        }
-
-        function test_fromResourceFile() {
-            webView.experimental.userScripts = ["qrc:///common/change-document-title.js"];
-            webView.url = Qt.resolvedUrl("../common/test1.html");
-            webView.waitForLoadSucceeded();
-            compare(webView.title, "New title");
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_webchannel.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_webchannel.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_webchannel.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_webchannel.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,117 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2014 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff <milian.wolff@kdab.com>
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the QtWebChannel module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import "../common"
-
-import QtWebChannel 1.0
-
-Item {
-    id: test
-    signal barCalled(var arg)
-    signal clientInitializedCalled(var arg)
-
-    QtObject {
-        id: testObject
-        WebChannel.id: "testObject"
-
-        property var foo: 42
-
-        function clientInitialized(arg)
-        {
-            clientInitializedCalled(arg);
-        }
-
-        function bar(arg) {
-            barCalled(arg);
-        }
-
-        signal runTest(var foo)
-    }
-
-    TestWebView {
-        id: webView
-        experimental.webChannel.registeredObjects: [testObject]
-        experimental.preferences.developerExtrasEnabled: true
-    }
-
-    SignalSpy {
-        id: initializedSpy
-        target: test
-        signalName: "clientInitializedCalled"
-    }
-
-    SignalSpy {
-        id: barSpy
-        target: test
-        signalName: "barCalled"
-    }
-
-    TestCase {
-        name: "WebViewWebChannel"
-        property url testUrl: Qt.resolvedUrl("../common/webchannel.html")
-
-        function init() {
-            initializedSpy.clear();
-            barSpy.clear();
-        }
-
-        function test_basic() {
-            webView.url = testUrl;
-            verify(webView.waitForLoadSucceeded());
-
-            initializedSpy.wait();
-            compare(initializedSpy.signalArguments.length, 1);
-            compare(initializedSpy.signalArguments[0][0], 42);
-
-            var newValue = "roundtrip";
-            testObject.runTest(newValue);
-            barSpy.wait();
-            compare(barSpy.signalArguments.length, 1);
-            compare(barSpy.signalArguments[0][0], newValue);
-
-            compare(testObject.foo, newValue);
-        }
-    }
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_wheelEventHandling.qml qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_wheelEventHandling.qml
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_wheelEventHandling.qml	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView/tst_wheelEventHandling.qml	1970-01-01 10:00:00.000000000 +1000
@@ -1,58 +0,0 @@
-import QtQuick 2.0
-import QtTest 1.0
-import QtWebKit 3.0
-import QtWebKit.experimental 1.0
-import Test 1.0
-import "../common"
-
-Item {
-    TestWebView {
-        id: webView
-        width: 800
-        height: 600
-        url: Qt.resolvedUrl("../common/test4.html")
-    }
-
-    SignalSpy {
-        id: scrollSpy
-        target: webView
-        signalName: "contentYChanged"
-    }
-
-    TestCase {
-        name: "WheelEventHandling"
-        when: windowShown
-
-        property variant test: webView.experimental.test
-
-        function init() {
-            webView.url = Qt.resolvedUrl("../common/test4.html")
-            verify(webView.waitForViewportReady())
-            webView.contentY = 0
-        }
-
-        function test_wheelScrollEvent() {
-            scrollSpy.clear()
-            var centerPoint = Qt.point(webView.width / 2, webView.height / 2)
-            test.wheelEvent(webView, centerPoint.x, centerPoint.y, -500);
-            // The signal spy below will time out if the wheel event did not scroll the content.
-            scrollSpy.wait()
-            var position = webView.contentY
-            webView.reload()
-            verify(webView.waitForViewportReady())
-            // The check below will fail if the previous position was not restored after reload.
-            verify(position == webView.contentY)
-        }
-
-        function test_wheelScrollEventAfterReload() {
-            scrollSpy.clear()
-            webView.reload()
-            verify(webView.waitForViewportReady())
-            var centerPoint = Qt.point(webView.width / 2, webView.height / 2)
-            test.wheelEvent(webView, centerPoint.x, centerPoint.y, -500);
-            // The signal spy below will time out if the wheel event did not scroll the content.
-            scrollSpy.wait()
-        }
-    }
-
-}
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qmltests/WebView.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,19 +0,0 @@
-include(../tests.pri)
-SOURCES += tst_qmltests.cpp
-TARGET = tst_qmltests_WebView
-OBJECTS_DIR = .obj_WebView
-
-QT += webkit-private
-CONFIG += testcase
-
-QT += qmltest
-
-# Test the QML files under WebView in the source repository.
-DEFINES += QUICK_TEST_SOURCE_DIR=\"\\\"$$PWD$${QMAKE_DIR_SEP}WebView\\\"\"
-DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
-
-OTHER_FILES += \
-    WebView/* \
-    common/*
-
-RESOURCES = resources.qrc
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/qquickwebview.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/qquickwebview.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/qquickwebview.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/qquickwebview.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,4 +0,0 @@
-include(../tests.pri)
-SOURCES += $${TARGET}.cpp
-QT += webkit-private
-DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/tst_qquickwebview.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/tst_qquickwebview.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/tst_qquickwebview.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qquickwebview/tst_qquickwebview.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,449 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#include "../testwindow.h"
-#include "../util.h"
-
-#include <QScopedPointer>
-#include <QtQml/QQmlEngine>
-#include <QtTest/QtTest>
-#include <private/qquickwebpage_p.h>
-#include <private/qquickwebview_p.h>
-
-class tst_QQuickWebView : public QObject {
-    Q_OBJECT
-public:
-    tst_QQuickWebView();
-
-private Q_SLOTS:
-    void init();
-    void cleanup();
-
-    void accessPage();
-    void navigationStatusAtStartup();
-    void stopEnabledAfterLoadStarted();
-    void baseUrl();
-    void loadEmptyUrl();
-    void loadEmptyPageViewVisible();
-    void loadEmptyPageViewHidden();
-    void loadNonexistentFileUrl();
-    void backAndForward();
-    void reload();
-    void stop();
-    void loadProgress();
-    void scrollRequest();
-
-    void show();
-    void showWebView();
-    void removeFromCanvas();
-    void multipleWebViewWindows();
-    void multipleWebViews();
-    void titleUpdate();
-    void transparentWebViews();
-
-    void inputMethod();
-    void inputMethodHints();
-    void basicRenderingSanity();
-
-private:
-    void prepareWebViewComponent();
-    inline QQuickWebView* newWebView();
-    inline QQuickWebView* webView() const;
-    void runJavaScript(const QString& script);
-    QScopedPointer<TestWindow> m_window;
-    QScopedPointer<QQmlComponent> m_component;
-};
-
-tst_QQuickWebView::tst_QQuickWebView()
-{
-    addQtWebProcessToPath();
-    prepareWebViewComponent();
-}
-
-void tst_QQuickWebView::prepareWebViewComponent()
-{
-    static QQmlEngine* engine = new QQmlEngine(this);
-    engine->addImportPath(QString::fromUtf8(IMPORT_DIR));
-
-    m_component.reset(new QQmlComponent(engine, this));
-
-    m_component->setData(QByteArrayLiteral("import QtQuick 2.0\n"
-                                           "import QtWebKit 3.0\n"
-                                           "WebView {}")
-                         , QUrl());
-}
-
-QQuickWebView* tst_QQuickWebView::newWebView()
-{
-    QObject* viewInstance = m_component->create();
-    QQuickWebView* webView = qobject_cast<QQuickWebView*>(viewInstance);
-    return webView;
-}
-
-void tst_QQuickWebView::init()
-{
-    m_window.reset(new TestWindow(newWebView()));
-}
-
-void tst_QQuickWebView::cleanup()
-{
-    m_window.reset();
-}
-
-inline QQuickWebView* tst_QQuickWebView::webView() const
-{
-    return static_cast<QQuickWebView*>(m_window->webView.data());
-}
-
-void tst_QQuickWebView::runJavaScript(const QString &script)
-{
-    QEventLoop loop;
-    webView()->runJavaScriptInMainFrame(script, &loop, "quit");
-    loop.exec();
-}
-
-void tst_QQuickWebView::accessPage()
-{
-    QQuickWebPage* const pageDirectAccess = webView()->page();
-
-    QVariant pagePropertyValue = webView()->experimental()->property("page");
-    QQuickWebPage* const pagePropertyAccess = pagePropertyValue.value<QQuickWebPage*>();
-    QCOMPARE(pagePropertyAccess, pageDirectAccess);
-}
-
-void tst_QQuickWebView::navigationStatusAtStartup()
-{
-    QCOMPARE(webView()->canGoBack(), false);
-
-    QCOMPARE(webView()->canGoForward(), false);
-
-    QCOMPARE(webView()->loading(), false);
-}
-
-void tst_QQuickWebView::stopEnabledAfterLoadStarted()
-{
-    QCOMPARE(webView()->loading(), false);
-
-    LoadStartedCatcher catcher(webView());
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    waitForSignal(&catcher, SIGNAL(finished()));
-
-    QCOMPARE(webView()->loading(), true);
-
-    QVERIFY(waitForLoadSucceeded(webView()));
-}
-
-void tst_QQuickWebView::baseUrl()
-{
-    // Test the url is in a well defined state when instanciating the view, but before loading anything.
-    QVERIFY(webView()->url().isEmpty());
-}
-
-void tst_QQuickWebView::loadEmptyUrl()
-{
-    webView()->setUrl(QUrl());
-    webView()->setUrl(QUrl(QLatin1String("")));
-}
-
-void tst_QQuickWebView::loadEmptyPageViewVisible()
-{
-    m_window->show();
-    loadEmptyPageViewHidden();
-}
-
-void tst_QQuickWebView::loadEmptyPageViewHidden()
-{
-    QSignalSpy loadSpy(webView(), SIGNAL(loadingChanged(QWebLoadRequest*)));
-
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(loadSpy.size(), 2);
-}
-
-void tst_QQuickWebView::loadNonexistentFileUrl()
-{
-    QSignalSpy loadSpy(webView(), SIGNAL(loadingChanged(QWebLoadRequest*)));
-
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/file_that_does_not_exist.html")));
-    QVERIFY(waitForLoadFailed(webView()));
-
-    QCOMPARE(loadSpy.size(), 2);
-}
-
-void tst_QQuickWebView::backAndForward()
-{
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html"));
-
-    webView()->goBack();
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-
-    webView()->goForward();
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html"));
-}
-
-void tst_QQuickWebView::reload()
-{
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-
-    webView()->reload();
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-}
-
-void tst_QQuickWebView::stop()
-{
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
-
-    // FIXME: This test should be fleshed out. Right now it's just here to make sure we don't crash.
-    webView()->stop();
-}
-
-void tst_QQuickWebView::loadProgress()
-{
-    QCOMPARE(webView()->loadProgress(), 0);
-
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QSignalSpy loadProgressChangedSpy(webView(), SIGNAL(loadProgressChanged()));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    QVERIFY(loadProgressChangedSpy.count() >= 1);
-
-    QCOMPARE(webView()->loadProgress(), 100);
-}
-
-void tst_QQuickWebView::show()
-{
-    // This should not crash.
-    m_window->show();
-    QTest::qWait(200);
-    m_window->hide();
-}
-
-void tst_QQuickWebView::showWebView()
-{
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/direct-image-compositing.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-    m_window->show();
-    // This should not crash.
-    webView()->setVisible(true);
-    QTest::qWait(200);
-    webView()->setVisible(false);
-    QTest::qWait(200);
-}
-
-void tst_QQuickWebView::removeFromCanvas()
-{
-    showWebView();
-
-    // This should not crash.
-    QQuickItem* parent = webView()->parentItem();
-    QQuickItem noCanvasItem;
-    webView()->setParentItem(&noCanvasItem);
-    QTest::qWait(200);
-    webView()->setParentItem(parent);
-    webView()->setVisible(true);
-    QTest::qWait(200);
-}
-
-void tst_QQuickWebView::multipleWebViewWindows()
-{
-    showWebView();
-
-    // This should not crash.
-    QQuickWebView* webView1 = newWebView();
-    QScopedPointer<TestWindow> window1(new TestWindow(webView1));
-    QQuickWebView* webView2 = newWebView();
-    QScopedPointer<TestWindow> window2(new TestWindow(webView2));
-
-    webView1->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
-    QVERIFY(waitForLoadSucceeded(webView1));
-    window1->show();
-    webView1->setVisible(true);
-
-    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView2));
-    window2->show();
-    webView2->setVisible(true);
-    QTest::qWait(200);
-}
-
-void tst_QQuickWebView::multipleWebViews()
-{
-    showWebView();
-
-    // This should not crash.
-    QScopedPointer<QQuickWebView> webView1(newWebView());
-    webView1->setParentItem(m_window->contentItem());
-    QScopedPointer<QQuickWebView> webView2(newWebView());
-    webView2->setParentItem(m_window->contentItem());
-
-    webView1->setSize(QSizeF(300, 400));
-    webView1->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
-    QVERIFY(waitForLoadSucceeded(webView1.data()));
-    webView1->setVisible(true);
-
-    webView2->setSize(QSizeF(300, 400));
-    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView2.data()));
-    webView2->setVisible(true);
-    QTest::qWait(200);
-}
-
-void tst_QQuickWebView::basicRenderingSanity()
-{
-    showWebView();
-
-    webView()->setUrl(QUrl(QString::fromUtf8("data:text/html,<html><body bgcolor=\"#00ff00\"></body></html>")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-
-    // This should not crash.
-    webView()->setVisible(true);
-    QTest::qWait(200);
-    QImage grabbedWindow = m_window->grabWindow();
-    QRgb testColor = qRgba(0, 0xff, 0, 0xff);
-    QVERIFY(grabbedWindow.pixel(10, 10) == testColor);
-    QVERIFY(grabbedWindow.pixel(100, 10) == testColor);
-    QVERIFY(grabbedWindow.pixel(10, 100) == testColor);
-    QVERIFY(grabbedWindow.pixel(100, 100) == testColor);
-}
-
-void tst_QQuickWebView::titleUpdate()
-{    
-    QSignalSpy titleSpy(webView(), SIGNAL(titleChanged()));
-
-    // Load page with no title
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html")));
-    QVERIFY(waitForLoadSucceeded(webView()));
-    QCOMPARE(titleSpy.size(), 1);
-
-    titleSpy.clear();
-
-    // No titleChanged signal for failed load
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/file_that_does_not_exist.html")));
-    QVERIFY(waitForLoadFailed(webView()));
-    QCOMPARE(titleSpy.size(), 0);
-
-}
-
-void tst_QQuickWebView::transparentWebViews()
-{
-    showWebView();
-
-    // This should not crash.
-    QScopedPointer<QQuickWebView> webView1(newWebView());
-    webView1->setParentItem(m_window->contentItem());
-    QScopedPointer<QQuickWebView> webView2(newWebView());
-    webView2->setParentItem(m_window->contentItem());
-    QVERIFY(!webView1->experimental()->transparentBackground());
-    webView2->experimental()->setTransparentBackground(true);
-    QVERIFY(webView2->experimental()->transparentBackground());
-
-    webView1->setSize(QSizeF(300, 400));
-    webView1->loadHtml("<html><body bgcolor=\"red\"></body></html>");
-    QVERIFY(waitForLoadSucceeded(webView1.data()));
-    webView1->setVisible(true);
-
-    webView2->setSize(QSizeF(300, 400));
-    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
-    QVERIFY(waitForLoadSucceeded(webView2.data()));
-    webView2->setVisible(true);
-
-    QTest::qWait(200);
-    // FIXME: test actual rendering results; https://bugs.webkit.org/show_bug.cgi?id=80609.
-}
-
-void tst_QQuickWebView::inputMethod()
-{
-    QQuickWebView* view = webView();
-    view->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/inputmethod.html")));
-    QVERIFY(waitForLoadSucceeded(view));
-
-    QVERIFY(!view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
-    runJavaScript("document.getElementById('inputField').focus();");
-    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
-    runJavaScript("document.getElementById('inputField').blur();");
-    QVERIFY(!view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
-}
-
-void tst_QQuickWebView::inputMethodHints()
-{
-    QQuickWebView* view = webView();
-
-    view->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/inputmethod.html")));
-    QVERIFY(waitForLoadSucceeded(view));
-
-    // Setting focus on an input element results in an element in its shadow tree becoming the focus node.
-    // Input hints should not be set from this shadow tree node but from the input element itself.
-    runJavaScript("document.getElementById('emailInputField').focus();");
-    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
-    QInputMethodQueryEvent query(Qt::ImHints);
-    QGuiApplication::sendEvent(view, &query);
-    Qt::InputMethodHints hints(query.value(Qt::ImHints).toUInt() & Qt::ImhExclusiveInputMask);
-    QCOMPARE(hints, Qt::ImhEmailCharactersOnly);
-
-    // The focus of an editable DIV is given directly to it, so no shadow root element
-    // is necessary. This tests the WebPage::editorState() method ability to get the
-    // right element without breaking.
-    runJavaScript("document.getElementById('editableDiv').focus();");
-    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
-    query = QInputMethodQueryEvent(Qt::ImHints);
-    QGuiApplication::sendEvent(view, &query);
-    hints = Qt::InputMethodHints(query.value(Qt::ImHints).toUInt());
-    QCOMPARE(hints, Qt::ImhNone);
-}
-
-void tst_QQuickWebView::scrollRequest()
-{
-    m_window->setGeometry(0, 0, 300, 400);
-    m_window->show();
-
-    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
-    QVERIFY(waitForViewportReady(webView()));
-
-    // COMPARE with the position requested in the html
-    // Use qRound as that is also used when calculating the position
-    // in WebKit.
-    int y = qRound(50 * webView()->page()->contentsScale());
-    QVERIFY(webView()->contentY() == y);
-}
-
-QTEST_MAIN(tst_QQuickWebView)
-
-#include "tst_qquickwebview.moc"
-
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/qrawwebview.pro qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/qrawwebview.pro
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/qrawwebview.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/qrawwebview.pro	1970-01-01 10:00:00.000000000 +1000
@@ -1,3 +0,0 @@
-include(../tests.pri)
-SOURCES += $${TARGET}.cpp
-QT += webkit-private
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/tst_qrawwebview.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/tst_qrawwebview.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/tst_qrawwebview.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/qrawwebview/tst_qrawwebview.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,238 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-#include "../util.h"
-
-#include <QImage>
-#include <QMatrix4x4>
-#include <QOpenGLContext>
-#include <QSize>
-#include <QWindow>
-#include <QtTest/QtTest>
-
-#include <WebKit2/WKContext.h>
-#include <WebKit2/WKPageGroup.h>
-#include <WebKit2/WKPageLoadTypes.h>
-#include <WebKit2/WKPreferences.h>
-#include <WebKit2/WKPreferencesPrivate.h>
-#include <WebKit2/WKStringQt.h>
-#include <WebKit2/WKURL.h>
-#include <WebKit2/qrawwebview_p.h>
-
-static WKContextRef webContext()
-{
-    static WKContextRef result = WKContextCreate();
-    return result;
-}
-
-static WKPageGroupRef createWebPageGroup(const QString& name)
-{
-    WKPageGroupRef pageGroup =WKPageGroupCreateWithIdentifier(WKStringCreateWithQString(name));
-    WKPreferencesRef preferences = WKPageGroupGetPreferences(pageGroup);
-    WKPreferencesSetAcceleratedCompositingEnabled(preferences, true);
-    WKPreferencesSetFrameFlatteningEnabled(preferences, true);
-
-    return pageGroup;
-}
-
-static WKPageGroupRef webPageGroup(const QString& name)
-{
-    static WKPageGroupRef result = createWebPageGroup(name);
-    return result;
-}
-
-class WebView : public QObject, public QRawWebViewClient {
-    Q_OBJECT
-public:
-    WebView(const QSize& size, bool transparent = false)
-    {
-        m_webView = new QRawWebView(webContext(), webPageGroup(QString()), this);
-        m_webView->setTransparentBackground(transparent);
-        m_webView->create();
-
-        WKPageLoaderClient loaderClient;
-        memset(&loaderClient, 0, sizeof(WKPageLoaderClient));
-        loaderClient.version = kWKPageLoaderClientCurrentVersion;
-        loaderClient.clientInfo = this;
-        loaderClient.didLayout = WebView::didLayout;
-
-        WKPageSetPageLoaderClient(m_webView->pageRef(), &loaderClient);
-        WKPageListenForLayoutMilestones(m_webView->pageRef(), kWKDidFirstVisuallyNonEmptyLayout);
-        WKPageSetUseFixedLayout(m_webView->pageRef(), true);
-
-        m_webView->setSize(size);
-        m_webView->setFocused(true);
-        m_webView->setVisible(true);
-        m_webView->setActive(true);
-    }
-
-    ~WebView() { delete m_webView; }
-
-    void load(const QString& html)
-    {
-        m_frameLoaded = false;
-        WKPageLoadURL(m_webView->pageRef(), WKURLCreateWithUTF8CString(html.toLocal8Bit().data()));
-        QVERIFY(::waitForSignal(this, SIGNAL(loaded()), 5000));
-    }
-
-    void setDrawBackground(bool value) { m_webView->setDrawBackground(value); }
-    void setTransparentBackground(bool value) { m_webView->setTransparentBackground(value); }
-
-    virtual void viewNeedsDisplay(const QRect&)
-    {
-        m_webView->paint(QMatrix4x4(), 1, 0);
-    }
-
-    virtual void viewRequestedScroll(const QPoint&) { }
-    virtual void viewProcessCrashed() { }
-    virtual void viewProcessRelaunched() { }
-    virtual void viewContentSizeChanged(const QSize&) { }
-    virtual void viewRequestedCursorOverride(const QCursor&) { }
-    virtual void doneWithKeyEvent(const QKeyEvent*, bool wasHandled) { }
-    virtual void doneWithTouchEvent(const QTouchEvent*, bool wasHandled) { }
-
-    void frameLoaded()
-    {
-        m_frameLoaded = true;
-        WKPageForceRepaint(m_webView->pageRef(), this, finishForceRepaint);
-    }
-
-    void onRepaintDone()
-    {
-        emit loaded();
-    }
-
-    static void finishForceRepaint(WKErrorRef, void* context)
-    {
-        static_cast<WebView*>(context)->onRepaintDone();
-    }
-
-    static void didLayout(WKPageRef page, WKLayoutMilestones milestones, WKTypeRef userData, const void *clientInfo)
-    {
-        static_cast<WebView*>(const_cast<void*>(clientInfo))->frameLoaded();
-    }
-
-Q_SIGNALS:
-    void loaded();
-
-private:
-    QRawWebView* m_webView;
-    bool m_frameLoaded;
-};
-
-static bool compareImages(const QImage& i1, const QImage& i2, int count)
-{
-    if (i1.size() != i2.size())
-        return false;
-    for (int x = 0; x < count; ++x) {
-        for (int y = 0; y < count; ++y) {
-            QPoint point(x * i1.width() / count, y * i1.height() / count);
-            if (i1.pixel(point) != i2.pixel(point))
-                return false;
-        }
-    }
-
-    return true;
-}
-
-class tst_qrawwebview : public QObject {
-    Q_OBJECT
-public:
-    tst_qrawwebview()
-        : m_resourceDir(QString::fromLatin1(TESTS_SOURCE_DIR "/html/resources"))
-        , m_baseUrl(QUrl::fromLocalFile(TESTS_SOURCE_DIR "/html").toString())
-    {
-        addQtWebProcessToPath();
-    }
-
-private Q_SLOTS:
-    void paint() { run(&tst_qrawwebview::doPaint, m_resourceDir + "/qwkview_paint.png"); }
-    void noBackground1() { run(&tst_qrawwebview::doNoBackground1, m_resourceDir + "/qwkview_noBackground1.png"); }
-    void noBackground2() { run(&tst_qrawwebview::doNoBackground2, m_resourceDir + "/qwkview_noBackground1.png"); }
-    void noBackground3() { run(&tst_qrawwebview::doNoBackground3, m_resourceDir + "/qwkview_noBackground3.png"); }
-
-private:
-    const QString m_resourceDir;
-    const QString m_baseUrl;
-
-    void doPaint(const QSize& size);
-    void doNoBackground1(const QSize& size);
-    void doNoBackground2(const QSize& size);
-    void doNoBackground3(const QSize& size);
-
-    typedef void (tst_qrawwebview::*PaintMethod)(const QSize& size);
-    void run(PaintMethod, const QString& expectation);
-};
-
-void tst_qrawwebview::doPaint(const QSize& size)
-{
-    WebView view(size);
-    view.load(m_baseUrl + "/redsquare.html");
-}
-
-void tst_qrawwebview::doNoBackground1(const QSize& size)
-{
-    WebView view(size, true);
-    view.load(m_baseUrl + "/redsquare.html");
-    view.load(m_baseUrl + "/bluesquare.html");
-}
-
-void tst_qrawwebview::doNoBackground2(const QSize& size)
-{
-    WebView view1(size, true);
-    view1.load(m_baseUrl + "/redsquare.html");
-
-    WebView view2(size, true);
-    view2.load(m_baseUrl + "/bluesquare.html");
-}
-
-void tst_qrawwebview::doNoBackground3(const QSize& size)
-{
-    WebView view1(size, false);
-    view1.load(m_baseUrl + "/redsquare.html");
-
-    WebView view2(size, true);
-    view2.load(m_baseUrl + "/bluesquare.html");
-}
-
-void tst_qrawwebview::run(PaintMethod method, const QString& expectation)
-{
-    QWindow window;
-    window.setSurfaceType(QSurface::OpenGLSurface);
-    window.setGeometry(0, 0, 200, 200);
-    window.create();
-
-    QOpenGLContext context;
-    context.create();
-    context.makeCurrent(&window);
-
-    glViewport(0, 0, window.size().width(), window.size().height());
-    glClearColor(0, 0, 0, 0);
-    glClear(GL_COLOR_BUFFER_BIT);
-
-    (this->*method)(window.size());
-
-    QImage image(window.size(), QImage::Format_ARGB32_Premultiplied);
-    glReadPixels(0, 0, window.size().width(), window.size().height(), GL_RGBA, GL_UNSIGNED_BYTE, image.bits());
-
-    QVERIFY(compareImages(QImage(expectation), image.rgbSwapped(), 5));
-}
-
-QTEST_MAIN(tst_qrawwebview)
-
-#include "tst_qrawwebview.moc"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/tests.pri qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/tests.pri
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/tests.pri	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/tests.pri	1970-01-01 10:00:00.000000000 +1000
@@ -1,20 +0,0 @@
-TEMPLATE = app
-
-VPATH += $$_PRO_FILE_PWD_
-TARGET = tst_$$TARGET
-
-INCLUDEPATH += $$PWD
-SOURCES +=  ../util.cpp
-
-QT += testlib webkit
-have?(QTQUICK) {
-    QT += qml quick quick-private
-    HEADERS += ../bytearraytestdata.h \
-               ../util.h
-
-    SOURCES += ../bytearraytestdata.cpp
-}
-WEBKIT += wtf # For platform macros
-
-DEFINES += TESTS_SOURCE_DIR=\\\"$$PWD\\\" \
-           QWP_PATH=\\\"$${ROOT_BUILD_DIR}/bin\\\"
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/testwindow.h qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/testwindow.h
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/testwindow.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/testwindow.h	1970-01-01 10:00:00.000000000 +1000
@@ -1,59 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#ifndef testwindow_h
-#define testwindow_h
-
-#if 0
-#pragma qt_no_master_include
-#endif
-
-#include <QResizeEvent>
-#include <QScopedPointer>
-#include <QtQuick/qquickitem.h>
-#include <QtQuick/qquickview.h>
-
-// TestWindow: Utility class to ignore QQuickView details.
-class TestWindow : public QQuickView {
-public:
-    inline TestWindow(QQuickItem* webView);
-    QScopedPointer<QQuickItem> webView;
-
-protected:
-    inline void resizeEvent(QResizeEvent*);
-};
-
-inline TestWindow::TestWindow(QQuickItem* webView)
-    : webView(webView)
-{
-    Q_ASSERT(webView);
-    webView->setParentItem(contentItem());
-    resize(300, 400);
-}
-
-inline void TestWindow::resizeEvent(QResizeEvent* event)
-{
-    QQuickView::resizeEvent(event);
-    webView->setX(0);
-    webView->setY(0);
-    webView->setWidth(event->size().width());
-    webView->setHeight(event->size().height());
-}
-
-#endif /* testwindow_h */
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/util.cpp qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/util.cpp
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/util.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/util.cpp	1970-01-01 10:00:00.000000000 +1000
@@ -1,143 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-
-#include "util.h"
-
-#include <QtTest/QtTest>
-#include <stdio.h>
-
-#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
-#include "private/qquickwebview_p.h"
-#include "private/qwebloadrequest_p.h"
-#endif
-
-void addQtWebProcessToPath()
-{
-    // Since tests won't find ./QtWebProcess, add it to PATH (at the end to prevent surprises).
-    // QWP_PATH should be defined by qmake.
-    qputenv("PATH", qgetenv("PATH") + ":" + QWP_PATH);
-}
-
-/**
- * Starts an event loop that runs until the given signal is received.
- * Optionally the event loop
- * can return earlier on a timeout.
- *
- * \return \p true if the requested signal was received
- *         \p false on timeout
- */
-bool waitForSignal(QObject* obj, const char* signal, int timeout)
-{
-    QEventLoop loop;
-    QObject::connect(obj, signal, &loop, SLOT(quit()));
-    QTimer timer;
-    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
-    if (timeout > 0) {
-        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
-        timer.setSingleShot(true);
-        timer.start(timeout);
-    }
-    loop.exec();
-    return timeoutSpy.isEmpty();
-}
-
-static void messageHandler(QtMsgType type, const QMessageLogContext&, const QString& message)
-{
-    if (type == QtCriticalMsg) {
-        fprintf(stderr, "%s\n", qPrintable(message));
-        return;
-    }
-    // Do nothing
-}
-
-void suppressDebugOutput()
-{
-    qInstallMessageHandler(messageHandler); \
-    if (qgetenv("QT_WEBKIT_SUPPRESS_WEB_PROCESS_OUTPUT").isEmpty()) \
-        qputenv("QT_WEBKIT_SUPPRESS_WEB_PROCESS_OUTPUT", "1");
-}
-
-#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
-bool waitForLoadSucceeded(QQuickWebView* webView, int timeout)
-{
-    QEventLoop loop;
-    LoadSpy loadSpy(webView);
-    QObject::connect(&loadSpy, SIGNAL(loadSucceeded()), &loop, SLOT(quit()));
-    QTimer timer;
-    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
-    if (timeout > 0) {
-        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
-        timer.setSingleShot(true);
-        timer.start(timeout);
-    }
-    loop.exec();
-    return timeoutSpy.isEmpty();
-}
-
-bool waitForLoadFailed(QQuickWebView* webView, int timeout)
-{
-    QEventLoop loop;
-    LoadSpy loadSpy(webView);
-    QObject::connect(&loadSpy, SIGNAL(loadFailed()), &loop, SLOT(quit()));
-    QTimer timer;
-    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
-    if (timeout > 0) {
-        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
-        timer.setSingleShot(true);
-        timer.start(timeout);
-    }
-    loop.exec();
-    return timeoutSpy.isEmpty();
-}
-
-bool waitForViewportReady(QQuickWebView* webView, int timeout)
-{
-    // The viewport is locked until the first frame of a page load is rendered.
-    // The QQuickView needs to be shown for this to succeed.
-    return waitForSignal(webView->experimental(), SIGNAL(loadVisuallyCommitted()), timeout);
-}
-
-LoadSpy::LoadSpy(QQuickWebView* webView)
-{
-    connect(webView, SIGNAL(loadingChanged(QWebLoadRequest*)), SLOT(onLoadingChanged(QWebLoadRequest*)));
-}
-
-void LoadSpy::onLoadingChanged(QWebLoadRequest* loadRequest)
-{
-    if (loadRequest->status() == QQuickWebView::LoadSucceededStatus)
-        emit loadSucceeded();
-    else if (loadRequest->status() == QQuickWebView::LoadFailedStatus)
-        emit loadFailed();
-}
-
-LoadStartedCatcher::LoadStartedCatcher(QQuickWebView* webView)
-    : m_webView(webView)
-{
-    connect(m_webView, SIGNAL(loadingChanged(QWebLoadRequest*)), this, SLOT(onLoadingChanged(QWebLoadRequest*)));
-}
-
-void LoadStartedCatcher::onLoadingChanged(QWebLoadRequest* loadRequest)
-{
-    if (loadRequest->status() == QQuickWebView::LoadStartedStatus) {
-        QMetaObject::invokeMethod(this, "finished", Qt::QueuedConnection);
-
-        QCOMPARE(m_webView->loading(), true);
-    }
-}
-#endif
diff -Nru qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/util.h qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/util.h
--- qtwebkit-5.212.0-alpha4/Source/WebKit2/UIProcess/API/qt/tests/util.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WebKit2/UIProcess/API/qt/tests/util.h	1970-01-01 10:00:00.000000000 +1000
@@ -1,64 +0,0 @@
-/*
-    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public License
-    along with this library; see the file COPYING.LIB.  If not, write to
-    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-    Boston, MA 02110-1301, USA.
-*/
-// Functions and macros that really need to be in QTestLib
-
-#include <QEventLoop>
-#include <QSignalSpy>
-#include <QTimer>
-
-class QQuickWebView;
-class QWebLoadRequest;
-
-#if !defined(TESTS_SOURCE_DIR)
-#define TESTS_SOURCE_DIR ""
-#endif
-
-void addQtWebProcessToPath();
-bool waitForSignal(QObject*, const char* signal, int timeout = 10000);
-void suppressDebugOutput();
-
-#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
-bool waitForLoadSucceeded(QQuickWebView* webView, int timeout = 10000);
-bool waitForLoadFailed(QQuickWebView* webView, int timeout = 10000);
-bool waitForViewportReady(QQuickWebView* webView, int timeout = 10000);
-
-class LoadSpy : public QEventLoop {
-    Q_OBJECT
-public:
-    LoadSpy(QQuickWebView* webView);
-Q_SIGNALS:
-    void loadSucceeded();
-    void loadFailed();
-private Q_SLOTS:
-    void onLoadingChanged(QWebLoadRequest* loadRequest);
-};
-
-class LoadStartedCatcher : public QObject {
-    Q_OBJECT
-public:
-    LoadStartedCatcher(QQuickWebView* webView);
-    virtual ~LoadStartedCatcher() { }
-public Q_SLOTS:
-    void onLoadingChanged(QWebLoadRequest* loadRequest);
-Q_SIGNALS:
-    void finished();
-private:
-    QQuickWebView* m_webView;
-};
-#endif
diff -Nru qtwebkit-5.212.0-alpha4/Source/WTF/wtf/dtoa/utils.h qtwebkit-opensource-src-5.212/Source/WTF/wtf/dtoa/utils.h
--- qtwebkit-5.212.0-alpha4/Source/WTF/wtf/dtoa/utils.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WTF/wtf/dtoa/utils.h	2020-09-22 21:30:04.000000000 +1000
@@ -49,7 +49,7 @@
 defined(__ARMEL__) || \
 defined(_MIPS_ARCH_MIPS32R2)
 #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1
-#elif CPU(MIPS) || CPU(MIPS64) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(SH4) || CPU(S390) || CPU(S390X) || CPU(IA64) || CPU(ALPHA) || CPU(ARM64) || CPU(HPPA)
+#elif CPU(MIPS) || CPU(MIPS64) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(SH4) || CPU(S390) || CPU(S390X) || CPU(IA64) || CPU(ALPHA) || CPU(ARM64) || CPU(HPPA) || CPU(RISCV64)
 #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1
 #elif defined(_M_IX86) || defined(__i386__)
 #if defined(_WIN32)
diff -Nru qtwebkit-5.212.0-alpha4/Source/WTF/wtf/Platform.h qtwebkit-opensource-src-5.212/Source/WTF/wtf/Platform.h
--- qtwebkit-5.212.0-alpha4/Source/WTF/wtf/Platform.h	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Source/WTF/wtf/Platform.h	2020-09-22 21:30:04.000000000 +1000
@@ -176,6 +176,11 @@
 #define WTF_CPU_X86_SSE2 1
 #endif
 
+/* CPU(RISCV64) - RISCV64 */
+#if defined(__riscv) && defined(__riscv_xlen) && __riscv_xlen == 64
+#define WTF_CPU_RISCV64 1
+#endif
+
 /* CPU(ARM64) - Apple */
 #if (defined(__arm64__) && defined(__APPLE__)) || defined(__aarch64__)
 #define WTF_CPU_ARM64 1
@@ -707,7 +712,8 @@
     || CPU(S390X) \
     || CPU(MIPS64) \
     || CPU(PPC64) \
-    || CPU(PPC64LE)
+    || CPU(PPC64LE) \
+    || CPU(RISCV64)
 #define USE_JSVALUE64 1
 #else
 #define USE_JSVALUE32_64 1
diff -Nru qtwebkit-5.212.0-alpha4/tests/CMakeLists.txt qtwebkit-opensource-src-5.212/tests/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/tests/CMakeLists.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -1 +1,5 @@
 add_subdirectory(webkitwidgets)
+
+if (ENABLE_WEBKIT2)
+    add_subdirectory(webkitqml)
+endif ()
diff -Nru qtwebkit-5.212.0-alpha4/tests/tests.pro qtwebkit-opensource-src-5.212/tests/tests.pro
--- qtwebkit-5.212.0-alpha4/tests/tests.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/tests.pro	2020-09-22 21:30:04.000000000 +1000
@@ -1,2 +1,4 @@
 TEMPLATE = subdirs
 SUBDIRS += webkitwidgets
+# QTFIXME: Check if QML API was built
+SUBDIRS += webkitqml
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/bytearraytestdata.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/bytearraytestdata.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/bytearraytestdata.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/bytearraytestdata.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this program; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+#include "bytearraytestdata.h"
+
+ByteArrayTestData::ByteArrayTestData(QObject* parent)
+    : QObject(parent)
+{
+    QString text = QStringLiteral("<html><head><title>title with copyright %1</title></head><body>content</body></html>");
+    text = text.arg(QChar::fromLatin1(169));
+
+    m_latin1Data = text.toLatin1();
+    m_utf8Data = text.toUtf8();
+
+    Q_ASSERT(m_latin1Data != m_utf8Data);
+}
+
+ByteArrayTestData::~ByteArrayTestData()
+{
+}
+
+QVariant ByteArrayTestData::latin1Data() const
+{
+    return QVariant(m_latin1Data);
+}
+
+QVariant ByteArrayTestData::utf8Data() const
+{
+    return QVariant(m_utf8Data);
+}
+
+#include "moc_bytearraytestdata.cpp"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/bytearraytestdata.h qtwebkit-opensource-src-5.212/tests/webkitqml/bytearraytestdata.h
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/bytearraytestdata.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/bytearraytestdata.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this program; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+
+#ifndef bytearraytestdata_h
+#define bytearraytestdata_h
+
+#if 0
+#pragma qt_no_master_include
+#endif
+
+#include "qwebkitglobal.h"
+#include <QByteArray>
+#include <QObject>
+#include <QtQuick/qquickitem.h>
+
+class ByteArrayTestData : public QObject {
+    Q_OBJECT
+    Q_PROPERTY(QVariant latin1Data READ latin1Data)
+    Q_PROPERTY(QVariant utf8Data READ utf8Data)
+
+public:
+    ByteArrayTestData(QObject* parent = 0);
+    virtual ~ByteArrayTestData();
+    QVariant latin1Data() const;
+    QVariant utf8Data() const;
+
+private:
+    QByteArray m_latin1Data;
+    QByteArray m_utf8Data;
+};
+
+QML_DECLARE_TYPE(ByteArrayTestData)
+
+#endif // bytearraytestdata_h
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/CMakeLists.txt qtwebkit-opensource-src-5.212/tests/webkitqml/CMakeLists.txt
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/CMakeLists.txt	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/CMakeLists.txt	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,101 @@
+include_directories(
+    "${CMAKE_SOURCE_DIR}/Source"
+    "${FORWARDING_HEADERS_DIR}/QtWebKit"
+    "${WEBKIT_DIR}/qt/Api"
+)
+
+include_directories(SYSTEM
+    ${Qt5Quick_INCLUDE_DIRS}
+    ${Qt5Quick_PRIVATE_INCLUDE_DIRS}
+    ${Qt5QuickTest_INCLUDE_DIRS}
+)
+
+set(tst_qmltests_DEFINITIONS
+    IMPORT_DIR="${CMAKE_BINARY_DIR}/imports"
+    QWP_PATH="${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
+    TESTS_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
+)
+
+set(tst_qmltests_DesktopBehavior_DEFINITIONS
+    ${tst_qmltests_DEFINITIONS}
+
+    QUICK_TEST_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}/qmltests/DesktopBehavior"
+    DISABLE_FLICKABLE_VIEWPORT=1
+)
+
+set(tst_qmltests_WebView_DEFINITIONS
+    ${tst_qmltests_DEFINITIONS}
+
+    QUICK_TEST_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}/qmltests/WebView"
+)
+
+set(qmltests_QML_SOURCES
+    qmltests/DesktopBehavior/tst_linkHovered.qml
+    qmltests/DesktopBehavior/tst_loadHtml.qml
+    qmltests/DesktopBehavior/tst_navigationRequested.qml
+
+    qmltests/WebView/tst_applicationScheme.qml
+    qmltests/WebView/tst_colorChooser.qml
+    qmltests/WebView/tst_doubleTapToZoom.qml
+    qmltests/WebView/tst_download.qml
+    qmltests/WebView/tst_evaluateJavaScript.qml
+    qmltests/WebView/tst_favIconLoad.qml
+    qmltests/WebView/tst_findText.qml
+    qmltests/WebView/tst_fitToView.qml
+    qmltests/WebView/tst_geopermission.qml
+    qmltests/WebView/tst_itemSelector.qml
+    qmltests/WebView/tst_javaScriptDialogs.qml
+    qmltests/WebView/tst_loadFail.qml
+    qmltests/WebView/tst_loadHtml.qml
+    qmltests/WebView/tst_loadProgress.qml
+    qmltests/WebView/tst_loadProgressSignal.qml
+    qmltests/WebView/tst_loadUrl.qml
+    qmltests/WebView/tst_messaging.qml
+    qmltests/WebView/tst_multiFileUpload.qml
+    qmltests/WebView/tst_navigationHistory.qml
+    qmltests/WebView/tst_notification.qml
+    qmltests/WebView/tst_origin.qml
+    qmltests/WebView/tst_preferences.qml
+    qmltests/WebView/tst_properties.qml
+    qmltests/WebView/tst_resize.qml
+    qmltests/WebView/tst_singleFileUpload.qml
+    qmltests/WebView/tst_titleChanged.qml
+    qmltests/WebView/tst_userScripts.qml
+    qmltests/WebView/tst_webchannel.qml
+    qmltests/WebView/tst_wheelEventHandling.qml
+
+    qmltests/common/TestWebView.qml
+)
+
+set(qmltests_SOURCES
+    bytearraytestdata.cpp
+    util.cpp
+
+    qmltests/tst_qmltests.cpp
+    ${qmltests_QML_SOURCES}
+)
+
+qt5_add_resources(qmltests_SOURCES qmltests/resources.qrc)
+
+set(qmltests_LIBRARIES
+    WebKit
+    ${Qt5Quick_LIBRARIES}
+    ${Qt5QuickTest_LIBRARIES}
+    ${Qt5Test_LIBRARIES}
+)
+
+if (SHARED_CORE)
+    list(APPEND qmltests_LIBRARIES
+        WebKit2
+    )
+endif ()
+
+add_executable(tst_qmltests_WebView ${qmltests_SOURCES})
+target_compile_definitions(tst_qmltests_WebView PRIVATE ${tst_qmltests_WebView_DEFINITIONS})
+target_link_libraries(tst_qmltests_WebView ${qmltests_LIBRARIES})
+set_target_properties(tst_qmltests_WebView PROPERTIES AUTOMOC ON)
+
+add_executable(tst_qmltests_DesktopBehavior ${qmltests_SOURCES})
+target_compile_definitions(tst_qmltests_DesktopBehavior PRIVATE ${tst_qmltests_DesktopBehavior_DEFINITIONS})
+target_link_libraries(tst_qmltests_DesktopBehavior ${qmltests_LIBRARIES})
+set_target_properties(tst_qmltests_DesktopBehavior PROPERTIES AUTOMOC ON)
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/basic_page2.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/basic_page2.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/basic_page2.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/basic_page2.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+<h1>Basic page 2</h1>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/basic_page.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/basic_page.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/basic_page.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/basic_page.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<html>
+<head>
+<title> Basic Page </title>
+</head>
+<h1>Basic page</h1>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/bluesquare.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/bluesquare.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/bluesquare.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/bluesquare.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,5 @@
+<body style="margin:60px">
+    <table style="border:10px solid blue; width:80px; height:80px">
+        <tr><td>&nbsp;</td></tr>
+    </table>
+</body>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/direct-image-compositing.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/direct-image-compositing.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/direct-image-compositing.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/direct-image-compositing.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,66 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
+   "http://www.w3.org/TR/html4/loose.dtd">
+
+<html lang="en">
+<head>
+  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+  <title>Testing direct image layer optimisation</title>
+  <style type="text/css" media="screen">
+    img {
+      float: left;
+      width: 150px;
+      height: 150px;
+    }
+    img {
+      -webkit-transform: rotate3d(0, 0, 1, 0);
+    }
+    .test {
+      float: left;
+      height: 200px;
+      width: 260px;
+    }
+   </style>
+</head>
+<body>
+
+  <h1>Image optimisation in layers</h1>
+
+  <p>
+    This test exercises direct compositing of images with hardware acceleration. The visual results
+    using ACCELERATED_COMPOSITING and regular TOT should be identical. Running this test manually with
+    the correct debug options will show which elements are directly composited. See
+    <a href="https://bugs.webkit.org/show_bug.cgi?id=23361">https://bugs.webkit.org/show_bug.cgi?id=23361</a>
+  </p>
+
+  <div class="test">
+    <img src="resources/simple_image.png">
+    Basic image - no style - can be directly composited
+  </div>
+
+  <div class="test">
+    <img src="resources/simple_image.png" style="border: 5px solid blue;">
+    5px blue border - can NOT be directly composited
+  </div>
+
+  <div class="test">
+    <img src="resources/simple_image.png" style="margin: 5px 5px;">
+    margin - can NOT be directly composited
+  </div>
+
+  <div class="test">
+    <img src="resources/simple_image.png" style="background-color: grey;">
+    solid background - can be directly composited
+  </div>
+
+  <div class="test">
+    <img src="resources/simple_image.png" style="background: orange url(resources/simple_image.png) -50px -50px;">
+    background image - can NOT be directly composited
+  </div>
+
+  <div class="test">
+    <img src="resources/simple_image.png" style="-webkit-transform: rotate3d(0, 0, 1, 10deg);">
+    rotated but otherwise no style - can be directly composited
+  </div>
+
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/inputmethod.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/inputmethod.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/inputmethod.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/inputmethod.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,11 @@
+<html>
+<head>
+<title>Basic Page For Input Method Testing</title>
+</head>
+<body>
+<h1>Basic page</h1>
+<input id="inputField" />
+<input id="emailInputField" type="email" />
+<div id="editableDiv" contenteditable></div>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/redsquare.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/redsquare.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/redsquare.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/redsquare.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,5 @@
+<body style="margin:20px">
+    <table style="border:10px solid red; width:160px; height:160px">
+        <tr><td>&nbsp;</td></tr>
+    </table>
+</body>
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/html/resources/qwkview_noBackground1.png and qtwebkit-opensource-src-5.212/tests/webkitqml/html/resources/qwkview_noBackground1.png differ
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/html/resources/qwkview_noBackground3.png and qtwebkit-opensource-src-5.212/tests/webkitqml/html/resources/qwkview_noBackground3.png differ
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/html/resources/qwkview_paint.png and qtwebkit-opensource-src-5.212/tests/webkitqml/html/resources/qwkview_paint.png differ
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/html/resources/simple_image.png and qtwebkit-opensource-src-5.212/tests/webkitqml/html/resources/simple_image.png differ
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/html/scroll.html qtwebkit-opensource-src-5.212/tests/webkitqml/html/scroll.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/html/scroll.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/html/scroll.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,29 @@
+<!DOCTYPE html>
+<html>
+<meta name="viewport" content="width=200, height=500, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1"/>
+<script type="text/javascript">
+function pageScroll() {
+    window.scrollBy(0,50); // horizontal and vertical scroll increments
+}
+</script> 
+<style>
+    body {
+        background-color: blue;
+        margin: 50 50 50 50;
+    }
+    div {
+        font-color: white;
+        background-color: green;
+        width: 300px;
+        height: 1000px;
+    } 
+</style>
+
+<head>
+<title>Scroll test </title>
+</head>
+<body onload="pageScroll()">
+<div>
+</div>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/inspectorserver/inspectorserver.pro qtwebkit-opensource-src-5.212/tests/webkitqml/inspectorserver/inspectorserver.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/inspectorserver/inspectorserver.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/inspectorserver/inspectorserver.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,4 @@
+include(../tests.pri)
+SOURCES += $${TARGET}.cpp
+QT += webkit-private
+DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/inspectorserver/tst_inspectorserver.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/inspectorserver/tst_inspectorserver.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/inspectorserver/tst_inspectorserver.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/inspectorserver/tst_inspectorserver.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,183 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "../testwindow.h"
+#include "../util.h"
+
+#include <QNetworkAccessManager>
+#include <QNetworkReply>
+#include <QNetworkRequest>
+#include <QScopedPointer>
+#include <QtQml/QQmlEngine>
+#include <QtTest/QtTest>
+#include <private/qquickwebview_p.h>
+#include <private/qwebpreferences_p.h>
+
+#define INSPECTOR_SERVER_PORT "23654"
+static const QUrl s_inspectorServerHttpBaseUrl("http://localhost:" INSPECTOR_SERVER_PORT);
+static const QUrl s_inspectorServerWebSocketBaseUrl("ws://localhost:" INSPECTOR_SERVER_PORT);
+
+class tst_InspectorServer : public QObject {
+    Q_OBJECT
+public:
+    tst_InspectorServer();
+
+private Q_SLOTS:
+    void init();
+    void cleanup();
+
+    void testPageList();
+    void testRemoteDebuggingMessage();
+    void openRemoteDebuggingSession();
+private:
+    void prepareWebViewComponent();
+    inline QQuickWebView* newWebView();
+    inline QQuickWebView* webView() const;
+    QJsonArray fetchPageList() const;
+    QScopedPointer<TestWindow> m_window;
+    QScopedPointer<QQmlComponent> m_component;
+};
+
+tst_InspectorServer::tst_InspectorServer()
+{
+    qputenv("QTWEBKIT_INSPECTOR_SERVER", INSPECTOR_SERVER_PORT);
+    addQtWebProcessToPath();
+    prepareWebViewComponent();
+}
+
+void tst_InspectorServer::prepareWebViewComponent()
+{
+    static QQmlEngine* engine = new QQmlEngine(this);
+    engine->addImportPath(QString::fromUtf8(IMPORT_DIR));
+
+    m_component.reset(new QQmlComponent(engine, this));
+
+    m_component->setData(QByteArrayLiteral("import QtQuick 2.0\n"
+                                           "import QtWebKit 3.0\n"
+                                           "WebView {}")
+                         , QUrl());
+}
+
+QQuickWebView* tst_InspectorServer::newWebView()
+{
+    QObject* viewInstance = m_component->create();
+
+    return qobject_cast<QQuickWebView*>(viewInstance);
+}
+
+void tst_InspectorServer::init()
+{
+    m_window.reset(new TestWindow(newWebView()));
+    webView()->experimental()->preferences()->setDeveloperExtrasEnabled(true);
+}
+
+void tst_InspectorServer::cleanup()
+{
+    m_window.reset();
+}
+
+inline QQuickWebView* tst_InspectorServer::webView() const
+{
+    return static_cast<QQuickWebView*>(m_window->webView.data());
+}
+
+QJsonArray tst_InspectorServer::fetchPageList() const
+{
+    QNetworkAccessManager qnam;
+    QScopedPointer<QNetworkReply> reply(qnam.get(QNetworkRequest(s_inspectorServerHttpBaseUrl.resolved(QUrl("pagelist.json")))));
+    waitForSignal(reply.data(), SIGNAL(finished()));
+    return QJsonDocument::fromJson(reply->readAll()).array();
+}
+
+void tst_InspectorServer::testPageList()
+{
+    QUrl testPageUrl = QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+    LoadStartedCatcher catcher(webView());
+    webView()->setUrl(testPageUrl);
+    waitForSignal(&catcher, SIGNAL(finished()));
+
+    // Our page has developerExtrasEnabled and should be the only one in the list.
+    QJsonArray pageList = fetchPageList();
+    QCOMPARE(pageList.size(), 1);
+    QCOMPARE(testPageUrl.toString(), pageList.at(0).toObject().value("url").toString());
+}
+
+void tst_InspectorServer::testRemoteDebuggingMessage()
+{
+    QJsonArray pageList = fetchPageList();
+    QCOMPARE(pageList.size(), 1);
+
+    // Test sending a raw remote debugging message through our web socket server.
+    // For this specific message see: http://code.google.com/chrome/devtools/docs/protocol/tot/runtime.html#command-evaluate
+    QLatin1String jsExpression("2 + 2");
+    QLatin1String jsExpressionResult("4");
+    QScopedPointer<QQuickWebView> webSocketQueryWebView(newWebView());
+    webSocketQueryWebView->loadHtml(QString(
+        "<script type=\"text/javascript\">\n"
+        "var socket = new WebSocket('%1/devtools/page/%2');\n"
+        "socket.onmessage = function(message) {\n"
+            "var response = JSON.parse(message.data);\n"
+            "if (response.id === 1)\n"
+                "document.title = response.result.result.value;\n"
+        "}\n"
+        "socket.onopen = function() {\n"
+            "socket.send('{\"id\": 1, \"method\": \"Runtime.evaluate\", \"params\": {\"expression\": \"%3\" } }');\n"
+        "}\n"
+        "</script>")
+        .arg(s_inspectorServerWebSocketBaseUrl.toString())
+        .arg(pageList.at(0).toObject().value("id").toDouble())
+        .arg(jsExpression));
+
+    for (int i = 0; i < 10; ++i) {
+        if (!webSocketQueryWebView->title().isEmpty())
+            break;
+        waitForSignal(webSocketQueryWebView.data(), SIGNAL(titleChanged()), 500);
+    }
+
+    QCOMPARE(webSocketQueryWebView->title(), jsExpressionResult);
+}
+
+void tst_InspectorServer::openRemoteDebuggingSession()
+{
+    QJsonArray pageList = fetchPageList();
+    QCOMPARE(pageList.size(), 1);
+
+    QScopedPointer<QQuickWebView> inspectorWebView(newWebView());
+    LoadStartedCatcher catcher2(inspectorWebView.data());
+    inspectorWebView->setUrl(s_inspectorServerHttpBaseUrl.resolved(QUrl(pageList.at(0).toObject().value("inspectorUrl").toString())));
+    waitForSignal(&catcher2, SIGNAL(finished()));
+    for (int i = 0; i < 10; ++i) {
+        if (!inspectorWebView->title().isEmpty())
+            break;
+        waitForSignal(inspectorWebView.data(), SIGNAL(titleChanged()), 500);
+    }
+
+    // To test the whole pipeline this exploits a behavior of the inspector front-end which won't provide any title unless the
+    // debugging session was established correctly through web socket. It should be something like "Web Inspector - <Page URL>".
+    // So this test case will fail if:
+    // - The page list didn't return a valid inspector URL
+    // - Or the front-end couldn't be loaded through the inspector HTTP server
+    // - Or the web socket connection couldn't be established between the front-end and the page through the inspector server
+    // Let's see if this test isn't raising too many false positives, in which case we should use a better predicate if available.
+    QVERIFY(!inspectorWebView->title().isEmpty());
+}
+
+QTEST_MAIN(tst_InspectorServer)
+
+#include "tst_inspectorserver.moc"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/publicapi/publicapi.pro qtwebkit-opensource-src-5.212/tests/webkitqml/publicapi/publicapi.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/publicapi/publicapi.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/publicapi/publicapi.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,3 @@
+include(../tests.pri)
+SOURCES += $${TARGET}.cpp
+QT += webkit-private
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/publicapi/tst_publicapi.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/publicapi/tst_publicapi.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/publicapi/tst_publicapi.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/publicapi/tst_publicapi.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,188 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "config.h"
+
+#include <QMetaEnum>
+#include <QMetaMethod>
+#include <QMetaObject>
+#include <QMetaProperty>
+#include <QMetaType>
+#include <QtTest/QtTest>
+#include <private/qquickwebview_p.h>
+#include <private/qwebloadrequest_p.h>
+#include <private/qwebnavigationrequest_p.h>
+
+class tst_publicapi : public QObject {
+    Q_OBJECT
+private Q_SLOTS:
+    void publicAPI();
+};
+
+static QList<const QMetaObject*> typesToCheck = QList<const QMetaObject*>()
+    << &QQuickWebView::staticMetaObject
+    << &QWebLoadRequest::staticMetaObject
+    << &QWebNavigationRequest::staticMetaObject;
+
+static QStringList expectedAPI = QStringList()
+    << "QQuickWebView.AcceptRequest --> NavigationRequestAction"
+    << "QQuickWebView.IgnoreRequest --> NavigationRequestAction"
+    << "QQuickWebView.LoadStartedStatus --> LoadStatus"
+    << "QQuickWebView.LoadStoppedStatus --> LoadStatus"
+    << "QQuickWebView.LoadSucceededStatus --> LoadStatus"
+    << "QQuickWebView.LoadFailedStatus --> LoadStatus"
+    << "QQuickWebView.NoErrorDomain --> ErrorDomain"
+    << "QQuickWebView.InternalErrorDomain --> ErrorDomain"
+    << "QQuickWebView.NetworkErrorDomain --> ErrorDomain"
+    << "QQuickWebView.HttpErrorDomain --> ErrorDomain"
+    << "QQuickWebView.DownloadErrorDomain --> ErrorDomain"
+    << "QQuickWebView.LinkClickedNavigation --> NavigationType"
+    << "QQuickWebView.FormSubmittedNavigation --> NavigationType"
+    << "QQuickWebView.BackForwardNavigation --> NavigationType"
+    << "QQuickWebView.ReloadNavigation --> NavigationType"
+    << "QQuickWebView.FormResubmittedNavigation --> NavigationType"
+    << "QQuickWebView.OtherNavigation --> NavigationType"
+    << "QQuickWebView.title --> QString"
+    << "QQuickWebView.url --> QUrl"
+    << "QQuickWebView.icon --> QUrl"
+    << "QQuickWebView.canGoBack --> bool"
+    << "QQuickWebView.canGoForward --> bool"
+    << "QQuickWebView.loading --> bool"
+    << "QQuickWebView.loadProgress --> int"
+    << "QQuickWebView.titleChanged() --> void"
+    << "QQuickWebView.navigationHistoryChanged() --> void"
+    << "QQuickWebView.loadingChanged(QWebLoadRequest*) --> void"
+    << "QQuickWebView.loadProgressChanged() --> void"
+    << "QQuickWebView.urlChanged() --> void"
+    << "QQuickWebView.iconChanged() --> void"
+    << "QQuickWebView.linkHovered(QUrl,QString) --> void"
+    << "QQuickWebView.navigationRequested(QWebNavigationRequest*) --> void"
+    << "QQuickWebView.loadHtml(QString,QUrl,QUrl) --> void"
+    << "QQuickWebView.loadHtml(QString,QUrl) --> void"
+    << "QQuickWebView.loadHtml(QString) --> void"
+    << "QQuickWebView.goBack() --> void"
+    << "QQuickWebView.goForward() --> void"
+    << "QQuickWebView.stop() --> void"
+    << "QQuickWebView.reload() --> void"
+    << "QWebLoadRequest.url --> QUrl"
+    << "QWebLoadRequest.status --> QQuickWebView::LoadStatus"
+    << "QWebLoadRequest.errorString --> QString"
+    << "QWebLoadRequest.errorDomain --> QQuickWebView::ErrorDomain"
+    << "QWebLoadRequest.errorCode --> int"
+    << "QWebNavigationRequest.url --> QUrl"
+    << "QWebNavigationRequest.mouseButton --> int"
+    << "QWebNavigationRequest.keyboardModifiers --> int"
+    << "QWebNavigationRequest.action --> QQuickWebView::NavigationRequestAction"
+    << "QWebNavigationRequest.navigationType --> QQuickWebView::NavigationType"
+    << "QWebNavigationRequest.isMainFrame --> bool"
+    << "QWebNavigationRequest.actionChanged() --> void"
+    ;
+
+static bool isCheckedEnum(const QByteArray& typeName)
+{
+    QList<QByteArray> tokens = typeName.split(':');
+    if (tokens.size() == 3) {
+        QByteArray& enumClass = tokens[0];
+        QByteArray& enumName = tokens[2];
+        foreach (const QMetaObject* mo, typesToCheck) {
+            if (mo->className() != enumClass)
+                continue;
+            for (int i = mo->enumeratorOffset(); i < mo->enumeratorCount(); ++i)
+                if (mo->enumerator(i).name() == enumName)
+                    return true;
+        }
+    }
+    return false;
+}
+
+static bool isCheckedClass(const QByteArray& typeName)
+{
+    foreach (const QMetaObject* mo, typesToCheck) {
+        QByteArray moTypeName(mo->className());
+        if (moTypeName == typeName || moTypeName + "*" == typeName)
+            return true;
+    }
+    return false;
+}
+
+static void checkKnownType(const QByteArray& typeName)
+{
+    if ((typeName != "void" && !QMetaType::type(typeName)) || QMetaType::type(typeName) >= QMetaType::User) {
+        bool knownEnum = isCheckedEnum(typeName);
+        bool knownClass = isCheckedClass(typeName);
+        QVERIFY2(knownEnum || knownClass, qPrintable(QString("The API uses an unknown type [%1], you might have to add it to the typesToCheck list.").arg(typeName.constData())));
+    }
+}
+
+static void gatherAPI(const QString& prefix, const QMetaEnum& metaEnum, QStringList* output)
+{
+    for (int i = 0; i < metaEnum.keyCount(); ++i)
+        *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(metaEnum.key(i)).arg(metaEnum.name());
+}
+
+static void gatherAPI(const QString& prefix, const QMetaProperty& property, QStringList* output)
+{
+    *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(property.name()).arg(property.typeName());
+    checkKnownType(property.typeName());
+}
+
+static void gatherAPI(const QString& prefix, const QMetaMethod& method, QStringList* output)
+{
+    if (method.access() != QMetaMethod::Private) {
+        const char* methodTypeName = !!strlen(method.typeName()) ? method.typeName() : "void";
+        *output << QString::fromLatin1("%1%2 --> %3").arg(prefix).arg(QString::fromLatin1(method.methodSignature())).arg(QString::fromLatin1(methodTypeName));
+
+        checkKnownType(methodTypeName);
+        foreach (QByteArray paramType, method.parameterTypes())
+            checkKnownType(paramType);
+    }
+}
+
+static void gatherAPI(const QString& prefix, const QMetaObject* meta, QStringList* output)
+{
+    // *Offset points us only at the leaf class members, we don't have inheritance in our API yet anyway.
+    for (int i = meta->enumeratorOffset(); i < meta->enumeratorCount(); ++i)
+        gatherAPI(prefix, meta->enumerator(i), output);
+    for (int i = meta->propertyOffset(); i < meta->propertyCount(); ++i)
+        gatherAPI(prefix, meta->property(i), output);
+    for (int i = meta->methodOffset(); i < meta->methodCount(); ++i)
+        gatherAPI(prefix, meta->method(i), output);
+}
+
+void tst_publicapi::publicAPI()
+{
+    QStringList actualAPI;
+    foreach (const QMetaObject* meta, typesToCheck)
+        gatherAPI(QString::fromLatin1(meta->className()) + ".", meta, &actualAPI);
+
+    // Uncomment to print the actual API.
+    // foreach(QString actual, actualAPI)
+    //     printf("    << \"%s\"\n", qPrintable(actual));
+
+    // Make sure that nothing slips in the public API unintentionally.
+    foreach (QString actual, actualAPI)
+        QVERIFY2(expectedAPI.contains(actual), qPrintable(actual));
+    // Make sure that the expected list is up-to-date with intentionally added APIs.
+    foreach (QString expected, expectedAPI)
+        QVERIFY2(actualAPI.contains(expected), qPrintable(expected));
+}
+
+QTEST_MAIN(tst_publicapi)
+
+#include "tst_publicapi.moc"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/alert.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/alert.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/alert.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/alert.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,8 @@
+<!doctype html>
+<html>
+<head>
+<script>alert("Hello Qt");</script>
+</head>
+<body>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/append-document-title.js qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/append-document-title.js
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/append-document-title.js	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/append-document-title.js	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+document.title += " with appendix";
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/big-user-script.js qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/big-user-script.js
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/big-user-script.js	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/big-user-script.js	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,110 @@
+// Used to make sure serialization of user scripts between UI process and Web process can handle files bigger
+// than the maximum message size defined in ConnectionXXX classes.
+
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+// ////////////////////////////////////////////////////////////////////////////////////////////////////
+
+document.title = "Big user script changed title";
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/change-document-title.js qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/change-document-title.js
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/change-document-title.js	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/change-document-title.js	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1 @@
+document.title = "New title";
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/colorChooser.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/colorChooser.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/colorChooser.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/colorChooser.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,21 @@
+<!DOCTYPE html>
+<html>
+<head>
+<title>Title</title>
+<script>
+function detectInputTypeColorEnabled() {
+    var element = document.getElementById('test')
+    element.value = 'should sanitize';
+    if (element.value != 'should sanitize')
+        document.title = 'Feature enabled';
+    else
+        document.title = 'Feature disabled';
+}
+function updateTitle(element) {
+    document.title = element.value;
+}
+</script>
+</head>
+<body onload='detectInputTypeColorEnabled()'>
+<input id='test' type='color' onclick='updateTitle(this)' onchange='updateTitle(this)' style='width:50px; height:50px; position:"absolute"; top:0px; left:0px'>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/confirm.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/confirm.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/confirm.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/confirm.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+<head>
+<script>
+document.title = "";
+function updateTitle(accepted) {
+    if (accepted)
+        document.title += " ACCEPTED";
+    else
+        document.title += " REJECTED";
+}
+
+updateTitle(confirm("ACCEPT"));
+updateTitle(confirm("REJECT"));
+</script>
+</head>
+<body>
+</body>
+</html>
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/download.zip and qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/download.zip differ
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/evaluatejavascript.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/evaluatejavascript.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/evaluatejavascript.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/evaluatejavascript.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,10 @@
+<!doctype html>
+<html>
+    <head>
+        <meta charset="UTF-8">
+        <title>Evaluate JavaScript</title>
+    </head>
+    <body>
+        <div id="text">Hello from the WebProcess :-)</div>
+    </body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/favicon2.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/favicon2.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/favicon2.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/favicon2.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,10 @@
+<html>
+<head>
+</head>
+<link type="image/png" href="small-favicon.png" sizes="16x16" rel="icon" />
+<body>
+<p>It's expected that you see a favicon displayed for this page when you open it as a local file.</p>
+<p>The favicon looks like this:</p>
+<img src="small-favicon.png"/>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/favicon.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/favicon.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/favicon.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/favicon.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,10 @@
+<html>
+<head>
+</head>
+<link type="image/png" href="favicon.png" sizes="48x48" rel="icon" />
+<body>
+<p>It's expected that you see a favicon displayed for this page when you open it as a local file.</p>
+<p>The favicon looks like this:</p>
+<img src="favicon.png"/>
+</body>
+</html>
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/favicon.png and qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/favicon.png differ
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/font-preferences.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/font-preferences.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/font-preferences.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/font-preferences.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,31 @@
+<html>
+<head>
+<title>Original Title</title>
+</head>
+<script type="text/javascript">
+function getTestId() {
+    url = document.location.href
+    var i, j = 0;
+    for (i = url.length - 1; i >= 0; --i) {
+        if (url[i] == '?')
+            break
+        else if (url[i] == '#')
+            j = i - 1
+    }
+    return url.substr(i + 1, j - i)
+}
+
+function getStyleForId(id, styleProp) {
+    return document.defaultView.getComputedStyle(document.getElementById(id), null).getPropertyValue(styleProp);
+}
+
+function changeTitle() {
+    document.title = getStyleForId(getTestId(), window.location.hash.substr(1))
+}
+</script>
+<body onload='setTimeout("changeTitle()", 100)'>
+<p id="standard">hello</p>
+<code id="fixed">hello</code>
+<p id="minimum" style="font-size: smaller">hello</p>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/geolocation.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/geolocation.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/geolocation.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/geolocation.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,29 @@
+<head>
+<title>Geolocation Permission API Test</title>
+<meta content="width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;" name="viewport"/>
+<script>
+var watchId = 0;
+
+function successHandler(location) {
+    var message = document.getElementById("message"), html = [];
+    html.push("<img width='256' height='256' src='http://maps.google.com/maps/api/staticmap?center=", location.coords.latitude, ",", location.coords.longitude, "&markers=size:small|color:blue|", location.coords.latitude, ",", location.coords.longitude, "&zoom=14&size=256x256&sensor=false' />");
+    html.push("<p>Longitude: ", location.coords.longitude, "</p>");
+    html.push("<p>Latitude: ", location.coords.latitude, "</p>");
+    html.push("<p>Accuracy: ", location.coords.accuracy, " meters</p>");
+    message.innerHTML = html.join("");
+}
+
+function errorHandler(error) {
+    alert('Attempt to get location failed: ' + error.message);
+}
+
+<!-- One shot example -->
+navigator.geolocation.getCurrentPosition(successHandler, errorHandler);
+
+</script>
+</head>
+<body>
+<div id="message">Location unknown</div>
+</body>
+</html>
+
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/javascript.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/javascript.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/javascript.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/javascript.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,8 @@
+<html>
+<head><title>Original Title</title></head>
+<body>
+<script type="text/javascript">
+document.title = "New Title";
+</script>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/link.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/link.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/link.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/link.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<!doctype html>
+<html>
+<body onload="document.links['foo'].focus();">
+<a name="foo" href="test1.html">Link</a>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/localStorage.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/localStorage.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/localStorage.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/localStorage.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,9 @@
+<html>
+<head><title>Original Title</title></head>
+<body>
+<script type="text/javascript">
+document.title = localStorage.getItem('title');
+localStorage.setItem('title', 'New Title');
+</script>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/messaging.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/messaging.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/messaging.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/messaging.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,15 @@
+<!doctype html>
+<html>
+<head>
+<script>
+    function initialize() {
+        navigator.qt.onmessage = function(ev) {
+            var reversed = ev.data.split("").reverse().join("");
+            navigator.qt.postMessage(reversed);
+        }
+    }
+</script>
+</head>
+<body onload="initialize();">
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/multifileupload.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/multifileupload.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/multifileupload.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/multifileupload.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,11 @@
+<html>
+<head>
+<meta name="viewport" initial-scale=1">
+<title> Mutli-file Upload </title>
+<script src = "./titleupdate.js">
+</script>
+
+<body>
+<input type="file" name="file" id="upfile" onchange="updateTitle()" multiple/>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/notification.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/notification.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/notification.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/notification.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,19 @@
+<html>
+<head>
+  <title>Desktop Notification Permission test</title>
+  <script>
+    requestPermission = function(cb) {
+      window.Notification.requestPermission(function() {
+        if (cb)
+           cb(window.Notification.permission);
+      });
+    }
+    requestPermission()
+  </script>
+</head>
+
+<body>
+  Desktop Notification test
+</body>
+
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/prompt.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/prompt.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/prompt.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/prompt.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,13 @@
+<!doctype html>
+<html>
+<head>
+<script>
+document.title = prompt("Please, reverse the default value", "Hello Qt");
+if (prompt("REJECT") !== null) {
+    document.title = "FAIL";
+}
+</script>
+</head>
+<body>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/qrctest.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/qrctest.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/qrctest.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/qrctest.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<html>
+<head><title>Loaded from qrc.</title></head>
+<body>
+Hello. I was loaded from a qrc file. Amazing.
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/redirect.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/redirect.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/redirect.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/redirect.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,8 @@
+<!doctype html>
+<html>
+<head>
+<meta http-equiv="refresh" content="2; url=test1.html"
+</head>
+<body>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/select.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/select.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/select.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/select.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<html>
+<head>
+<title>No new selection was made</title>
+<script>
+function updateTitle(selectElement) {
+    var index = selectElement.selectedIndex;
+    document.title = selectElement.options[index].value;
+}
+</script>
+</head>
+<body>
+<select onchange="updateTitle(this)">
+<option value="__open__" >Open</option>
+<option value="__closed__" >Closed</option>
+<option value="__all__" >All</option>
+</select>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/selectwithsize.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/selectwithsize.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/selectwithsize.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/selectwithsize.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<html>
+<head>
+<title>No new selection was made</title>
+<script>
+function updateTitle(selectElement) {
+    var index = selectElement.selectedIndex;
+    document.title = selectElement.options[index].value;
+}
+</script>
+</head>
+<body>
+<select size=2 onchange="updateTitle(this)">
+<option value="__open__" >Open</option>
+<option value="__closed__" >Closed</option>
+<option value="__all__" >All</option>
+</select>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/singlefileupload.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/singlefileupload.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/singlefileupload.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/singlefileupload.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,11 @@
+<html>
+<head>
+<meta name="viewport" initial-scale=1">
+<title> Single File Upload </title>
+<script src = "./titleupdate.js">
+</script>
+
+<body>
+<input type="file" name="file" id="upfile" onchange="updateTitle()"/>
+</body>
+</html>
Binary files qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/small-favicon.png and qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/small-favicon.png differ
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test1.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test1.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test1.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test1.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<html>
+<head><title>Test page 1</title></head>
+<body>
+Hello.
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test2.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test2.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test2.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test2.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<html>
+<head><title>Test page with huge link area</title></head>
+<body>
+<a title="A title" href="test1.html"><img width=200 height=200></a>
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test3.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test3.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test3.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test3.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,18 @@
+<html>
+<head>
+<title>Test page 3</title>
+</head>
+<script type="text/javascript">
+function kickOffTitleChange()
+{
+    var t = setTimeout("changeTitle('New Title')",3000);
+}
+function changeTitle(title)
+{
+    document.title = title;
+}
+</script>
+<body onload="kickOffTitleChange()">
+Hello.
+</body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test4.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test4.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test4.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test4.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,118 @@
+<html>
+    <head>
+        <title>Long Page To Scroll</title>
+        <style>
+            #content {
+                 margin: auto;
+                 width:  100%;
+                 background: #eeeeee;
+                 font-size: 50px;
+            }
+        </style>
+        <meta name="viewport" content="initial-scale=2.0"/>
+    </head>
+    <body>
+        <div id="content">
+            bla00<br/>
+            bla01<br/>
+            bla02<br/>
+            bla03<br/>
+            bla04<br/>
+            bla05<br/>
+            bla06<br/>
+            bla07<br/>
+            bla08<br/>
+            bla09<br/>
+            bla10<br/>
+            bla11<br/>
+            bla12<br/>
+            bla13<br/>
+            bla14<br/>
+            bla15<br/>
+            bla16<br/>
+            bla17<br/>
+            bla18<br/>
+            bla19<br/>
+            bla20<br/>
+            bla21<br/>
+            bla22<br/>
+            bla23<br/>
+            bla24<br/>
+            bla25<br/>
+            bla26<br/>
+            bla27<br/>
+            bla28<br/>
+            bla29<br/>
+            bla30<br/>
+            bla31<br/>
+            bla32<br/>
+            bla33<br/>
+            bla34<br/>
+            bla35<br/>
+            bla36<br/>
+            bla37<br/>
+            bla38<br/>
+            bla39<br/>
+            bla40<br/>
+            bla41<br/>
+            bla42<br/>
+            bla43<br/>
+            bla44<br/>
+            bla45<br/>
+            bla46<br/>
+            bla47<br/>
+            bla48<br/>
+            bla49<br/>
+            bla50<br/>
+            bla51<br/>
+            bla52<br/>
+            bla53<br/>
+            bla54<br/>
+            bla55<br/>
+            bla56<br/>
+            bla57<br/>
+            bla58<br/>
+            bla59<br/>
+            bla60<br/>
+            bla61<br/>
+            bla62<br/>
+            bla63<br/>
+            bla64<br/>
+            bla65<br/>
+            bla66<br/>
+            bla67<br/>
+            bla68<br/>
+            bla69<br/>
+            bla70<br/>
+            bla71<br/>
+            bla72<br/>
+            bla73<br/>
+            bla74<br/>
+            bla75<br/>
+            bla76<br/>
+            bla77<br/>
+            bla78<br/>
+            bla79<br/>
+            bla80<br/>
+            bla81<br/>
+            bla82<br/>
+            bla83<br/>
+            bla84<br/>
+            bla85<br/>
+            bla86<br/>
+            bla87<br/>
+            bla88<br/>
+            bla89<br/>
+            bla90<br/>
+            bla91<br/>
+            bla92<br/>
+            bla93<br/>
+            bla94<br/>
+            bla95<br/>
+            bla96<br/>
+            bla97<br/>
+            bla98<br/>
+            bla99<br/>
+        </div>
+    </body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test5.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test5.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/test5.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/test5.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,10 @@
+<html>
+  <head>
+    <title>Local page with viewport meta tag: width=device-width</title>
+    <meta name="viewport" content="width=device-width"/>
+  </head>
+  <body>
+    <style type="text/css">body {width: 960px; height: 1440px; margin: 0; padding: 0;}</style>
+    <div>blah</div>
+  </body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/TestWebView.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/TestWebView.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/TestWebView.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/TestWebView.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,51 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+
+WebView {
+    property var loadStatus: null
+    property var viewportReady: false
+
+    function waitForLoadSucceeded() {
+        var success = _waitFor(function() { return loadStatus == WebView.LoadSucceededStatus })
+        loadStatus = null
+        return success
+    }
+    function waitForViewportReady() {
+        // Note: You need to have "when: windowShown" in your TestCase for this to work.
+        // The viewport is locked until the first frame is rendered, and the rendering isn't
+        // activated until the WebView is visible in a mapped QQuickView.
+        return _waitFor(function() { return viewportReady })
+    }
+    function waitForLoadFailed() {
+        var failure = _waitFor(function() { return loadStatus == WebView.LoadFailedStatus })
+        loadStatus = null
+        return failure
+    }
+    function waitForLoadStopped() {
+        var stop = _waitFor(function() { return loadStatus == WebView.LoadStoppedStatus })
+        loadStatus = null
+        return stop
+    }
+    function _waitFor(predicate) {
+        var timeout = 5000
+        var i = 0
+        while (i < timeout && !predicate()) {
+            testResult.wait(50)
+            i += 50
+        }
+        return predicate()
+    }
+
+    TestResult { id: testResult }
+
+    experimental.onLoadVisuallyCommitted: viewportReady = true
+    onLoadingChanged: {
+        loadStatus = loadRequest.status
+        if (loadRequest.status == WebView.LoadStartedStatus)
+            viewportReady = false
+    }
+
+}
+
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/titleupdate.js qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/titleupdate.js
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/titleupdate.js	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/titleupdate.js	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,15 @@
+function updateTitle()
+{
+    var inp = document.getElementById("upfile");
+    var allfiles = new String("");
+    var name = new String("");
+    for (var i = 0; i < inp.files.length; ++i)
+    {
+        name = inp.files.item(i).name;
+        if (allfiles.length == 0)
+            allfiles = name;
+        else
+            allfiles = allfiles + "," + name;
+    }
+    document.title = allfiles;
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/webchannel.html qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/webchannel.html
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/common/webchannel.html	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/common/webchannel.html	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,21 @@
+<!DOCTYPE html>
+<html>
+    <head>
+        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+        <script type="text/javascript" src="qrc:///qtwebchannel/qwebchannel.js"></script>
+        <script type="text/javascript">
+            //BEGIN SETUP
+            var channel = new QWebChannel(navigator.qtWebChannelTransport, function(channel) {
+                window.testObject = channel.objects.testObject;
+                testObject.runTest.connect(function(foo) {
+                    testObject.foo = foo;
+                    testObject.bar(foo);
+                });
+                testObject.clientInitialized(testObject.foo);
+            });
+            //END SETUP
+        </script>
+    </head>
+    <body>
+    </body>
+</html>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/DesktopBehavior.pro qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/DesktopBehavior.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/DesktopBehavior.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/DesktopBehavior.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,18 @@
+include(../../tests.pri)
+SOURCES += ../tst_qmltests.cpp
+TARGET = tst_qmltests_DesktopBehavior
+OBJECTS_DIR = .obj_DesktopBehavior
+
+QT += webkit-private
+CONFIG += testcase
+
+QT += qmltest
+
+DEFINES += DISABLE_FLICKABLE_VIEWPORT=1
+# Test the QML files under DesktopBehavior in the source repository.
+DEFINES += QUICK_TEST_SOURCE_DIR=\"\\\"$$PWD\\\"\"
+DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
+
+OTHER_FILES += \
+    *.qml \
+    ../common/*
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_linkHovered.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_linkHovered.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_linkHovered.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_linkHovered.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,80 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 200
+    height: 400
+    focus: true
+
+    property string lastUrl
+    property string lastTitle
+
+    SignalSpy {
+        id: spy
+        target: webView
+        signalName: "linkHovered"
+    }
+
+    onLinkHovered: {
+        webView.lastUrl = hoveredUrl
+        webView.lastTitle = hoveredTitle
+    }
+
+    TestCase {
+        name: "DesktopWebViewLinkHovered"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            webView.lastUrl = ""
+            webView.lastTitle = ""
+            spy.clear()
+        }
+
+        function test_linkHovered() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/test2.html")
+            verify(webView.waitForLoadSucceeded())
+            mouseMove(webView, 100, 100)
+            spy.wait()
+            compare(spy.count, 1)
+            compare(webView.lastUrl, Qt.resolvedUrl("../common/test1.html"))
+            compare(webView.lastTitle, "A title")
+            mouseMove(webView, 100, 300)
+            spy.wait()
+            compare(spy.count, 2)
+            compare(webView.lastUrl, "")
+            compare(webView.lastTitle, "")
+        }
+
+        function test_linkHoveredDoesntEmitRepeated() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/test2.html")
+            verify(webView.waitForLoadSucceeded())
+
+            for (var i = 0; i < 100; i += 10)
+                mouseMove(webView, 100, 100 + i)
+
+            spy.wait()
+            compare(spy.count, 1)
+            compare(webView.lastUrl, Qt.resolvedUrl("../common/test1.html"))
+
+            for (var i = 0; i < 100; i += 10)
+                mouseMove(webView, 100, 300 + i)
+
+            spy.wait()
+            compare(spy.count, 2)
+            compare(webView.lastUrl, "")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_loadHtml.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_loadHtml.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_loadHtml.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_loadHtml.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,53 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 200
+    height: 400
+    focus: true
+
+    property string lastUrl
+
+    SignalSpy {
+        id: linkHoveredSpy
+        target: webView
+        signalName: "linkHovered"
+    }
+
+    onLinkHovered: {
+        webView.lastUrl = hoveredUrl
+    }
+
+    TestCase {
+        name: "DesktopWebViewLoadHtml"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            webView.lastUrl = ""
+            linkHoveredSpy.clear()
+        }
+
+        function test_baseUrlAfterLoadHtml() {
+            linkHoveredSpy.clear()
+            compare(linkHoveredSpy.count, 0)
+            webView.loadHtml("<html><head><title>Test page with huge link area</title></head><body><a title=\"A title\" href=\"test1.html\"><img width=200 height=200></a></body></html>", "http://www.example.foo.com")
+            verify(webView.waitForLoadSucceeded())
+            compare("http://www.example.foo.com/", webView.url)
+            mouseMove(webView, 100, 100)
+            linkHoveredSpy.wait()
+            compare(linkHoveredSpy.count, 1)
+            compare(webView.lastUrl, "http://www.example.foo.com/test1.html")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_navigationRequested.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_navigationRequested.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/DesktopBehavior/tst_navigationRequested.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/DesktopBehavior/tst_navigationRequested.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,116 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+Item {
+    property int expectedLength: 0
+    property int totalBytes: 0
+    property bool shouldDownload: false
+    property url beginUrl: Qt.resolvedUrl("../common/test2.html")
+    property url endUrl: Qt.resolvedUrl("../common/test1.html")
+
+    TestWebView {
+        id: webView
+        width: 200
+        height: 200
+
+        signal downloadFinished()
+
+        onNavigationRequested: {
+            if (shouldDownload)
+                request.action = WebViewExperimental.DownloadRequest
+            else if (request.mouseButton == Qt.MiddleButton && request.keyboardModifiers & Qt.ControlModifier) {
+                otherWebView.url = request.url
+                request.action = WebView.IgnoreRequest
+            }
+        }
+
+        experimental.onDownloadRequested: {
+            download.target = downloadItem
+            expectedLength = downloadItem.expectedContentLength
+            downloadItem.destinationPath = downloadItem.suggestedFilename
+            downloadItem.start()
+        }
+
+        Connections {
+            id: download
+            ignoreUnknownSignals: true
+            onSucceeded: {
+                totalBytes = download.target.totalBytesReceived
+                webView.downloadFinished()
+            }
+        }
+    }
+
+    TestWebView {
+        id: otherWebView
+    }
+
+    SignalSpy {
+        id: downloadSpy
+        target: webView.experimental
+        signalName: "downloadRequested"
+    }
+
+    SignalSpy {
+        id: downloadFinishedSpy
+        target: webView
+        signalName: "downloadFinished"
+    }
+
+    TestCase {
+        name: "DesktopWebViewNavigationRequested"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            downloadSpy.clear()
+            downloadFinishedSpy.clear()
+            shouldDownload = false
+        }
+
+        function test_usePolicy() {
+            webView.url = beginUrl
+            verify(webView.waitForLoadSucceeded())
+            mouseClick(webView, 100, 100, Qt.LeftButton)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Test page 1")
+            compare(webView.url, endUrl)
+        }
+
+        function test_ignorePolicy() {
+            webView.url = beginUrl
+            verify(webView.waitForLoadSucceeded())
+            mouseClick(webView, 100, 100, Qt.MiddleButton, Qt.ControlModifier)
+            verify(otherWebView.waitForLoadSucceeded())
+            verify(webView.loadStatus == null)
+            compare(webView.url, beginUrl)
+            compare(otherWebView.title, "Test page 1")
+            compare(otherWebView.url, endUrl)
+        }
+
+        function test_downloadPolicy() {
+            webView.url = beginUrl
+            verify(webView.waitForLoadSucceeded())
+            downloadSpy.clear()
+            downloadFinishedSpy.clear()
+            expectedLength = 0
+            shouldDownload = true
+            mouseClick(webView, 100, 100, Qt.LeftButton)
+            downloadSpy.wait()
+            compare(downloadSpy.count, 1)
+            downloadFinishedSpy.wait()
+            compare(downloadFinishedSpy.count, 1)
+            compare(totalBytes, expectedLength)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/qmltests.pro qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/qmltests.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/qmltests.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/qmltests.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,3 @@
+TEMPLATE = subdirs
+
+SUBDIRS += DesktopBehavior WebView
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/resources.qrc qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/resources.qrc
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/resources.qrc	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/resources.qrc	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,6 @@
+<RCC>
+    <qresource prefix="/">
+        <file>common/change-document-title.js</file>
+        <file>common/qrctest.html</file>
+    </qresource>
+</RCC>
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/tst_qmltests.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/tst_qmltests.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/tst_qmltests.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/tst_qmltests.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,48 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "../bytearraytestdata.h"
+#include "../util.h"
+
+#include "private/qquickwebview_p.h"
+#include <QVarLengthArray>
+#include <QtQuickTest/quicktest.h>
+
+int main(int argc, char** argv)
+{
+    QVarLengthArray<char*, 8> arguments;
+    for (int i = 0; i < argc; ++i)
+        arguments.append(argv[i]);
+
+    arguments.append(const_cast<char*>("-import"));
+    arguments.append(const_cast<char*>(IMPORT_DIR));
+
+    argc = arguments.count();
+    argv = arguments.data();
+
+    suppressDebugOutput();
+    addQtWebProcessToPath();
+
+    qmlRegisterType<ByteArrayTestData>("Test", 1, 0, "ByteArrayTestData");
+
+#ifdef DISABLE_FLICKABLE_VIEWPORT
+    QQuickWebViewExperimental::setFlickableViewportEnabled(false);
+#endif
+    return quick_test_main(argc, argv, "qmltests", QUICK_TEST_SOURCE_DIR);
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/BLACKLIST qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/BLACKLIST
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/BLACKLIST	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/BLACKLIST	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,4 @@
+[WebViewLoadFavIcon::test_favIconLoad]
+ci *
+[WebViewLoadFavIcon::test_favIconLoadEncodedUrl]
+ci *
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_applicationScheme.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_applicationScheme.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_applicationScheme.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_applicationScheme.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,129 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import Test 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    experimental {
+        urlSchemeDelegates: [
+            UrlSchemeDelegate {
+                scheme: "applicationScheme"
+                onReceivedRequest: {
+                    reply.data = "<html><head><title>Test Application Scheme</title></head><body>A test page.</body></html>"
+                    reply.send()
+                }
+            },
+            UrlSchemeDelegate {
+                scheme: "scheme1"
+                onReceivedRequest: {
+                    reply.data = "<html><head><title>Scheme1 Reply</title></head><body>A test page.</body></html>"
+                    reply.send()
+                }
+            },
+            UrlSchemeDelegate {
+                scheme: "scheme2"
+                onReceivedRequest: {
+                    reply.data = "<html><head><title>Scheme2 Reply</title></head><body>A test page.</body></html>"
+                    reply.send()
+                }
+            },
+            UrlSchemeDelegate {
+                scheme: "scheme3"
+                onReceivedRequest: {
+                    if (request.url == "scheme3://url1")
+                        reply.data = "<html><head><title>Scheme3 Reply1</title></head><body>A test page.</body></html>"
+                    else if (request.url == "scheme3://url2")
+                        reply.data = "<html><head><title>Scheme3 Reply2</title></head><body>A test page.</body></html>"
+                    else
+                        reply.data = "<html><head><title>Should not happen</title></head><body>A test page.</body></html>"
+                    reply.send()
+                }
+            },
+            UrlSchemeDelegate {
+                scheme: "schemeCharset"
+                onReceivedRequest: {
+                    if (request.url == "schemecharset://latin1") {
+                        reply.data = byteArrayHelper.latin1Data
+                        reply.contentType = "text/html; charset=iso-8859-1"
+                    } else if (request.url == "schemecharset://utf-8") {
+                        reply.data = byteArrayHelper.utf8Data
+                        reply.contentType = "text/html; charset=utf-8"
+                    }
+                    reply.send()
+                }
+            }
+
+        ]
+    }
+
+    ByteArrayTestData {
+        id: byteArrayHelper
+    }
+
+    TestCase {
+        name: "WebViewApplicationSchemes"
+
+        function test_applicationScheme() {
+            skip("QTFIXME: application schemes are not supported yet")
+            var testUrl = "applicationScheme://something"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Test Application Scheme")
+        }
+
+        function test_multipleSchemes() {
+            skip("QTFIXME: application schemes are not supported yet")
+            // Test if we receive the right reply when defining multiple schemes.
+            var testUrl = "scheme2://some-url-string"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Scheme2 Reply")
+
+            testUrl = "scheme1://some-url-string"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Scheme1 Reply")
+        }
+
+        function test_multipleUrlsForScheme() {
+            skip("QTFIXME: application schemes are not supported yet")
+            var testUrl = "scheme3://url1"
+            webView.url = testUrl            
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Scheme3 Reply1")
+
+            testUrl = "scheme3://url2"
+            webView.url = testUrl            
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Scheme3 Reply2")
+
+        }
+
+        function test_charsets() {            
+            skip("QTFIXME: application schemes are not supported yet")
+            var testUrl = "schemeCharset://latin1"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "title with copyright ©")
+
+            testUrl = "schemeCharset://utf-8"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "title with copyright ©")
+        }
+
+        function test_qrcScheme() {
+            var testUrl = "qrc:///common/qrctest.html"
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Loaded from qrc.")
+
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_colorChooser.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_colorChooser.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_colorChooser.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_colorChooser.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,103 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    width: 400
+    height: 400
+
+    property bool featureEnabled
+
+    property string selectedColor
+    property bool shouldReject
+    property bool shouldAcceptCurrent
+
+    experimental.colorChooser: Item {
+        Component.onCompleted: {
+            if (WebView.view.shouldReject)
+                model.reject()
+            else if (WebView.view.shouldAcceptCurrent)
+                model.accept(model.currentColor)
+            else
+                model.accept(WebView.view.selectedColor)
+        }
+    }
+
+    function openColorChooser() {
+        webView.experimental.test.touchTap(webView, 25, 25)
+    }
+
+    SignalSpy {
+        id: titleSpy
+        target: webView
+        signalName: "titleChanged"
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewColorChooser"
+        when: windowShown
+
+        function init() {
+            webView.url = Qt.resolvedUrl("../common/colorChooser.html")
+            verify(webView.waitForLoadSucceeded())
+
+            while (webView.title != "Feature enabled" && webView.title != "Feature disabled")
+                wait(0)
+
+            webView.featureEnabled = (webView.title == "Feature enabled")
+            if (!webView.featureEnabled)
+                return
+
+            titleSpy.clear()
+
+            webView.shouldReject = false
+            webView.shouldAcceptCurrent = false
+        }
+
+        function cleanup() {
+            titleSpy.clear()
+        }
+
+        function test_accept() {
+            if (!webView.featureEnabled)
+                return
+
+            // The title changes here twice: first
+            // when we click, it changes from "Feature enabled"
+            // to the sanitized color and next, when we
+            // pick a new color with the chooser.
+            webView.selectedColor = "#020020"
+            openColorChooser()
+            while (titleSpy.count != 2)
+                wait(0)
+            compare(webView.title, "#020020")
+        }
+
+        function test_currentValue() {
+            if (!webView.featureEnabled)
+                return
+
+            webView.shouldAcceptCurrent = true
+            openColorChooser()
+            titleSpy.wait()
+            compare(titleSpy.count, 1)
+            compare(webView.title, "#000000")
+        }
+
+        function test_reject() {
+            if (!webView.featureEnabled)
+                return
+
+            webView.shouldReject = true;
+            openColorChooser()
+            titleSpy.wait()
+            compare(titleSpy.count, 1)
+            compare(webView.title, "#000000")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_doubleTapToZoom.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_doubleTapToZoom.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_doubleTapToZoom.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_doubleTapToZoom.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,228 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import Test 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 320
+        height: 240
+
+        property variant result
+
+        property variant content: "data:text/html," +
+            "<head>" +
+            "    <meta name='viewport' content='width=device-width'>" +
+            "</head>" +
+            "<body>" +
+            "    <div id='target' " +
+            "         style='position:absolute; left:20; top:20; width:220; height:80;'>" +
+            "    </div>" +
+            "    <div id='smalltarget' " +
+            "         style='position:absolute; left:20; top:120; width:140; height:80;'>" +
+            "    </div>" +
+            "</body>"
+
+        signal resultReceived
+    }
+
+    SignalSpy {
+        id: resultSpy
+        target: webView
+        signalName: "resultReceived"
+    }
+
+    SignalSpy {
+        id: scaleSpy
+        target: webView.experimental.test
+        signalName: "contentsScaleCommitted"
+    }
+
+    TestCase {
+        name: "DoubleTapToZoom"
+        when: windowShown
+
+        property variant test: webView.experimental.test
+
+        function init() {
+            resultSpy.clear()
+            scaleSpy.clear()
+        }
+
+        function windowSize() {
+            resultSpy.clear();
+            var result;
+
+             webView.experimental.evaluateJavaScript(
+                "window.innerWidth + 'x' + window.innerHeight",
+                function(size) { webView.resultReceived(); result = size });
+            resultSpy.wait();
+            return result;
+        }
+
+        function elementRect(id) {
+            resultSpy.clear();
+            var result;
+
+             webView.experimental.evaluateJavaScript(
+                "JSON.stringify(document.getElementById('" + id + "').getBoundingClientRect());",
+                function(rect) { webView.resultReceived(); result = JSON.parse(rect); });
+            resultSpy.wait();
+            return result;
+        }
+
+        function doubleTapAtPoint(x, y) {
+            scaleSpy.clear()
+            test.touchDoubleTap(webView, x, y)
+            scaleSpy.wait()
+        }
+
+        function test_basic_zoomInAndBack() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(windowSize(), "320x240")
+
+            compare(test.contentsScale, 1.0)
+
+            var rect = elementRect("target");
+            var newScale = webView.width / (rect.width + 2 * 10) // inflated by 10px
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, newScale)
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_double_zoomInAndBack() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(windowSize(), "320x240")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var smalltarget = elementRect("smalltarget");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 160)
+
+            compare(test.contentsScale, smallTargetScale)
+
+            // Zoom out by double clicking first the small target and then the large target.
+            doubleTapAtPoint(100, 120)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_double_zoomInAndBack2() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(windowSize(), "320x240")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var smalltarget = elementRect("smalltarget");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 160)
+
+            compare(test.contentsScale, smallTargetScale)
+
+            // Zoom out by double clicking the small target twice.
+            doubleTapAtPoint(100, 120)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 160)
+
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_double_zoomInOutAndBack() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(windowSize(), "320x240")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var smalltarget = elementRect("smalltarget");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 160)
+
+            compare(test.contentsScale, smallTargetScale)
+
+            // Zoom out by double clicking the large target twice.
+            doubleTapAtPoint(100, 40)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_double_zoomInOutAndBack2() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(windowSize(), "320x240")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var smalltarget = elementRect("smalltarget");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+            var smallTargetScale = webView.width / (smalltarget.width + 2 * 10) // inflated by 10px
+
+            // Zoom in directly to the small target, and then out over the large target.
+            doubleTapAtPoint(100, 140)
+
+            compare(test.contentsScale, smallTargetScale)
+
+            doubleTapAtPoint(100, 20)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, 1.0)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_download.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_download.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_download.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_download.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,86 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+
+WebView {
+    id: webView
+    width: 200
+    height: 200
+
+    property int expectedLength: 0
+    property int totalBytes: 0
+
+    signal downloadFinished()
+
+    SignalSpy {
+        id: spy
+        target: experimental
+        signalName: "downloadRequested"
+    }
+
+    SignalSpy {
+        id: downloadFinishedSpy
+        target: webView
+        signalName: "downloadFinished"
+    }
+
+    experimental.onDownloadRequested: {
+        download.target = downloadItem
+        expectedLength = downloadItem.expectedContentLength
+        downloadItem.destinationPath = downloadItem.suggestedFilename
+        downloadItem.start()
+    }
+
+    Connections {
+        id: download
+        ignoreUnknownSignals: true
+        onSucceeded: {
+            totalBytes = download.target.totalBytesReceived
+            webView.downloadFinished()
+        }
+    }
+
+    TestCase {
+        name: "WebViewDownload"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            spy.clear()
+            downloadFinishedSpy.clear()
+            expectedLength = 0
+        }
+
+        function test_downloadRequest() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/download.zip")
+            spy.wait()
+            compare(spy.count, 1)
+        }
+
+        function test_expectedLength() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/download.zip")
+            spy.wait()
+            compare(spy.count, 1)
+            compare(expectedLength, 325)
+        }
+
+        function test_succeeded() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/download.zip")
+            spy.wait()
+            compare(spy.count, 1)
+            downloadFinishedSpy.wait()
+            compare(totalBytes, expectedLength)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_evaluateJavaScript.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_evaluateJavaScript.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_evaluateJavaScript.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_evaluateJavaScript.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,226 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        property variant lastMessage
+        property variant lastResult
+
+        experimental.preferences.navigatorQtObjectEnabled: true
+        experimental.onMessageReceived: {
+            lastMessage = message
+        }
+    }
+
+    SignalSpy {
+        id: messageSpy
+        target: webView.experimental
+        signalName: "messageReceived"
+    }
+
+    SignalSpy {
+        id: resultSpy
+        target: webView
+        signalName: "lastResultChanged"
+    }
+
+    TestCase {
+        name: "JavaScriptEvaluation"
+
+        function init() {
+            messageSpy.clear()
+            webView.lastMessage = null
+
+            resultSpy.clear()
+            webView.lastResult = null
+        }
+
+        function test_basic() {
+            messageSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "navigator.qt.onmessage = function(message) {" +
+                "    var result = message.data.split('');" +
+                "    result = result.reverse().join('');" +
+                "    navigator.qt.postMessage(result);" +
+                "}");
+
+            webView.experimental.postMessage("DLROW OLLEH");
+            messageSpy.wait()
+            compare(webView.lastMessage.data, "HELLO WORLD")
+        }
+
+        function test_propertyObjectWithChild() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() {" +
+                "    var parent = new Object;" +
+                "    var child = new Object;" +
+                "    parent['level'] = '1';" +
+                "    child['level'] = 2;" +
+                "    parent['child'] = child;" +
+                "    return parent;" +
+                "})()",
+
+                function(result) {
+                    webView.lastResult = result
+                });
+
+            resultSpy.wait()
+
+            compare(JSON.stringify(webView.lastResult),
+                '{"level":"1","child":{"level":2}}')
+        }
+
+        function test_undefinedValue() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "undefined")
+            compare(webView.lastResult, undefined)
+        }
+
+        function test_nullValue() {
+            resultSpy.clear()
+
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { return { value: null } })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "object")
+            verify(typeof webView.lastResult.value === "object")
+            compare(webView.lastResult.value, null)
+        }
+
+        function test_booleanValue() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { return true })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "boolean")
+            compare(webView.lastResult, true)
+        }
+
+        function test_stringValue() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { return 'dongs' })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "string")
+            compare(webView.lastResult, "dongs")
+        }
+
+        function test_integerValue() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { return 1337 })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "number")
+            compare(webView.lastResult, 1337)
+        }
+
+        function test_floatValue() {
+            resultSpy.clear()
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() { return 13.37 })()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            verify(typeof webView.lastResult === "number")
+            compare(webView.lastResult, 13.37)
+        }
+
+        function test_queryTitle() {
+            resultSpy.clear()
+            var testUrl = Qt.resolvedUrl("../common/evaluatejavascript.html")
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() {" +
+                "   return document.title" +
+                "})()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            compare(webView.lastResult, "Evaluate JavaScript")
+        }
+
+        function test_queryById() {
+            resultSpy.clear()
+            var testUrl = Qt.resolvedUrl("../common/evaluatejavascript.html")
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+
+            webView.experimental.evaluateJavaScript(
+                "(function() {" +
+                "   return document.getElementById('text').innerHTML" +
+                "})()",
+
+                function(result) {
+                    webView.lastResult = result
+                })
+
+            resultSpy.wait()
+            compare(webView.lastResult, "Hello from the WebProcess :-)")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_favIconLoad.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_favIconLoad.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_favIconLoad.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_favIconLoad.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,59 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    SignalSpy {
+        id: spy
+        target: webView
+        signalName: "iconChanged"
+    }
+
+    Image {
+        id: favicon
+        asynchronous: true
+        source: webView.icon
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewLoadFavIcon"
+        when: windowShown
+
+        function init() {
+            if (webView.icon != '') {
+                // If this is not the first test, then load a blank page without favicon, restoring the initial state.
+                webView.url = 'about:blank'
+                verify(webView.waitForLoadSucceeded())
+                spy.wait()
+            }
+            spy.clear()
+        }
+
+        function test_favIconLoad() {
+            compare(spy.count, 0)
+            var url = Qt.resolvedUrl("../common/favicon.html")
+            webView.url = url
+            verify(webView.waitForLoadSucceeded())
+            spy.wait()
+            compare(spy.count, 1)
+            compare(favicon.width, 48)
+            compare(favicon.height, 48)
+        }
+
+        function test_favIconLoadEncodedUrl() {
+            compare(spy.count, 0)
+            var url = Qt.resolvedUrl("../common/favicon2.html?favicon=load should work with#whitespace!")
+            webView.url = url
+            verify(webView.waitForLoadSucceeded())
+            spy.wait()
+            compare(spy.count, 1)
+            compare(favicon.width, 16)
+            compare(favicon.height, 16)
+
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_findText.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_findText.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_findText.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_findText.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,145 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    property int matchCount: -1
+    property bool findFailed: false
+    function clear() {
+        textFoundSpy.clear()
+        findFailed = false
+        matchCount = -1
+    }
+
+    SignalSpy {
+        id: textFoundSpy
+        target: webView.experimental
+        signalName: "textFound"
+    }
+
+    experimental.onTextFound: {
+        webView.matchCount = matchCount
+        findFailed = matchCount == 0
+    }
+    TestCase {
+        name: "WebViewFindText"
+
+        function test_findText() {
+            var findFlags = WebViewExperimental.FindHighlightAllOccurrences |
+                              WebViewExperimental.FindCaseSensitively
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("Hello", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 1)
+        }
+        function test_findTextCaseInsensitive() {
+            var findFlags = 0
+
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("heLLo", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 1)
+        }
+        function test_findTextManyMatches() {
+            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test4.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("bla", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 100)
+        }
+        function test_findTextBackward() {
+            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test4.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 10)
+            for(var i=0; i < 9; i++) {
+                webView.experimental.findText("bla0", findFlags)
+                textFoundSpy.wait()
+            }
+            compare(textFoundSpy.count, 10)
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 11)
+            compare(findFailed, true)
+
+            webView.clear()
+            findFlags |= WebViewExperimental.FindBackward
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+        }
+        function test_findTextFailNoWrap() {
+            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test4.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 10)
+            for(var i=0; i < 9; i++) {
+                webView.experimental.findText("bla0", findFlags)
+                textFoundSpy.wait()
+            }
+            compare(textFoundSpy.count, 10)
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 11)
+            compare(findFailed, true)
+        }
+        function test_findTextWrap() {
+            var findFlags = WebViewExperimental.FindHighlightAllOccurrences
+            findFlags |= WebViewExperimental.FindWrapsAroundDocument
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test4.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("bla0", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(matchCount, 10)
+            for(var i=0; i < 19; i++) {
+                webView.experimental.findText("bla0", findFlags)
+                textFoundSpy.wait()
+            }
+            compare(textFoundSpy.count, 20)
+        }
+        function test_findTextFailCaseSensitive() {
+            var findFlags = WebViewExperimental.FindCaseSensitively
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("heLLo", findFlags)
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(findFailed, true)
+        }
+        function test_findTextNotFound() {
+            webView.clear()
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.findText("string-that-is-not-threre")
+            textFoundSpy.wait()
+            compare(textFoundSpy.count, 1)
+            compare(findFailed, true)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_fitToView.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_fitToView.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_fitToView.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_fitToView.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,133 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import Test 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 480
+        height: 720
+
+        property variant result
+
+        property variant content: "data:text/html," +
+            "<head>" +
+            "    <meta name='viewport' content='width=device-width'>" +
+            "</head>" +
+            "<body style='margin: 0px'>" +
+            "    <div id='target' style='display:none; width:960px; height:1440px;'></div>" +
+            "</body>"
+
+        signal resultReceived
+    }
+
+    SignalSpy {
+        id: resultSpy
+        target: webView
+        signalName: "resultReceived"
+    }
+
+    SignalSpy {
+        id: scaleSpy
+        target: webView.experimental.test
+        signalName: "contentsScaleCommitted"
+    }
+
+    TestCase {
+        name: "FitToView"
+        when: windowShown
+
+        property variant test: webView.experimental.test
+
+        function init() {
+            resultSpy.clear()
+            scaleSpy.clear()
+        }
+
+        function run(signalSpy, script) {
+            signalSpy.clear();
+            var result;
+             webView.experimental.evaluateJavaScript(
+                script, function(value) { webView.resultReceived(); result = value });
+            signalSpy.wait();
+            return result;
+        }
+
+        function documentSize() {
+            return run(resultSpy, "document.width + 'x' + document.height");
+        }
+
+        function setDisplay(id, value) {
+            // When changing to/from 'none' to 'block', this will result in a
+            // contentsScaleCommitted scale, even if it results in  the same
+            // scale, making it possible to check whether user interaction
+            // blocks fit-to-view or not.
+            run(scaleSpy, "document.getElementById('" + id + "').style.display = '" + value + "';");
+        }
+
+        function test_basic() {
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+            compare(documentSize(), "480x720")
+            compare(test.contentsScale, 1.0)
+
+            setDisplay("target", "block")
+            compare(documentSize(), "960x1440")
+            compare(test.contentsScale, 0.5)
+
+            // Add user interaction.
+            test.touchTap(webView, 10, 10)
+
+            // We are no longer within valid bounds after this change
+            // so we have to change our scale back to 1.0.
+            setDisplay("target", "none")
+            compare(documentSize(), "480x720")
+            compare(test.contentsScale, 1.0)
+
+            // We had user interaction, size should change but not scale.
+            setDisplay("target", "block")
+            compare(documentSize(), "960x1440")
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_localPageDeviceWidth() {
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.url = "../common/test5.html"
+            verify(webView.waitForLoadSucceeded())
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+            compare(test.contentsScale, 0.5)
+
+            // Add user interaction.
+            test.touchTap(webView, 10, 10)
+
+            webView.reload()
+            verify(webView.waitForLoadSucceeded())
+            // The page should still fit to view after a reload
+            compare(test.contentsScale, 0.5)
+        }
+
+        function test_localPageInitialScale() {
+            webView.url = "about:blank"
+            verify(webView.waitForLoadSucceeded())
+
+            webView.url = "../common/test4.html"
+            verify(webView.waitForLoadSucceeded())
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+            compare(test.contentsScale, 2.0)
+
+            // Add user interaction.
+            test.touchTap(webView, 10, 10)
+
+            webView.reload()
+            verify(webView.waitForLoadSucceeded())
+            compare(test.contentsScale, 2.0)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_geopermission.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_geopermission.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_geopermission.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_geopermission.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,54 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+
+WebView {
+    id: webView
+    width: 200
+    height: 200
+
+    property bool expectedPermission: false
+
+    SignalSpy {
+        id: spy
+        target: experimental
+        signalName: "permissionRequested"
+    }
+
+    experimental.onPermissionRequested: {
+        //Must be false by default
+        if (!permission.allow) {
+           permission.allow = true
+        } else
+           console.log("Fail: permission must be set to false")
+
+        if (permission.type == PermissionRequest.Geolocation) {
+            console.log("Permission is geotype")
+        }
+    }
+
+    TestCase {
+        name: "WebViewGeopermission"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            spy.clear()
+        }
+
+        function test_permissionRequest() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/geolocation.html")
+            spy.wait()
+            compare(spy.count, 1)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_itemSelector.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_itemSelector.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_itemSelector.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_itemSelector.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,117 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    width: 400
+    height: 400
+
+    property int initialSelection
+    property int finalSelection
+    property bool useAcceptDirectly
+    property bool selectorLoaded
+
+    experimental.itemSelector: Item {
+        Component.onCompleted: {
+            if (WebView.view.initialSelection != -1)
+                model.items.select(WebView.view.initialSelection)
+
+            if (WebView.view.finalSelection == -1)
+                model.reject()
+            else {
+                if (useAcceptDirectly) {
+                    model.accept(WebView.view.finalSelection)
+                } else {
+                    model.items.select(WebView.view.finalSelection)
+                    model.accept()
+                }
+            }
+
+            WebView.view.selectorLoaded = true
+        }
+    }
+
+    SignalSpy {
+        id: titleSpy
+        target: webView
+        signalName: "titleChanged"
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewItemSelector"
+        when: windowShown
+
+        function init() {
+            webView.initialSelection = -1
+            webView.finalSelection = -1
+            webView.useAcceptDirectly = false
+            webView.selectorLoaded = false
+            webView.url = Qt.resolvedUrl("../common/select.html")
+            verify(webView.waitForLoadSucceeded())
+            titleSpy.clear()
+        }
+
+        function openItemSelector() {
+            webView.experimental.test.touchTap(webView, 15, 15)
+        }
+
+        function test_accept() {
+            webView.finalSelection = 1
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "__closed__")
+        }
+
+        function test_acceptDirectly() {
+            webView.finalSelection = 1
+            webView.useAcceptDirectly = true
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "__closed__")
+        }
+
+        function test_selectFirstThenAccept() {
+            webView.initialSelection = 1
+            webView.finalSelection = 2
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "__all__")
+        }
+
+        function test_selectFirstThenAcceptDirectly() {
+            webView.initialSelection = 1
+            webView.finalSelection = 2
+            webView.useAcceptDirectly = true
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "__all__")
+        }
+
+        function test_reject() {
+            openItemSelector()
+            tryCompare(webView, "selectorLoaded", true)
+            compare(webView.title, "No new selection was made")
+        }
+
+        function test_selectFirstThenReject() {
+            webView.initialSelection = 1
+            webView.finalSelection = -1
+            openItemSelector()
+            tryCompare(webView, "selectorLoaded", true)
+            compare(webView.title, "No new selection was made")
+        }
+
+        function test_selectWithSize() {
+            webView.url = Qt.resolvedUrl("../common/selectwithsize.html")
+            verify(webView.waitForLoadSucceeded())
+            titleSpy.clear()
+
+            test_selectFirstThenAcceptDirectly()
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_javaScriptDialogs.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_javaScriptDialogs.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_javaScriptDialogs.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_javaScriptDialogs.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,103 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    property bool modelMessageEqualsMessage: false
+    property string messageFromAlertDialog: ""
+    property int confirmCount: 0
+    property int promptCount: 0
+
+    experimental {
+        alertDialog: Item {
+            Component.onCompleted: {
+                // Testing both attached property and id defined in the Component context.
+                WebView.view.messageFromAlertDialog = message
+                parent.modelMessageEqualsMessage = Boolean(model.message == message)
+                model.dismiss()
+            }
+        }
+
+        confirmDialog: Item {
+            Component.onCompleted: {
+                WebView.view.confirmCount += 1
+                if (message == "ACCEPT")
+                    model.accept()
+                else
+                    model.reject()
+            }
+        }
+
+        promptDialog: Item {
+            Component.onCompleted: {
+                WebView.view.promptCount += 1
+                if (message == "REJECT")
+                    model.reject()
+                else {
+                    var reversedDefaultValue = defaultValue.split("").reverse().join("")
+                    model.accept(reversedDefaultValue)
+                }
+            }
+        }
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewJavaScriptDialogs"
+
+        function init() {
+            webView.modelMessageEqualsMessage = false
+            webView.messageFromAlertDialog = ""
+            webView.confirmCount = 0
+            webView.promptCount = 0
+        }
+
+        function test_alert() {
+            webView.url = Qt.resolvedUrl("../common/alert.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.messageFromAlertDialog, "Hello Qt")
+            verify(webView.modelMessageEqualsMessage)
+        }
+
+        function test_alertWithoutDialog() {
+            webView.experimental.alertDialog = null
+            webView.url = Qt.resolvedUrl("../common/alert.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.messageFromAlertDialog, "")
+        }
+
+        function test_confirm() {
+            webView.url = Qt.resolvedUrl("../common/confirm.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.confirmCount, 2)
+            compare(webView.title, "ACCEPTED REJECTED")
+        }
+
+        function test_confirmWithoutDialog() {
+            webView.experimental.confirmDialog = null
+            webView.url = Qt.resolvedUrl("../common/confirm.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.confirmCount, 0)
+            compare(webView.title, "ACCEPTED ACCEPTED")
+        }
+
+        function test_prompt() {
+            webView.url = Qt.resolvedUrl("../common/prompt.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.promptCount, 2)
+            compare(webView.title, "tQ olleH")
+        }
+
+        function test_promptWithoutDialog() {
+            webView.experimental.promptDialog = null
+            webView.url = Qt.resolvedUrl("../common/prompt.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.promptCount, 0)
+            compare(webView.title, "FAIL")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadFail.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadFail.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadFail.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadFail.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,30 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    property variant testUrl
+
+    TestCase {
+        id: test
+        name: "WebViewLoadFail"
+        function test_fail() {
+            testUrl = Qt.resolvedUrl("file_that_does_not_exist.html")
+            webView.url = testUrl
+            verify(webView.waitForLoadFailed())
+        }
+    }
+
+    onLoadingChanged: {
+        if (loadRequest.status == WebView.LoadFailedStatus) {
+            test.compare(loadRequest.url, testUrl)
+            test.compare(loadRequest.errorCode, NetworkReply.ContentNotFoundError)
+            test.compare(loadRequest.errorDomain, WebView.NetworkErrorDomain)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadHtml.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadHtml.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadHtml.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadHtml.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,21 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 200
+    height: 400
+
+    TestCase {
+        name: "WebViewLoadHtml"
+
+        function test_loadProgressAfterLoadHtml() {
+            compare(webView.loadProgress, 0)
+            webView.loadHtml("<html><head><title>Test page 1</title></head><body>Hello.</body></html>")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.loadProgress, 100)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadProgress.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadProgress.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadProgress.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadProgress.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,22 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    TestCase {
+        name: "WebViewLoadProgress"
+
+        function test_loadProgress() {
+            compare(webView.loadProgress, 0)
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            compare(webView.loadProgress, 0)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.loadProgress, 100)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadProgressSignal.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadProgressSignal.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadProgressSignal.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadProgressSignal.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,33 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    SignalSpy {
+        id: spyProgress
+        target: webView
+        signalName: "loadProgressChanged"
+    }
+
+    TestCase {
+        name: "WebViewLoadProgressSignal"
+
+        function test_loadProgressSignal() {
+            compare(spyProgress.count, 0)
+            compare(webView.loadProgress, 0)
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            spyProgress.wait()
+            compare(true, webView.loadProgress > -1 && webView.loadProgress < 101)
+            if (webView.loadProgress > 0 && webView.loadProgress < 100) {
+                verify(webView.waitForLoadSucceeded())
+                spyProgress.wait()
+                compare(webView.loadProgress, 100)
+            }
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadUrl.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadUrl.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_loadUrl.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_loadUrl.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,142 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    property variant lastUrl
+    property bool watchProgress: false
+    property int numLoadStarted: 0
+    property int numLoadSucceeded: 0
+
+    focus: true
+
+    onLoadProgressChanged: {
+        if (watchProgress && webView.loadProgress != 100) {
+            watchProgress = false
+            url = ''
+        }
+    }
+
+    onLoadingChanged: {
+        if (loadRequest.status == WebView.LoadStartedStatus)
+            ++numLoadStarted
+        if (loadRequest.status == WebView.LoadSucceededStatus)
+            ++numLoadSucceeded
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewLoadUrl"
+        when: windowShown
+
+        function test_loadIgnoreEmptyUrl() {
+            var url = Qt.resolvedUrl("../common/test1.html")
+
+            webView.url = url
+            verify(webView.waitForLoadSucceeded())
+            compare(numLoadStarted, 1)
+            compare(numLoadSucceeded, 1)
+            compare(webView.url, url)
+
+            lastUrl = webView.url
+            webView.url = ''
+            wait(1000)
+            compare(numLoadStarted, 1)
+            compare(numLoadSucceeded, 1)
+            compare(webView.url, lastUrl)
+
+            webView.url = 'about:blank'
+            verify(webView.waitForLoadSucceeded())
+            compare(numLoadStarted, 2)
+            compare(numLoadSucceeded, 2)
+            compare(webView.url, 'about:blank')
+
+            // It shouldn't interrupt any ongoing load when an empty url is used.
+            watchProgress = true
+            webView.url = url
+            webView.waitForLoadSucceeded()
+            compare(numLoadStarted, 3)
+            compare(numLoadSucceeded, 3)
+            verify(!watchProgress)
+            compare(webView.url, url)
+        }
+
+        function test_urlProperty() {
+            var url = Qt.resolvedUrl("../common/test1.html")
+
+            webView.url = url
+            compare(webView.url, url)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, url)
+
+            var bogusSite = "http://www.somesitethatdoesnotexist.abc/"
+            webView.url = bogusSite
+            compare(webView.url, bogusSite)
+            verify(webView.waitForLoadFailed())
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+            compare(webView.url, bogusSite)
+
+            webView.url = "about:blank" // Reset from previous test
+            verify(webView.waitForLoadSucceeded())
+
+            var handleLoadFailed = function(loadRequest) {
+                if (loadRequest.status == WebView.LoadFailedStatus) {
+                    compare(webView.url, bogusSite)
+                    compare(loadRequest.url, bogusSite)
+                    webView.loadHtml("load failed", bogusSite, bogusSite)
+                }
+            }
+            webView.loadingChanged.connect(handleLoadFailed)
+            webView.url = bogusSite
+            compare(webView.url, bogusSite)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, bogusSite)
+            webView.loadingChanged.disconnect(handleLoadFailed)
+
+            var dataUrl = "data:text/html,foo"
+            webView.url = dataUrl
+            compare(webView.url, dataUrl)
+
+            var redirectUrl = Qt.resolvedUrl("../common/redirect.html")
+            webView.url = redirectUrl
+            compare(webView.url, redirectUrl)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, redirectUrl)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, url)
+
+            var linkUrl = Qt.resolvedUrl("../common/link.html")
+            webView.url = linkUrl
+            compare(webView.url, linkUrl)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, linkUrl)
+            webView.loadingChanged.connect(function(loadRequest) {
+                compare(webView.url, loadRequest.url)
+                compare(webView.url, url)
+            })
+            webView.forceActiveFocus()
+            keyPress(Qt.Key_Return) // Link is focused
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, url)
+        }
+
+        function test_stopStatus() {
+            var url = Qt.resolvedUrl("../common/test1.html")
+
+            webView.loadingChanged.connect(function(loadRequest) {
+                if (loadRequest.status == WebView.LoadStopStatus) {
+                    compare(webView.url, url)
+                    compare(loadRequest.url, url)
+                }
+            })
+
+            webView.url = url
+            compare(webView.url, url)
+            webView.stop()
+            verify(webView.waitForLoadStopped())
+            compare(webView.url, url)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_messaging.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_messaging.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_messaging.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_messaging.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,89 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        property variant lastMessage
+        experimental.preferences.navigatorQtObjectEnabled: true
+        experimental.onMessageReceived: {
+            lastMessage = message
+        }
+    }
+
+    TestWebView {
+        id: otherWebView
+        property variant lastMessage
+        experimental.preferences.navigatorQtObjectEnabled: true
+        experimental.onMessageReceived: {
+            lastMessage = message
+        }
+    }
+
+    TestWebView {
+        id: disabledWebView
+        property bool receivedMessage
+        experimental.preferences.navigatorQtObjectEnabled: false
+        experimental.onMessageReceived: {
+            receivedMessage = true
+        }
+    }
+
+    SignalSpy {
+        id: messageSpy
+        target: webView.experimental
+        signalName: "messageReceived"
+    }
+
+    SignalSpy {
+        id: otherMessageSpy
+        target: otherWebView.experimental
+        signalName: "messageReceived"
+    }
+
+    TestCase {
+        name: "WebViewMessaging"
+        property url testUrl: Qt.resolvedUrl("../common/messaging.html")
+
+        function init() {
+            messageSpy.clear()
+            webView.lastMessage = null
+            otherMessageSpy.clear()
+            otherWebView.lastMessage = null
+        }
+
+        function test_basic() {
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            webView.experimental.postMessage("HELLO")
+            messageSpy.wait()
+            compare(webView.lastMessage.data, "OLLEH")
+            compare(webView.lastMessage.origin.toString(), testUrl.toString())
+        }
+
+        function test_twoWebViews() {
+            webView.url = testUrl
+            otherWebView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            verify(otherWebView.waitForLoadSucceeded())
+            webView.experimental.postMessage("FIRST")
+            otherWebView.experimental.postMessage("SECOND")
+            messageSpy.wait()
+            otherMessageSpy.wait()
+            compare(webView.lastMessage.data, "TSRIF")
+            compare(otherWebView.lastMessage.data, "DNOCES")
+        }
+
+        function test_disabled() {
+            disabledWebView.url = testUrl
+            verify(!disabledWebView.experimental.preferences.navigatorQtObjectEnabled)
+            verify(disabledWebView.waitForLoadSucceeded())
+            disabledWebView.experimental.postMessage("HI")
+            wait(1000)
+            verify(!disabledWebView.receivedMessage)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_multiFileUpload.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_multiFileUpload.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_multiFileUpload.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_multiFileUpload.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,60 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    width: 400
+    height: 400
+
+    property bool selectFile
+
+    experimental.filePicker: Item {
+        Component.onCompleted: {
+            var selectedFiles = ["filename1", "filename2"]
+            if (selectFile)
+                model.accept(selectedFiles)
+            else
+                model.reject();
+        }
+    }
+
+    SignalSpy {
+        id: titleSpy
+        target: webView
+        signalName: "titleChanged"
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewMultiFilePicker"
+        when: windowShown
+
+        function init() {
+            webView.url = Qt.resolvedUrl("../common/multifileupload.html")
+            verify(webView.waitForLoadSucceeded())
+            titleSpy.clear()
+        }
+
+        function openItemSelector() {
+            webView.experimental.test.touchTap(webView, 15, 15)
+        }
+
+        function test_accept() {
+            webView.selectFile = true;
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "filename1,filename2")
+        }
+
+        function test_reject() {
+            var oldTitle = webView.title
+            webView.selectFile = false;
+            openItemSelector()
+            compare(webView.title, oldTitle)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_navigationHistory.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_navigationHistory.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_navigationHistory.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_navigationHistory.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,95 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    ListView {
+        id: backItemsList
+        anchors.fill: parent
+        model: webView.experimental.navigationHistory.backItems
+        delegate:
+            Text {
+                color:"black"
+                text: "title : " + title
+            }
+    }
+
+    ListView {
+        id: forwardItemsList
+        anchors.fill: parent
+        model: webView.experimental.navigationHistory.forwardItems
+        delegate:
+            Text {
+                color:"black"
+                text: "title : " + title
+            }
+    }
+
+    TestCase {
+        name: "WebViewNavigationHistory"
+
+        function test_navigationHistory() {
+            compare(webView.loadProgress, 0)
+            webView.url = Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.canGoBack, false)
+            compare(webView.canGoForward, false)
+            compare(backItemsList.count, 0)
+            compare(forwardItemsList.count, 0)
+            webView.url = Qt.resolvedUrl("../common/test2.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
+            compare(webView.canGoBack, true)
+            compare(webView.canGoForward, false)
+            compare(backItemsList.count, 1)
+            webView.experimental.goBackTo(0)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/test1.html"))
+            compare(webView.canGoBack, false)
+            compare(webView.canGoForward, true)
+            compare(backItemsList.count, 0)
+            compare(forwardItemsList.count, 1)
+            webView.goForward()
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
+            compare(webView.canGoBack, true)
+            compare(webView.canGoForward, false)
+            compare(backItemsList.count, 1)
+            compare(forwardItemsList.count, 0)
+            webView.url = Qt.resolvedUrl("../common/javascript.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/javascript.html"))
+            compare(webView.canGoBack, true)
+            compare(webView.canGoForward, false)
+            compare(backItemsList.count, 2)
+            compare(forwardItemsList.count, 0)
+            webView.experimental.goBackTo(1)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/test1.html"))
+            compare(webView.canGoBack, false)
+            compare(webView.canGoForward, true)
+            compare(backItemsList.count, 0)
+            compare(forwardItemsList.count, 2)
+            webView.experimental.goForwardTo(1)
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/javascript.html"))
+            compare(webView.canGoBack, true)
+            compare(webView.canGoForward, false)
+            compare(backItemsList.count, 2)
+            compare(forwardItemsList.count, 0)
+            webView.goBack()
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, Qt.resolvedUrl("../common/test2.html"))
+            compare(webView.canGoBack, true)
+            compare(webView.canGoForward, true)
+            compare(backItemsList.count, 1)
+            compare(forwardItemsList.count, 1)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_notification.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_notification.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_notification.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_notification.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,55 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+
+WebView {
+    id: webView
+    width: 200
+    height: 200
+
+    property bool expectedPermission: false
+
+    SignalSpy {
+        id: spy
+        target: experimental
+        signalName: "permissionRequested"
+    }
+
+    experimental.onPermissionRequested: {
+        // Must be false by default
+        if (!permission.allow) {
+           permission.allow = true
+        } else {
+           console.log("Fail: permission must be set to false")
+        }
+
+        if (permission.type == PermissionRequest.Notification) {
+            console.log("Permission is Desktop Notification")
+        }
+    }
+
+    TestCase {
+        name: "WebViewDesktopNotificationPermission"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            spy.clear()
+        }
+
+        function test_permissionRequest() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/notification.html")
+            spy.wait()
+            compare(spy.count, 1)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_origin.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_origin.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_origin.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_origin.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,57 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+
+WebView {
+    id: webView
+    width: 200
+    height: 200
+
+    property bool success: true
+    property int port: 0
+    property string scheme: "file"
+
+    SignalSpy {
+        id: spy
+        target: experimental
+        signalName: "permissionRequested"
+    }
+
+    experimental.onPermissionRequested: {
+        if (permission.origin.port != webView.port) {
+            console.log("Expected port value should be zero.")
+            webView.success = false
+        }
+
+        if (permission.origin.scheme != webView.scheme) {
+            console.log("Expected scheme should be \"file\".")
+            webView.success = false
+        }
+    }
+
+    TestCase {
+        name: "WebViewSecurityOrigin"
+
+        // Delayed windowShown to workaround problems with Qt5 in debug mode.
+        when: false
+        Timer {
+            running: parent.windowShown
+            repeat: false
+            interval: 1
+            onTriggered: parent.when = true
+        }
+
+        function init() {
+            spy.clear()
+        }
+
+        function test_permissionRequest() {
+            compare(spy.count, 0)
+            webView.url = Qt.resolvedUrl("../common/geolocation.html")
+            spy.wait()
+            compare(spy.count, 1)
+            compare(webView.success, true)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_preferences.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_preferences.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_preferences.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_preferences.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,338 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 400
+        height: 300
+
+        experimental.preferences.javascriptEnabled: true
+        experimental.preferences.localStorageEnabled: true
+        experimental.preferences.pluginsEnabled: true
+
+        TestWebView {
+            id: webView2
+            width: 400
+            height: 300
+        }
+
+        SignalSpy {
+            id: titleSpy
+            target: webView
+            signalName: "titleChanged"
+        }
+
+        SignalSpy {
+            id: standardFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "standardFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: fixedFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "fixedFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: serifFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "serifFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: sansSerifFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "sansSerifFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: cursiveFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "cursiveFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: fantasyFontFamilySpy
+            target: webView.experimental.preferences
+            signalName: "fantasyFontFamilyChanged"
+        }
+
+        SignalSpy {
+            id: minimumFontSizeSpy
+            target: webView.experimental.preferences
+            signalName: "minimumFontSizeChanged"
+        }
+
+        SignalSpy {
+            id: defaultFontSizeSpy
+            target: webView.experimental.preferences
+            signalName: "defaultFontSizeChanged"
+        }
+
+        SignalSpy {
+            id: defaultFixedFontSizeSpy
+            target: webView.experimental.preferences
+            signalName: "defaultFixedFontSizeChanged"
+        }
+
+        TestCase {
+            name: "WebViewPreferences"
+
+            property bool shouldSetupFonts: true
+            property string defaultStandardFontFamily
+            property string defaultFixedFontFamily
+            property string defaultSerifFontFamily
+            property string defaultSansSerifFontFamily
+            property string defaultCursiveFontFamily
+            property string defaultFantasyFontFamily
+            property int defaultMinimumFontSize
+            property int defaultFontSize
+            property int defaultFixedFontSize
+
+            function init() {
+                if (shouldSetupFonts) {
+                    // Setup initial values (may be different per platform).
+                    shouldSetupFonts = false
+                    defaultStandardFontFamily = webView.experimental.preferences.standardFontFamily
+                    defaultFixedFontFamily = webView.experimental.preferences.fixedFontFamily
+                    defaultSerifFontFamily = webView.experimental.preferences.serifFontFamily
+                    defaultSansSerifFontFamily = webView.experimental.preferences.sansSerifFontFamily
+                    defaultCursiveFontFamily = webView.experimental.preferences.cursiveFontFamily
+                    defaultFantasyFontFamily = webView.experimental.preferences.fantasyFontFamily
+                    defaultMinimumFontSize = webView.experimental.preferences.minimumFontSize
+                    defaultFontSize = webView.experimental.preferences.defaultFontSize
+                    defaultFixedFontSize = webView.experimental.preferences.defaultFixedFontSize
+                }
+                else {
+                    // Restore default values before starting a new test case.
+                    webView.experimental.preferences.standardFontFamily = defaultStandardFontFamily
+                    webView.experimental.preferences.fixedFontFamily = defaultFixedFontFamily
+                    webView.experimental.preferences.serifFontFamily = defaultSerifFontFamily
+                    webView.experimental.preferences.sansSerifFontFamily = defaultSansSerifFontFamily
+                    webView.experimental.preferences.cursiveFontFamily = defaultCursiveFontFamily
+                    webView.experimental.preferences.fantasyFontFamily = defaultFantasyFontFamily
+                    webView.experimental.preferences.minimumFontSize = defaultMinimumFontSize
+                    webView.experimental.preferences.defaultFontSize = defaultFontSize
+                    webView.experimental.preferences.defaultFixedFontSize = defaultFixedFontSize
+
+                    if (webView.url != '' && webView.url != 'about:blank') {
+                        webView.url = 'about:blank'
+                        verify(webView.waitForLoadSucceeded())
+                    }
+
+                    standardFontFamilySpy.clear()
+                    fixedFontFamilySpy.clear()
+                    serifFontFamilySpy.clear()
+                    sansSerifFontFamilySpy.clear()
+                    cursiveFontFamilySpy.clear()
+                    fantasyFontFamilySpy.clear()
+                    minimumFontSizeSpy.clear()
+                    defaultFontSizeSpy.clear()
+                    defaultFixedFontSizeSpy.clear()
+                }
+
+                webView.experimental.preferences.javascriptEnabled = true
+                webView.experimental.preferences.localStorageEnabled = true
+                webView.experimental.preferences.pluginsEnabled = true
+                titleSpy.clear()
+            }
+
+            function test_javascriptEnabled() {
+                webView.experimental.preferences.javascriptEnabled = true
+                var testUrl = Qt.resolvedUrl("../common/javascript.html")
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "New Title")
+            }
+
+            function test_javascriptDisabled() {
+                webView.experimental.preferences.javascriptEnabled = false
+                var testUrl = Qt.resolvedUrl("../common/javascript.html")
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+            }
+
+            function test_localStorageDisabled() {
+                webView.experimental.preferences.localStorageEnabled = false
+                var testUrl = Qt.resolvedUrl("../common/localStorage.html")
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+            }
+
+            function test_localStorageEnabled() {
+                webView.experimental.preferences.localStorageEnabled = true
+                var testUrl = Qt.resolvedUrl("../common/localStorage.html")
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "New Title")
+            }
+
+            function test_preferencesAffectCurrentViewOnly() {
+                webView.experimental.preferences.javascriptEnabled = true
+                webView2.experimental.preferences.javascriptEnabled = true
+                var testUrl = Qt.resolvedUrl("../common/javascript.html")
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                webView2.url = testUrl
+                verify(webView2.waitForLoadSucceeded())
+                compare(webView.title, "New Title")
+                compare(webView2.title, "New Title")
+                webView.experimental.preferences.javascriptEnabled = false
+                webView.url = testUrl
+                verify(webView.waitForLoadSucceeded())
+                webView2.url = testUrl
+                verify(webView2.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                compare(webView2.title, "New Title")
+            }
+
+            function unquote(text) {
+                return text[0] === "'" ? text.slice(1, -1) : text
+            }
+
+            function test_standardFontFamilyChanged() {
+                var url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-family")
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+                compare(unquote(webView.title), defaultStandardFontFamily)
+
+                webView.experimental.preferences.standardFontFamily = "foobar"
+                standardFontFamilySpy.wait()
+                compare(standardFontFamilySpy.count, 1)
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, "foobar")
+            }
+
+            function test_fontSizeChanged() {
+                var url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-size")
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")                
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, defaultFontSize.toString() + "px")
+
+                webView.experimental.preferences.defaultFontSize = defaultFontSize + 1
+                defaultFontSizeSpy.wait()
+                compare(defaultFontSizeSpy.count, 1)
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, (defaultFontSize + 1).toString() + "px")
+            }
+
+            function test_fixedFontSizeChanged() {
+                var url = Qt.resolvedUrl("../common/font-preferences.html?fixed#font-size")
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, defaultFixedFontSize.toString() + "px")
+
+                webView.experimental.preferences.defaultFixedFontSize = defaultFixedFontSize + 1
+                defaultFixedFontSizeSpy.wait()
+                compare(defaultFixedFontSizeSpy.count, 1)
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, (defaultFixedFontSize + 1).toString() + "px")
+
+                webView.url = Qt.resolvedUrl("../common/font-preferences.html?standard#font-size")
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, defaultFontSize.toString() + "px")
+            }
+
+            function test_minimumFontSizeChanged() {
+                verify(defaultMinimumFontSize < defaultFontSize)
+                var url = Qt.resolvedUrl("../common/font-preferences.html?minimum#font-size")
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                var smallerFontSize = webView.title
+                smallerFontSize = smallerFontSize.substring(0, smallerFontSize.length - 2)
+                smallerFontSize = parseInt(smallerFontSize)
+                verify(smallerFontSize < defaultFontSize)
+
+                webView.experimental.preferences.minimumFontSize = defaultFontSize
+                minimumFontSizeSpy.wait()
+                compare(minimumFontSizeSpy.count, 1)
+                webView.url = url
+                verify(webView.waitForLoadSucceeded())
+                compare(webView.title, "Original Title")
+                titleSpy.clear()
+
+                titleSpy.wait()
+                compare(webView.title, defaultFontSize.toString() + "px")
+            }
+
+            function test_defaultFontsChanged() {
+                // As there's currently no way to test through JS if a generic font was indeed changed
+                // we keep this test for really basic coverage.
+
+                webView.experimental.preferences.standardFontFamily = "foobar0"
+                standardFontFamilySpy.wait()
+                webView.experimental.preferences.fixedFontFamily = "foobar1"
+                fixedFontFamilySpy.wait()
+                webView.experimental.preferences.serifFontFamily = "foobar2"
+                serifFontFamilySpy.wait()
+                webView.experimental.preferences.sansSerifFontFamily = "foobar3"
+                sansSerifFontFamilySpy.wait()
+                webView.experimental.preferences.cursiveFontFamily = "foobar4"
+                cursiveFontFamilySpy.wait()
+                webView.experimental.preferences.fantasyFontFamily = "foobar5"
+                fantasyFontFamilySpy.wait()
+
+                compare(standardFontFamilySpy.count, 1)
+                compare(fixedFontFamilySpy.count, 1)
+                compare(serifFontFamilySpy.count, 1)
+                compare(sansSerifFontFamilySpy.count, 1)
+                compare(cursiveFontFamilySpy.count, 1)
+                compare(fantasyFontFamilySpy.count, 1)
+
+                compare(webView.experimental.preferences.standardFontFamily, "foobar0")
+                compare(webView.experimental.preferences.fixedFontFamily, "foobar1")
+                compare(webView.experimental.preferences.serifFontFamily, "foobar2")
+                compare(webView.experimental.preferences.sansSerifFontFamily, "foobar3")
+                compare(webView.experimental.preferences.cursiveFontFamily, "foobar4")
+                compare(webView.experimental.preferences.fantasyFontFamily, "foobar5")
+            }
+
+
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_properties.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_properties.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_properties.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_properties.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,27 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    TestCase {
+        name: "WebViewProperties"
+
+        function test_title() {
+            webView.url =  Qt.resolvedUrl("../common/test1.html")
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.title, "Test page 1")
+        }
+
+        function test_url() {
+            var testUrl = Qt.resolvedUrl("../common/test1.html")
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())
+            compare(webView.url, testUrl)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_resize.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_resize.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_resize.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_resize.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,178 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import Test 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 320
+        height: 480
+
+        property variant result
+
+        property variant content: "data:text/html," +
+            "<head>" +
+            "    <meta name='viewport' content='width=device-width'>" +
+            "</head>" +
+            "<body>" +
+            "    <div id='target' style='width: 240px; height: 360px;'>" +
+            "    </div>" +
+            "</body>"
+
+        signal resultReceived
+    }
+
+    SignalSpy {
+        id: resultSpy
+        target: webView
+        signalName: "resultReceived"
+    }
+
+    SignalSpy {
+        id: scaleSpy
+        target: webView.experimental.test
+        signalName: "contentsScaleCommitted"
+    }
+
+    SignalSpy {
+        id: sizeSpy
+        target: webView.experimental.test
+        signalName: "contentsSizeChanged"
+    }
+
+    TestCase {
+        name: "Resize"
+        when: windowShown
+
+        property variant test: webView.experimental.test
+
+        function init() {
+            resultSpy.clear()
+            scaleSpy.clear()
+            sizeSpy.clear()
+        }
+
+        function run(signalSpy, script) {
+            signalSpy.clear();
+            var result;
+            webView.experimental.evaluateJavaScript(
+                script,
+                function(value) { webView.resultReceived(); result = value });
+            signalSpy.wait();
+            return result;
+        }
+
+        function contentsSize() {
+            return test.contentsSize.width + "x" + test.contentsSize.height;
+        }
+
+        function elementRect(id) {
+            return JSON.parse(run(resultSpy, "JSON.stringify(document.getElementById('" + id + "').getBoundingClientRect());"))
+        }
+
+        function doubleTapAtPoint(x, y) {
+            scaleSpy.clear()
+            test.touchDoubleTap(webView, x, y)
+            scaleSpy.wait()
+        }
+
+        function resize(w, h) {
+            sizeSpy.clear()
+            webView.width = w
+            sizeSpy.wait()
+            webView.height = h
+            sizeSpy.wait()
+        }
+
+        function test_basic() {
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+
+            resize(480, 720)
+            compare(contentsSize(), "480x720")
+            compare(test.contentsScale, 1.0)
+
+            resize(320, 480)
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+
+        }
+
+        function test_resizeAfterNeutralZoom() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+
+            // Zoom in and out.
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, targetScale)
+
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, 1.0)
+
+            // Now check resizing still works as expected.
+            resize(480, 720)
+            compare(contentsSize(), "480x720")
+            compare(test.contentsScale, 1.0)
+
+            resize(320, 480)
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+        }
+
+        function test_resizeZoomedIn() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            // Note that if we change the behavior of resize on zoomed-in content, for instance
+            // to preserve the visible width (like rotate), this test will need to be updated.
+            webView.url = webView.content
+            verify(webView.waitForViewportReady())
+
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+
+            var target = elementRect("target");
+            var targetScale = webView.width / (target.width + 2 * 10) // inflated by 10px
+
+            // Double tap to zoom in.
+            doubleTapAtPoint(100, 50)
+
+            compare(test.contentsScale, targetScale)
+
+            // Resize just a small bit, not changing scale.
+            resize(288, 432)
+            compare(contentsSize(), "288x432")
+            compare(test.contentsScale, targetScale)
+
+            // And double tap to reset zoom.
+            target = elementRect("target");
+            targetScale = webView.width / (target.width + 2 * 10)
+            doubleTapAtPoint(100, 50)
+            compare(test.contentsScale, targetScale)
+
+            // Double tap again to zoom out.
+            doubleTapAtPoint(100, 50)
+            compare(contentsSize(), "288x432")
+            compare(test.contentsScale, 1.0)
+
+            // And reset
+            resize(320, 480)
+            compare(contentsSize(), "320x480")
+            compare(test.contentsScale, 1.0)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_singleFileUpload.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_singleFileUpload.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_singleFileUpload.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_singleFileUpload.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,84 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+TestWebView {
+    id: webView
+
+    width: 400
+    height: 400
+
+    property bool selectFile
+    property bool returnEmpty: false
+    property bool acceptMultiple: false
+
+    experimental.filePicker: Item {
+        Component.onCompleted: {
+            if (returnEmpty)
+                model.accept("");
+            else if (selectFile) {
+                var selectedFiles = ["filename1", "filename2"];
+                if (acceptMultiple)
+                    model.accept(selectedFiles);
+                else
+                    model.accept("acceptedfilename");
+            } else
+                model.reject();
+        }
+    }
+
+    SignalSpy {
+        id: titleSpy
+        target: webView
+        signalName: "titleChanged"
+    }
+
+    TestCase {
+        id: test
+        name: "WebViewSingleFilePicker"
+        when: windowShown
+
+        function init() {
+            webView.url = Qt.resolvedUrl("../common/singlefileupload.html")
+            verify(webView.waitForLoadSucceeded())
+            titleSpy.clear()
+        }
+
+        function openItemSelector() {
+            webView.experimental.test.touchTap(webView, 15, 15)
+        }
+
+        function test_accept() {
+            webView.selectFile = true;
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "acceptedfilename")
+        }
+
+        function test_multiple() {
+            webView.selectFile = true;
+            webView.returnEmpty = false;
+            webView.acceptMultiple = true;
+            openItemSelector()
+            titleSpy.wait()
+            compare(webView.title, "filename1")
+        }
+
+        function test_rejectIfEmptyAccept() {
+            var oldTitle = webView.title
+            webView.selectFile = false;
+            webView.returnEmpty = true;
+            openItemSelector()
+            compare(webView.title, oldTitle)
+        }
+
+        function test_reject() {
+            var oldTitle = webView.title
+            webView.selectFile = false;
+            openItemSelector()
+            compare(webView.title, oldTitle)
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_titleChanged.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_titleChanged.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_titleChanged.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_titleChanged.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,32 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import "../common"
+
+TestWebView {
+    id: webView
+    width: 400
+    height: 300
+
+    SignalSpy {
+        id: spyTitle
+        target: webView
+        signalName: "titleChanged"
+    }
+
+    TestCase {
+        name: "WebViewTitleChangedSignal"
+
+        function test_titleFirstLoad() {
+            compare(spyTitle.count, 0)
+            var testUrl = Qt.resolvedUrl("../common/test3.html")
+            webView.url = testUrl
+            verify(webView.waitForLoadSucceeded())            
+            compare(webView.title, "Test page 3")
+            spyTitle.clear()
+
+            spyTitle.wait()
+            compare(webView.title, "New Title")
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_userScripts.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_userScripts.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_userScripts.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_userScripts.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,113 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 400
+        height: 300
+    }
+
+    TestWebView {
+        id: webViewWithConditionalUserScripts
+        width: 400
+        height: 300
+
+        onNavigationRequested: {
+            var urlString = request.url.toString();
+            if (urlString.indexOf("test1.html") !== -1)
+                experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js")];
+            else if (urlString.indexOf("test2.html") !== -1)
+                experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js")];
+            else
+                experimental.userScripts = [];
+        }
+    }
+
+    TestCase {
+        name: "WebViewUserScripts"
+
+        function init() {
+            webView.url = "";
+            webView.experimental.userScripts = [];
+        }
+
+        function test_oneScript() {
+            webView.url = Qt.resolvedUrl("../common/test1.html");
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "Test page 1");
+
+            webView.experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js")];
+            compare(webView.title, "Test page 1");
+
+            webView.reload();
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "New title");
+
+            webView.url = Qt.resolvedUrl("../common/test2.html");
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "New title");
+
+            webView.experimental.userScripts = [];
+            compare(webView.title, "New title");
+
+            webView.reload();
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "Test page with huge link area");
+        }
+
+        function test_twoScripts() {
+            webView.url = Qt.resolvedUrl("../common/test1.html");
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "Test page 1");
+
+            webView.experimental.userScripts = [Qt.resolvedUrl("../common/change-document-title.js"), Qt.resolvedUrl("../common/append-document-title.js")];
+            webView.reload();
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "New title with appendix");
+
+            // Make sure we can remove scripts from the preload list.
+            webView.experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js")];
+            webView.reload();
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "Test page 1 with appendix");
+
+            // Make sure the scripts are loaded in order.
+            webView.experimental.userScripts = [Qt.resolvedUrl("../common/append-document-title.js"), Qt.resolvedUrl("../common/change-document-title.js")];
+            webView.reload();
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "New title");
+        }
+
+        function test_setUserScriptsConditionally() {
+            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test1.html");
+            webViewWithConditionalUserScripts.waitForLoadSucceeded();
+            compare(webViewWithConditionalUserScripts.title, "New title");
+
+            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test2.html");
+            webViewWithConditionalUserScripts.waitForLoadSucceeded();
+            compare(webViewWithConditionalUserScripts.title, "Test page with huge link area with appendix");
+
+            webViewWithConditionalUserScripts.url = Qt.resolvedUrl("../common/test3.html");
+            webViewWithConditionalUserScripts.waitForLoadSucceeded();
+            compare(webViewWithConditionalUserScripts.title, "Test page 3");
+        }
+
+        function test_bigScript() {
+            webView.experimental.userScripts = [Qt.resolvedUrl("../common/big-user-script.js")];
+            webView.url = Qt.resolvedUrl("../common/test1.html");
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "Big user script changed title");
+        }
+
+        function test_fromResourceFile() {
+            webView.experimental.userScripts = ["qrc:///common/change-document-title.js"];
+            webView.url = Qt.resolvedUrl("../common/test1.html");
+            webView.waitForLoadSucceeded();
+            compare(webView.title, "New title");
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_webchannel.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_webchannel.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_webchannel.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_webchannel.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,117 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff <milian.wolff@kdab.com>
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtWebChannel module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import "../common"
+
+import QtWebChannel 1.0
+
+Item {
+    id: test
+    signal barCalled(var arg)
+    signal clientInitializedCalled(var arg)
+
+    QtObject {
+        id: testObject
+        WebChannel.id: "testObject"
+
+        property var foo: 42
+
+        function clientInitialized(arg)
+        {
+            clientInitializedCalled(arg);
+        }
+
+        function bar(arg) {
+            barCalled(arg);
+        }
+
+        signal runTest(var foo)
+    }
+
+    TestWebView {
+        id: webView
+        experimental.webChannel.registeredObjects: [testObject]
+        experimental.preferences.developerExtrasEnabled: true
+    }
+
+    SignalSpy {
+        id: initializedSpy
+        target: test
+        signalName: "clientInitializedCalled"
+    }
+
+    SignalSpy {
+        id: barSpy
+        target: test
+        signalName: "barCalled"
+    }
+
+    TestCase {
+        name: "WebViewWebChannel"
+        property url testUrl: Qt.resolvedUrl("../common/webchannel.html")
+
+        function init() {
+            initializedSpy.clear();
+            barSpy.clear();
+        }
+
+        function test_basic() {
+            webView.url = testUrl;
+            verify(webView.waitForLoadSucceeded());
+
+            initializedSpy.wait();
+            compare(initializedSpy.signalArguments.length, 1);
+            compare(initializedSpy.signalArguments[0][0], 42);
+
+            var newValue = "roundtrip";
+            testObject.runTest(newValue);
+            barSpy.wait();
+            compare(barSpy.signalArguments.length, 1);
+            compare(barSpy.signalArguments[0][0], newValue);
+
+            compare(testObject.foo, newValue);
+        }
+    }
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_wheelEventHandling.qml qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_wheelEventHandling.qml
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/tst_wheelEventHandling.qml	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/tst_wheelEventHandling.qml	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,62 @@
+import QtQuick 2.0
+import QtTest 1.0
+import QtWebKit 3.0
+import QtWebKit.experimental 1.0
+import Test 1.0
+import "../common"
+
+Item {
+    TestWebView {
+        id: webView
+        width: 800
+        height: 600
+        url: Qt.resolvedUrl("../common/test4.html")
+    }
+
+    SignalSpy {
+        id: scrollSpy
+        target: webView
+        signalName: "contentYChanged"
+    }
+
+    TestCase {
+        name: "WheelEventHandling"
+        when: windowShown
+
+        property variant test: webView.experimental.test
+
+        function init() {
+            webView.url = Qt.resolvedUrl("../common/test4.html")
+            verify(webView.waitForViewportReady())
+            webView.contentY = 0
+        }
+
+        function test_wheelScrollEvent() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            scrollSpy.clear()
+            var centerPoint = Qt.point(webView.width / 2, webView.height / 2)
+            test.wheelEvent(webView, centerPoint.x, centerPoint.y, -500);
+            // The signal spy below will time out if the wheel event did not scroll the content.
+            scrollSpy.wait()
+            var position = webView.contentY
+            webView.reload()
+            verify(webView.waitForViewportReady())
+            // The check below will fail if the previous position was not restored after reload.
+            verify(position == webView.contentY)
+        }
+
+        function test_wheelScrollEventAfterReload() {
+            skip("https://github.com/qtwebkit/qtwebkit/issues/951")
+
+            scrollSpy.clear()
+            webView.reload()
+            verify(webView.waitForViewportReady())
+            var centerPoint = Qt.point(webView.width / 2, webView.height / 2)
+            test.wheelEvent(webView, centerPoint.x, centerPoint.y, -500);
+            // The signal spy below will time out if the wheel event did not scroll the content.
+            scrollSpy.wait()
+        }
+    }
+
+}
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/WebView.pro qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/WebView.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qmltests/WebView/WebView.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qmltests/WebView/WebView.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,19 @@
+include(../../tests.pri)
+SOURCES += ../tst_qmltests.cpp
+TARGET = tst_qmltests_WebView
+OBJECTS_DIR = .obj_WebView
+
+QT += webkit-private
+CONFIG += testcase
+
+QT += qmltest
+
+# Test the QML files under WebView in the source repository.
+DEFINES += QUICK_TEST_SOURCE_DIR=\"\\\"$$PWD\\\"\"
+DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
+
+OTHER_FILES += \
+    *.qml \
+    ../common/*
+
+RESOURCES = ../resources.qrc
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qquickwebview/qquickwebview.pro qtwebkit-opensource-src-5.212/tests/webkitqml/qquickwebview/qquickwebview.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qquickwebview/qquickwebview.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qquickwebview/qquickwebview.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,4 @@
+include(../tests.pri)
+SOURCES += $${TARGET}.cpp
+QT += webkit-private
+DEFINES += IMPORT_DIR=\"\\\"$${ROOT_BUILD_DIR}$${QMAKE_DIR_SEP}imports\\\"\"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qquickwebview/tst_qquickwebview.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/qquickwebview/tst_qquickwebview.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qquickwebview/tst_qquickwebview.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qquickwebview/tst_qquickwebview.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,449 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "../testwindow.h"
+#include "../util.h"
+
+#include <QScopedPointer>
+#include <QtQml/QQmlEngine>
+#include <QtTest/QtTest>
+#include <private/qquickwebpage_p.h>
+#include <private/qquickwebview_p.h>
+
+class tst_QQuickWebView : public QObject {
+    Q_OBJECT
+public:
+    tst_QQuickWebView();
+
+private Q_SLOTS:
+    void init();
+    void cleanup();
+
+    void accessPage();
+    void navigationStatusAtStartup();
+    void stopEnabledAfterLoadStarted();
+    void baseUrl();
+    void loadEmptyUrl();
+    void loadEmptyPageViewVisible();
+    void loadEmptyPageViewHidden();
+    void loadNonexistentFileUrl();
+    void backAndForward();
+    void reload();
+    void stop();
+    void loadProgress();
+    void scrollRequest();
+
+    void show();
+    void showWebView();
+    void removeFromCanvas();
+    void multipleWebViewWindows();
+    void multipleWebViews();
+    void titleUpdate();
+    void transparentWebViews();
+
+    void inputMethod();
+    void inputMethodHints();
+    void basicRenderingSanity();
+
+private:
+    void prepareWebViewComponent();
+    inline QQuickWebView* newWebView();
+    inline QQuickWebView* webView() const;
+    void runJavaScript(const QString& script);
+    QScopedPointer<TestWindow> m_window;
+    QScopedPointer<QQmlComponent> m_component;
+};
+
+tst_QQuickWebView::tst_QQuickWebView()
+{
+    addQtWebProcessToPath();
+    prepareWebViewComponent();
+}
+
+void tst_QQuickWebView::prepareWebViewComponent()
+{
+    static QQmlEngine* engine = new QQmlEngine(this);
+    engine->addImportPath(QString::fromUtf8(IMPORT_DIR));
+
+    m_component.reset(new QQmlComponent(engine, this));
+
+    m_component->setData(QByteArrayLiteral("import QtQuick 2.0\n"
+                                           "import QtWebKit 3.0\n"
+                                           "WebView {}")
+                         , QUrl());
+}
+
+QQuickWebView* tst_QQuickWebView::newWebView()
+{
+    QObject* viewInstance = m_component->create();
+    QQuickWebView* webView = qobject_cast<QQuickWebView*>(viewInstance);
+    return webView;
+}
+
+void tst_QQuickWebView::init()
+{
+    m_window.reset(new TestWindow(newWebView()));
+}
+
+void tst_QQuickWebView::cleanup()
+{
+    m_window.reset();
+}
+
+inline QQuickWebView* tst_QQuickWebView::webView() const
+{
+    return static_cast<QQuickWebView*>(m_window->webView.data());
+}
+
+void tst_QQuickWebView::runJavaScript(const QString &script)
+{
+    QEventLoop loop;
+    webView()->runJavaScriptInMainFrame(script, &loop, "quit");
+    loop.exec();
+}
+
+void tst_QQuickWebView::accessPage()
+{
+    QQuickWebPage* const pageDirectAccess = webView()->page();
+
+    QVariant pagePropertyValue = webView()->experimental()->property("page");
+    QQuickWebPage* const pagePropertyAccess = pagePropertyValue.value<QQuickWebPage*>();
+    QCOMPARE(pagePropertyAccess, pageDirectAccess);
+}
+
+void tst_QQuickWebView::navigationStatusAtStartup()
+{
+    QCOMPARE(webView()->canGoBack(), false);
+
+    QCOMPARE(webView()->canGoForward(), false);
+
+    QCOMPARE(webView()->loading(), false);
+}
+
+void tst_QQuickWebView::stopEnabledAfterLoadStarted()
+{
+    QCOMPARE(webView()->loading(), false);
+
+    LoadStartedCatcher catcher(webView());
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    waitForSignal(&catcher, SIGNAL(finished()));
+
+    QCOMPARE(webView()->loading(), true);
+
+    QVERIFY(waitForLoadSucceeded(webView()));
+}
+
+void tst_QQuickWebView::baseUrl()
+{
+    // Test the url is in a well defined state when instanciating the view, but before loading anything.
+    QVERIFY(webView()->url().isEmpty());
+}
+
+void tst_QQuickWebView::loadEmptyUrl()
+{
+    webView()->setUrl(QUrl());
+    webView()->setUrl(QUrl(QLatin1String("")));
+}
+
+void tst_QQuickWebView::loadEmptyPageViewVisible()
+{
+    m_window->show();
+    loadEmptyPageViewHidden();
+}
+
+void tst_QQuickWebView::loadEmptyPageViewHidden()
+{
+    QSignalSpy loadSpy(webView(), SIGNAL(loadingChanged(QWebLoadRequest*)));
+
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(loadSpy.size(), 2);
+}
+
+void tst_QQuickWebView::loadNonexistentFileUrl()
+{
+    QSignalSpy loadSpy(webView(), SIGNAL(loadingChanged(QWebLoadRequest*)));
+
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/file_that_does_not_exist.html")));
+    QVERIFY(waitForLoadFailed(webView()));
+
+    QCOMPARE(loadSpy.size(), 2);
+}
+
+void tst_QQuickWebView::backAndForward()
+{
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html"));
+
+    webView()->goBack();
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+
+    webView()->goForward();
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html"));
+}
+
+void tst_QQuickWebView::reload()
+{
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+
+    webView()->reload();
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+}
+
+void tst_QQuickWebView::stop()
+{
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QCOMPARE(webView()->url().path(), QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html"));
+
+    // FIXME: This test should be fleshed out. Right now it's just here to make sure we don't crash.
+    webView()->stop();
+}
+
+void tst_QQuickWebView::loadProgress()
+{
+    QCOMPARE(webView()->loadProgress(), 0);
+
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QSignalSpy loadProgressChangedSpy(webView(), SIGNAL(loadProgressChanged()));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    QVERIFY(loadProgressChangedSpy.count() >= 1);
+
+    QCOMPARE(webView()->loadProgress(), 100);
+}
+
+void tst_QQuickWebView::show()
+{
+    // This should not crash.
+    m_window->show();
+    QTest::qWait(200);
+    m_window->hide();
+}
+
+void tst_QQuickWebView::showWebView()
+{
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/direct-image-compositing.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+    m_window->show();
+    // This should not crash.
+    webView()->setVisible(true);
+    QTest::qWait(200);
+    webView()->setVisible(false);
+    QTest::qWait(200);
+}
+
+void tst_QQuickWebView::removeFromCanvas()
+{
+    showWebView();
+
+    // This should not crash.
+    QQuickItem* parent = webView()->parentItem();
+    QQuickItem noCanvasItem;
+    webView()->setParentItem(&noCanvasItem);
+    QTest::qWait(200);
+    webView()->setParentItem(parent);
+    webView()->setVisible(true);
+    QTest::qWait(200);
+}
+
+void tst_QQuickWebView::multipleWebViewWindows()
+{
+    showWebView();
+
+    // This should not crash.
+    QQuickWebView* webView1 = newWebView();
+    QScopedPointer<TestWindow> window1(new TestWindow(webView1));
+    QQuickWebView* webView2 = newWebView();
+    QScopedPointer<TestWindow> window2(new TestWindow(webView2));
+
+    webView1->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
+    QVERIFY(waitForLoadSucceeded(webView1));
+    window1->show();
+    webView1->setVisible(true);
+
+    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView2));
+    window2->show();
+    webView2->setVisible(true);
+    QTest::qWait(200);
+}
+
+void tst_QQuickWebView::multipleWebViews()
+{
+    showWebView();
+
+    // This should not crash.
+    QScopedPointer<QQuickWebView> webView1(newWebView());
+    webView1->setParentItem(m_window->contentItem());
+    QScopedPointer<QQuickWebView> webView2(newWebView());
+    webView2->setParentItem(m_window->contentItem());
+
+    webView1->setSize(QSizeF(300, 400));
+    webView1->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
+    QVERIFY(waitForLoadSucceeded(webView1.data()));
+    webView1->setVisible(true);
+
+    webView2->setSize(QSizeF(300, 400));
+    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView2.data()));
+    webView2->setVisible(true);
+    QTest::qWait(200);
+}
+
+void tst_QQuickWebView::basicRenderingSanity()
+{
+    showWebView();
+
+    webView()->setUrl(QUrl(QString::fromUtf8("data:text/html,<html><body bgcolor=\"#00ff00\"></body></html>")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+
+    // This should not crash.
+    webView()->setVisible(true);
+    QTest::qWait(200);
+    QImage grabbedWindow = m_window->grabWindow();
+    QRgb testColor = qRgba(0, 0xff, 0, 0xff);
+    QVERIFY(grabbedWindow.pixel(10, 10) == testColor);
+    QVERIFY(grabbedWindow.pixel(100, 10) == testColor);
+    QVERIFY(grabbedWindow.pixel(10, 100) == testColor);
+    QVERIFY(grabbedWindow.pixel(100, 100) == testColor);
+}
+
+void tst_QQuickWebView::titleUpdate()
+{    
+    QSignalSpy titleSpy(webView(), SIGNAL(titleChanged()));
+
+    // Load page with no title
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page2.html")));
+    QVERIFY(waitForLoadSucceeded(webView()));
+    QCOMPARE(titleSpy.size(), 1);
+
+    titleSpy.clear();
+
+    // No titleChanged signal for failed load
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/file_that_does_not_exist.html")));
+    QVERIFY(waitForLoadFailed(webView()));
+    QCOMPARE(titleSpy.size(), 0);
+
+}
+
+void tst_QQuickWebView::transparentWebViews()
+{
+    showWebView();
+
+    // This should not crash.
+    QScopedPointer<QQuickWebView> webView1(newWebView());
+    webView1->setParentItem(m_window->contentItem());
+    QScopedPointer<QQuickWebView> webView2(newWebView());
+    webView2->setParentItem(m_window->contentItem());
+    QVERIFY(!webView1->experimental()->transparentBackground());
+    webView2->experimental()->setTransparentBackground(true);
+    QVERIFY(webView2->experimental()->transparentBackground());
+
+    webView1->setSize(QSizeF(300, 400));
+    webView1->loadHtml("<html><body bgcolor=\"red\"></body></html>");
+    QVERIFY(waitForLoadSucceeded(webView1.data()));
+    webView1->setVisible(true);
+
+    webView2->setSize(QSizeF(300, 400));
+    webView2->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/basic_page.html")));
+    QVERIFY(waitForLoadSucceeded(webView2.data()));
+    webView2->setVisible(true);
+
+    QTest::qWait(200);
+    // FIXME: test actual rendering results; https://bugs.webkit.org/show_bug.cgi?id=80609.
+}
+
+void tst_QQuickWebView::inputMethod()
+{
+    QQuickWebView* view = webView();
+    view->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/inputmethod.html")));
+    QVERIFY(waitForLoadSucceeded(view));
+
+    QVERIFY(!view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
+    runJavaScript("document.getElementById('inputField').focus();");
+    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
+    runJavaScript("document.getElementById('inputField').blur();");
+    QVERIFY(!view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
+}
+
+void tst_QQuickWebView::inputMethodHints()
+{
+    QQuickWebView* view = webView();
+
+    view->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/inputmethod.html")));
+    QVERIFY(waitForLoadSucceeded(view));
+
+    // Setting focus on an input element results in an element in its shadow tree becoming the focus node.
+    // Input hints should not be set from this shadow tree node but from the input element itself.
+    runJavaScript("document.getElementById('emailInputField').focus();");
+    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
+    QInputMethodQueryEvent query(Qt::ImHints);
+    QGuiApplication::sendEvent(view, &query);
+    Qt::InputMethodHints hints(query.value(Qt::ImHints).toUInt() & Qt::ImhExclusiveInputMask);
+    QCOMPARE(hints, Qt::ImhEmailCharactersOnly);
+
+    // The focus of an editable DIV is given directly to it, so no shadow root element
+    // is necessary. This tests the WebPage::editorState() method ability to get the
+    // right element without breaking.
+    runJavaScript("document.getElementById('editableDiv').focus();");
+    QVERIFY(view->flags().testFlag(QQuickItem::ItemAcceptsInputMethod));
+    query = QInputMethodQueryEvent(Qt::ImHints);
+    QGuiApplication::sendEvent(view, &query);
+    hints = Qt::InputMethodHints(query.value(Qt::ImHints).toUInt());
+    QCOMPARE(hints, Qt::ImhNone);
+}
+
+void tst_QQuickWebView::scrollRequest()
+{
+    m_window->setGeometry(0, 0, 300, 400);
+    m_window->show();
+
+    webView()->setUrl(QUrl::fromLocalFile(QLatin1String(TESTS_SOURCE_DIR "/html/scroll.html")));
+    QVERIFY(waitForViewportReady(webView()));
+
+    // COMPARE with the position requested in the html
+    // Use qRound as that is also used when calculating the position
+    // in WebKit.
+    int y = qRound(50 * webView()->page()->contentsScale());
+    QVERIFY(webView()->contentY() == y);
+}
+
+QTEST_MAIN(tst_QQuickWebView)
+
+#include "tst_qquickwebview.moc"
+
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qrawwebview/qrawwebview.pro qtwebkit-opensource-src-5.212/tests/webkitqml/qrawwebview/qrawwebview.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qrawwebview/qrawwebview.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qrawwebview/qrawwebview.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,3 @@
+include(../tests.pri)
+SOURCES += $${TARGET}.cpp
+QT += webkit-private
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/qrawwebview/tst_qrawwebview.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/qrawwebview/tst_qrawwebview.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/qrawwebview/tst_qrawwebview.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/qrawwebview/tst_qrawwebview.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,238 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+#include "../util.h"
+
+#include <QImage>
+#include <QMatrix4x4>
+#include <QOpenGLContext>
+#include <QSize>
+#include <QWindow>
+#include <QtTest/QtTest>
+
+#include <WebKit2/WKContext.h>
+#include <WebKit2/WKPageGroup.h>
+#include <WebKit2/WKPageLoadTypes.h>
+#include <WebKit2/WKPreferences.h>
+#include <WebKit2/WKPreferencesPrivate.h>
+#include <WebKit2/WKStringQt.h>
+#include <WebKit2/WKURL.h>
+#include <WebKit2/qrawwebview_p.h>
+
+static WKContextRef webContext()
+{
+    static WKContextRef result = WKContextCreate();
+    return result;
+}
+
+static WKPageGroupRef createWebPageGroup(const QString& name)
+{
+    WKPageGroupRef pageGroup =WKPageGroupCreateWithIdentifier(WKStringCreateWithQString(name));
+    WKPreferencesRef preferences = WKPageGroupGetPreferences(pageGroup);
+    WKPreferencesSetAcceleratedCompositingEnabled(preferences, true);
+    WKPreferencesSetFrameFlatteningEnabled(preferences, true);
+
+    return pageGroup;
+}
+
+static WKPageGroupRef webPageGroup(const QString& name)
+{
+    static WKPageGroupRef result = createWebPageGroup(name);
+    return result;
+}
+
+class WebView : public QObject, public QRawWebViewClient {
+    Q_OBJECT
+public:
+    WebView(const QSize& size, bool transparent = false)
+    {
+        m_webView = new QRawWebView(webContext(), webPageGroup(QString()), this);
+        m_webView->setTransparentBackground(transparent);
+        m_webView->create();
+
+        WKPageLoaderClient loaderClient;
+        memset(&loaderClient, 0, sizeof(WKPageLoaderClient));
+        loaderClient.version = kWKPageLoaderClientCurrentVersion;
+        loaderClient.clientInfo = this;
+        loaderClient.didLayout = WebView::didLayout;
+
+        WKPageSetPageLoaderClient(m_webView->pageRef(), &loaderClient);
+        WKPageListenForLayoutMilestones(m_webView->pageRef(), kWKDidFirstVisuallyNonEmptyLayout);
+        WKPageSetUseFixedLayout(m_webView->pageRef(), true);
+
+        m_webView->setSize(size);
+        m_webView->setFocused(true);
+        m_webView->setVisible(true);
+        m_webView->setActive(true);
+    }
+
+    ~WebView() { delete m_webView; }
+
+    void load(const QString& html)
+    {
+        m_frameLoaded = false;
+        WKPageLoadURL(m_webView->pageRef(), WKURLCreateWithUTF8CString(html.toLocal8Bit().data()));
+        QVERIFY(::waitForSignal(this, SIGNAL(loaded()), 5000));
+    }
+
+    void setDrawBackground(bool value) { m_webView->setDrawBackground(value); }
+    void setTransparentBackground(bool value) { m_webView->setTransparentBackground(value); }
+
+    virtual void viewNeedsDisplay(const QRect&)
+    {
+        m_webView->paint(QMatrix4x4(), 1, 0);
+    }
+
+    virtual void viewRequestedScroll(const QPoint&) { }
+    virtual void viewProcessCrashed() { }
+    virtual void viewProcessRelaunched() { }
+    virtual void viewContentSizeChanged(const QSize&) { }
+    virtual void viewRequestedCursorOverride(const QCursor&) { }
+    virtual void doneWithKeyEvent(const QKeyEvent*, bool wasHandled) { }
+    virtual void doneWithTouchEvent(const QTouchEvent*, bool wasHandled) { }
+
+    void frameLoaded()
+    {
+        m_frameLoaded = true;
+        WKPageForceRepaint(m_webView->pageRef(), this, finishForceRepaint);
+    }
+
+    void onRepaintDone()
+    {
+        emit loaded();
+    }
+
+    static void finishForceRepaint(WKErrorRef, void* context)
+    {
+        static_cast<WebView*>(context)->onRepaintDone();
+    }
+
+    static void didLayout(WKPageRef page, WKLayoutMilestones milestones, WKTypeRef userData, const void *clientInfo)
+    {
+        static_cast<WebView*>(const_cast<void*>(clientInfo))->frameLoaded();
+    }
+
+Q_SIGNALS:
+    void loaded();
+
+private:
+    QRawWebView* m_webView;
+    bool m_frameLoaded;
+};
+
+static bool compareImages(const QImage& i1, const QImage& i2, int count)
+{
+    if (i1.size() != i2.size())
+        return false;
+    for (int x = 0; x < count; ++x) {
+        for (int y = 0; y < count; ++y) {
+            QPoint point(x * i1.width() / count, y * i1.height() / count);
+            if (i1.pixel(point) != i2.pixel(point))
+                return false;
+        }
+    }
+
+    return true;
+}
+
+class tst_qrawwebview : public QObject {
+    Q_OBJECT
+public:
+    tst_qrawwebview()
+        : m_resourceDir(QString::fromLatin1(TESTS_SOURCE_DIR "/html/resources"))
+        , m_baseUrl(QUrl::fromLocalFile(TESTS_SOURCE_DIR "/html").toString())
+    {
+        addQtWebProcessToPath();
+    }
+
+private Q_SLOTS:
+    void paint() { run(&tst_qrawwebview::doPaint, m_resourceDir + "/qwkview_paint.png"); }
+    void noBackground1() { run(&tst_qrawwebview::doNoBackground1, m_resourceDir + "/qwkview_noBackground1.png"); }
+    void noBackground2() { run(&tst_qrawwebview::doNoBackground2, m_resourceDir + "/qwkview_noBackground1.png"); }
+    void noBackground3() { run(&tst_qrawwebview::doNoBackground3, m_resourceDir + "/qwkview_noBackground3.png"); }
+
+private:
+    const QString m_resourceDir;
+    const QString m_baseUrl;
+
+    void doPaint(const QSize& size);
+    void doNoBackground1(const QSize& size);
+    void doNoBackground2(const QSize& size);
+    void doNoBackground3(const QSize& size);
+
+    typedef void (tst_qrawwebview::*PaintMethod)(const QSize& size);
+    void run(PaintMethod, const QString& expectation);
+};
+
+void tst_qrawwebview::doPaint(const QSize& size)
+{
+    WebView view(size);
+    view.load(m_baseUrl + "/redsquare.html");
+}
+
+void tst_qrawwebview::doNoBackground1(const QSize& size)
+{
+    WebView view(size, true);
+    view.load(m_baseUrl + "/redsquare.html");
+    view.load(m_baseUrl + "/bluesquare.html");
+}
+
+void tst_qrawwebview::doNoBackground2(const QSize& size)
+{
+    WebView view1(size, true);
+    view1.load(m_baseUrl + "/redsquare.html");
+
+    WebView view2(size, true);
+    view2.load(m_baseUrl + "/bluesquare.html");
+}
+
+void tst_qrawwebview::doNoBackground3(const QSize& size)
+{
+    WebView view1(size, false);
+    view1.load(m_baseUrl + "/redsquare.html");
+
+    WebView view2(size, true);
+    view2.load(m_baseUrl + "/bluesquare.html");
+}
+
+void tst_qrawwebview::run(PaintMethod method, const QString& expectation)
+{
+    QWindow window;
+    window.setSurfaceType(QSurface::OpenGLSurface);
+    window.setGeometry(0, 0, 200, 200);
+    window.create();
+
+    QOpenGLContext context;
+    context.create();
+    context.makeCurrent(&window);
+
+    glViewport(0, 0, window.size().width(), window.size().height());
+    glClearColor(0, 0, 0, 0);
+    glClear(GL_COLOR_BUFFER_BIT);
+
+    (this->*method)(window.size());
+
+    QImage image(window.size(), QImage::Format_ARGB32_Premultiplied);
+    glReadPixels(0, 0, window.size().width(), window.size().height(), GL_RGBA, GL_UNSIGNED_BYTE, image.bits());
+
+    QVERIFY(compareImages(QImage(expectation), image.rgbSwapped(), 5));
+}
+
+QTEST_MAIN(tst_qrawwebview)
+
+#include "tst_qrawwebview.moc"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/tests.pri qtwebkit-opensource-src-5.212/tests/webkitqml/tests.pri
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/tests.pri	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/tests.pri	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,21 @@
+TEMPLATE = app
+
+VPATH += $$_PRO_FILE_PWD_
+TARGET = tst_$$TARGET
+
+INCLUDEPATH += $$PWD
+SOURCES +=  $$PWD/util.cpp
+
+QT += testlib webkit
+
+qtHaveModule(quick) {
+    QT += qml quick quick-private
+    HEADERS += $$PWD/bytearraytestdata.h \
+               $$PWD/util.h
+
+    SOURCES += $$PWD/bytearraytestdata.cpp
+}
+WEBKIT += wtf # For platform macros
+
+DEFINES += TESTS_SOURCE_DIR=\\\"$$PWD\\\" \
+           QWP_PATH=\\\"$${ROOT_BUILD_DIR}/bin\\\"
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/testwindow.h qtwebkit-opensource-src-5.212/tests/webkitqml/testwindow.h
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/testwindow.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/testwindow.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,59 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#ifndef testwindow_h
+#define testwindow_h
+
+#if 0
+#pragma qt_no_master_include
+#endif
+
+#include <QResizeEvent>
+#include <QScopedPointer>
+#include <QtQuick/qquickitem.h>
+#include <QtQuick/qquickview.h>
+
+// TestWindow: Utility class to ignore QQuickView details.
+class TestWindow : public QQuickView {
+public:
+    inline TestWindow(QQuickItem* webView);
+    QScopedPointer<QQuickItem> webView;
+
+protected:
+    inline void resizeEvent(QResizeEvent*);
+};
+
+inline TestWindow::TestWindow(QQuickItem* webView)
+    : webView(webView)
+{
+    Q_ASSERT(webView);
+    webView->setParentItem(contentItem());
+    resize(300, 400);
+}
+
+inline void TestWindow::resizeEvent(QResizeEvent* event)
+{
+    QQuickView::resizeEvent(event);
+    webView->setX(0);
+    webView->setY(0);
+    webView->setWidth(event->size().width());
+    webView->setHeight(event->size().height());
+}
+
+#endif /* testwindow_h */
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/util.cpp qtwebkit-opensource-src-5.212/tests/webkitqml/util.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/util.cpp	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/util.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,143 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include "util.h"
+
+#include <QtTest/QtTest>
+#include <stdio.h>
+
+#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
+#include "private/qquickwebview_p.h"
+#include "private/qwebloadrequest_p.h"
+#endif
+
+void addQtWebProcessToPath()
+{
+    // Since tests won't find ./QtWebProcess, add it to PATH (at the end to prevent surprises).
+    // QWP_PATH should be defined by qmake.
+    qputenv("PATH", qgetenv("PATH") + ":" + QWP_PATH);
+}
+
+/**
+ * Starts an event loop that runs until the given signal is received.
+ * Optionally the event loop
+ * can return earlier on a timeout.
+ *
+ * \return \p true if the requested signal was received
+ *         \p false on timeout
+ */
+bool waitForSignal(QObject* obj, const char* signal, int timeout)
+{
+    QEventLoop loop;
+    QObject::connect(obj, signal, &loop, SLOT(quit()));
+    QTimer timer;
+    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
+    if (timeout > 0) {
+        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
+        timer.setSingleShot(true);
+        timer.start(timeout);
+    }
+    loop.exec();
+    return timeoutSpy.isEmpty();
+}
+
+static void messageHandler(QtMsgType type, const QMessageLogContext&, const QString& message)
+{
+    if (type == QtCriticalMsg) {
+        fprintf(stderr, "%s\n", qPrintable(message));
+        return;
+    }
+    // Do nothing
+}
+
+void suppressDebugOutput()
+{
+    qInstallMessageHandler(messageHandler); \
+    if (qgetenv("QT_WEBKIT_SUPPRESS_WEB_PROCESS_OUTPUT").isEmpty()) \
+        qputenv("QT_WEBKIT_SUPPRESS_WEB_PROCESS_OUTPUT", "1");
+}
+
+#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
+bool waitForLoadSucceeded(QQuickWebView* webView, int timeout)
+{
+    QEventLoop loop;
+    LoadSpy loadSpy(webView);
+    QObject::connect(&loadSpy, SIGNAL(loadSucceeded()), &loop, SLOT(quit()));
+    QTimer timer;
+    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
+    if (timeout > 0) {
+        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
+        timer.setSingleShot(true);
+        timer.start(timeout);
+    }
+    loop.exec();
+    return timeoutSpy.isEmpty();
+}
+
+bool waitForLoadFailed(QQuickWebView* webView, int timeout)
+{
+    QEventLoop loop;
+    LoadSpy loadSpy(webView);
+    QObject::connect(&loadSpy, SIGNAL(loadFailed()), &loop, SLOT(quit()));
+    QTimer timer;
+    QSignalSpy timeoutSpy(&timer, SIGNAL(timeout()));
+    if (timeout > 0) {
+        QObject::connect(&timer, SIGNAL(timeout()), &loop, SLOT(quit()));
+        timer.setSingleShot(true);
+        timer.start(timeout);
+    }
+    loop.exec();
+    return timeoutSpy.isEmpty();
+}
+
+bool waitForViewportReady(QQuickWebView* webView, int timeout)
+{
+    // The viewport is locked until the first frame of a page load is rendered.
+    // The QQuickView needs to be shown for this to succeed.
+    return waitForSignal(webView->experimental(), SIGNAL(loadVisuallyCommitted()), timeout);
+}
+
+LoadSpy::LoadSpy(QQuickWebView* webView)
+{
+    connect(webView, SIGNAL(loadingChanged(QWebLoadRequest*)), SLOT(onLoadingChanged(QWebLoadRequest*)));
+}
+
+void LoadSpy::onLoadingChanged(QWebLoadRequest* loadRequest)
+{
+    if (loadRequest->status() == QQuickWebView::LoadSucceededStatus)
+        emit loadSucceeded();
+    else if (loadRequest->status() == QQuickWebView::LoadFailedStatus)
+        emit loadFailed();
+}
+
+LoadStartedCatcher::LoadStartedCatcher(QQuickWebView* webView)
+    : m_webView(webView)
+{
+    connect(m_webView, SIGNAL(loadingChanged(QWebLoadRequest*)), this, SLOT(onLoadingChanged(QWebLoadRequest*)));
+}
+
+void LoadStartedCatcher::onLoadingChanged(QWebLoadRequest* loadRequest)
+{
+    if (loadRequest->status() == QQuickWebView::LoadStartedStatus) {
+        QMetaObject::invokeMethod(this, "finished", Qt::QueuedConnection);
+
+        QCOMPARE(m_webView->loading(), true);
+    }
+}
+#endif
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/util.h qtwebkit-opensource-src-5.212/tests/webkitqml/util.h
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/util.h	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/util.h	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,64 @@
+/*
+    Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies)
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+// Functions and macros that really need to be in QTestLib
+
+#include <QEventLoop>
+#include <QSignalSpy>
+#include <QTimer>
+
+class QQuickWebView;
+class QWebLoadRequest;
+
+#if !defined(TESTS_SOURCE_DIR)
+#define TESTS_SOURCE_DIR ""
+#endif
+
+void addQtWebProcessToPath();
+bool waitForSignal(QObject*, const char* signal, int timeout = 10000);
+void suppressDebugOutput();
+
+#if defined(HAVE_QTQUICK) && HAVE_QTQUICK
+bool waitForLoadSucceeded(QQuickWebView* webView, int timeout = 10000);
+bool waitForLoadFailed(QQuickWebView* webView, int timeout = 10000);
+bool waitForViewportReady(QQuickWebView* webView, int timeout = 10000);
+
+class LoadSpy : public QEventLoop {
+    Q_OBJECT
+public:
+    LoadSpy(QQuickWebView* webView);
+Q_SIGNALS:
+    void loadSucceeded();
+    void loadFailed();
+private Q_SLOTS:
+    void onLoadingChanged(QWebLoadRequest* loadRequest);
+};
+
+class LoadStartedCatcher : public QObject {
+    Q_OBJECT
+public:
+    LoadStartedCatcher(QQuickWebView* webView);
+    virtual ~LoadStartedCatcher() { }
+public Q_SLOTS:
+    void onLoadingChanged(QWebLoadRequest* loadRequest);
+Q_SIGNALS:
+    void finished();
+private:
+    QQuickWebView* m_webView;
+};
+#endif
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitqml/webkitqml.pro qtwebkit-opensource-src-5.212/tests/webkitqml/webkitqml.pro
--- qtwebkit-5.212.0-alpha4/tests/webkitqml/webkitqml.pro	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitqml/webkitqml.pro	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,2 @@
+TEMPLATE = subdirs
+SUBDIRS += qmltests
diff -Nru qtwebkit-5.212.0-alpha4/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp qtwebkit-opensource-src-5.212/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp
--- qtwebkit-5.212.0-alpha4/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/tests/webkitwidgets/qwebpage/tst_qwebpage.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -105,6 +105,7 @@
 public:
     tst_QWebPage();
     virtual ~tst_QWebPage();
+    void createRendererTreeInWebPage();
 
 public Q_SLOTS:
     void init();
@@ -198,6 +199,8 @@
     void showModalDialog();
     void testStopScheduledPageRefresh();
     void findText();
+    void findTextScroll();
+    void javascriptScroll();
     void supportedContentType();
     // [Qt] tst_QWebPage::infiniteLoopJS() timeouts with DFG JIT
     // https://bugs.webkit.org/show_bug.cgi?id=79040
@@ -3072,6 +3075,46 @@
     }
 }
 
+void tst_QWebPage::createRendererTreeInWebPage()
+{
+    QImage image(m_page->viewportSize(), QImage::Format_ARGB32);
+    QPainter painter(&image);
+    m_page->mainFrame()->render(&painter);
+    painter.end();
+}
+
+void tst_QWebPage::findTextScroll()
+{
+    m_view->setHtml(QString("<html><head></head><body style=\"padding:250px;\"><div>foo bar</div></body></html>"));
+    m_page->setViewportSize(QSize(200, 200));
+    QSignalSpy scrollRequestedSpy(m_page, SIGNAL(scrollRequested(int,int,QRect)));
+
+    QCOMPARE(m_page->mainFrame()->scrollPosition().y(), 0);
+
+    createRendererTreeInWebPage();
+
+    m_page->findText("bar");
+
+    QTRY_COMPARE(scrollRequestedSpy.count(), 1);
+    QVERIFY(m_page->mainFrame()->scrollPosition().y() > 40);
+}
+
+void tst_QWebPage::javascriptScroll()
+{
+    m_view->setHtml(QString("<html><head></head><body style=\"padding:250px;\"><div>foo bar</div></body></html>"));
+    m_page->setViewportSize(QSize(200, 200));
+    QSignalSpy scrollRequestedSpy(m_page, SIGNAL(scrollRequested(int,int,QRect)));
+
+    QCOMPARE(m_page->mainFrame()->scrollPosition().y(), 0);
+
+    createRendererTreeInWebPage();
+
+    m_page->mainFrame()->evaluateJavaScript("document.getElementsByTagName('div')[0].scrollIntoView()");
+
+    QTRY_COMPARE(scrollRequestedSpy.count(), 1);
+    QVERIFY(m_page->mainFrame()->scrollPosition().y() > 40);
+}
+
 void tst_QWebPage::supportedContentType()
 {
     QStringList contentTypes;
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qmake/projects/generate_forwarding_pris.pro qtwebkit-opensource-src-5.212/Tools/qmake/projects/generate_forwarding_pris.pro
--- qtwebkit-5.212.0-alpha4/Tools/qmake/projects/generate_forwarding_pris.pro	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qmake/projects/generate_forwarding_pris.pro	2020-09-22 21:30:04.000000000 +1000
@@ -26,12 +26,28 @@
     write_file($$forwarding_pri_name, FORWARDING_PRI_CONTENTS)|error()
 }
 
+defineTest(writeWebKitPrivateForwardingPri) {
+    module = webkit_private
+    configuration = $$1
+    cmake_build_dir = $$ROOT_BUILD_DIR/$$configuration
+    forwarding_pri_name = $$MODULE_QMAKE_OUTDIR/mkspecs/modules/qt_lib_$${module}.pri
+
+    FORWARDING_PRI_CONTENTS += \
+        "include($$cmake_build_dir/Source/WebKit/qt_lib_$${module}.pri)" \
+        "QT.$${module}.priority = 1" \
+        "QT.$${module}.includes = $$cmake_build_dir/DerivedSources/ForwardingHeaders/QtWebKit $$ROOT_WEBKIT_DIR/Source"
+
+    message("Writing $$forwarding_pri_name")
+    write_file($$forwarding_pri_name, FORWARDING_PRI_CONTENTS)|error()
+}
+
 
 debug_and_release {
     !build_pass {
         # Use release build in case of debug_and_release
         writeForwardingPri(webkit, release)
         writeForwardingPri(webkitwidgets, release)
+        writeWebKitPrivateForwardingPri(release)
     }
 } else {
     CONFIG(debug, debug|release) {
@@ -41,4 +57,5 @@
     }
     writeForwardingPri(webkit, $$configuration)
     writeForwardingPri(webkitwidgets, $$configuration)
+    writeWebKitPrivateForwardingPri($$configuration)
 }
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/build-qtwebkit-conan.py qtwebkit-opensource-src-5.212/Tools/qt/build-qtwebkit-conan.py
--- qtwebkit-5.212.0-alpha4/Tools/qt/build-qtwebkit-conan.py	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/build-qtwebkit-conan.py	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,172 @@
+#!/usr/bin/env python3
+# Copyright (C) 2020 Konstantin Tokarev <annulen@yandex.ru>
+# Copyright (C) 2020 Rajagopalan Gangadharan <g.raju2000@gmail.com>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+# THE POSSIBILITY OF SUCH DAMAGE.
+
+import os
+import argparse
+import pathlib
+import platform
+import sys
+import subprocess
+
+
+def run_command(command):
+    print("Executing:", command)
+    exit_code = os.system(command)
+    print("Exit code:", exit_code)
+    if exit_code:
+        sys.exit(1)
+
+
+class ConanProfile:
+    def __init__(self, profile_name):
+        self.name = profile_name
+
+    def create(self):
+        run_command("conan profile new {0} --detect --force".format(self.name))
+
+    def get_arch(self):
+        return subprocess.check_output("conan profile get settings.arch_build {0}".format(self.name), shell=True).rstrip().decode('ascii')
+
+    def update(self, setting, value):
+        run_command("conan profile update settings.{0}={1} {2}".format(setting, value, self.name))
+
+
+def set_compiler_environment(cc, cxx):
+    os.environ["CC"] = cc
+    os.environ["CXX"] = cxx
+
+
+def create_profile(compiler, arch):
+    compiler_preset = {
+        "msvc": ["cl", "cl"],
+        "clang": ["clang", "clang++"],
+        "gcc": ["gcc", "g++"]
+    }
+    if not compiler:
+        if platform.system() == "Windows":
+            compiler = "msvc"
+        elif platform.system() == "Darwin":
+            compiler = "clang"
+        elif platform.system() == "Linux":
+            compiler = "gcc"
+
+    if not compiler in compiler_preset:
+        sys.exit("Error: Unknown Compiler " + compiler + " specified")
+
+    cc, cxx = compiler_preset[compiler]
+    profile = ConanProfile('qtwebkit_{0}_{1}'.format(compiler, arch))  # e.g. qtwebkit_msvc_x86
+
+    if compiler == "msvc":
+        profile.create()
+        set_compiler_environment(cc, cxx)
+    else:
+        set_compiler_environment(cc, cxx)
+        profile.create()
+
+    if arch == 'default':
+        arch = profile.get_arch()
+
+    profile.update('arch', arch)
+    profile.update('arch_build', arch)
+
+    if platform.system() == "Windows" and compiler == "gcc":
+        profile.update('compiler.threads', 'posix')
+        if arch == 'x86':
+            profile.update('compiler.exception', 'dwarf2')
+        if arch == 'x86_64':
+            profile.update('compiler.exception', 'seh')
+
+    return profile.name
+
+
+parser = argparse.ArgumentParser(description='Build QtWebKit with Conan. For installation of build product into Qt, use --install option')
+
+parser.add_argument("--qt", help="Root directory of Qt Installation", type=str, metavar="QTDIR")
+parser.add_argument(
+    "--cmakeargs", help="Space separated values that should be passed as CMake arguments", default="", type=str)
+parser.add_argument("--ninjaargs", help="Ninja arguments",
+                    default="", type=str)
+parser.add_argument(
+    "--build_directory", help="Name of build dirtectory (defaults to build)", default="build", type=str)
+parser.add_argument("--compiler", help="Specify compiler for build (msvc, gcc, clang)", default=None, choices=['gcc', 'msvc', 'clang'], type=str)
+parser.add_argument("--configure", help="Execute the configuration step. When specified, build won't run unless --build is specified", action="store_true")
+parser.add_argument("--build", help="Execute the build step. When specified, configure won't run unless --configure is specified", action="store_true")
+parser.add_argument("--install", help="Execute the install step. When specified, configure and build steps WILL run without changes", action="store_true")
+parser.add_argument("--profile", help="Name of conan profile provided by user. Note: compiler and profile options are mutually exclusive", type=str)
+parser.add_argument("--arch", help="32 bit or 64 bit build, leave blank for autodetect", default="default", choices=['x86', 'x86_64'])
+parser.add_argument("--build_type", help="Name of CMake build configuration to use", default="Release", choices=['', 'Release', 'Debug'])
+parser.add_argument("--install_prefix", help="Set installation prefix to the given path (defaults to Qt directory)", default=None)
+
+args = parser.parse_args()
+
+# Always print commands run by conan internally
+os.environ["CONAN_PRINT_RUN_COMMANDS"] = "1"
+
+src_directory = str(pathlib.Path(__file__).resolve().parents[2])
+
+if os.path.isabs(args.build_directory):
+    build_directory = args.build_directory
+else:
+    build_directory = os.path.join(src_directory, args.build_directory)
+
+conanfile_path = os.path.join(src_directory, "Tools", "qt", "conanfile.py")
+
+print("Path of build directory:" + build_directory)
+
+run_command("conan remote add -f bincrafters https://api.bintray.com/conan/bincrafters/public-conan")
+run_command("conan remote add -f qtproject https://api.bintray.com/conan/qtproject/conan")
+
+if args.profile and args.compiler:
+    sys.exit("Error: --compiler and --profile cannot be specified at the same time")
+
+if not args.profile:
+    profile_name = create_profile(args.compiler, args.arch)
+else:
+    profile_name = args.profile
+
+build_vars = f'-o qt="{args.qt}" -o cmakeargs="{args.cmakeargs}" \
+-o build_type="{args.build_type}" '
+
+if args.install_prefix:
+    build_vars += ' -o install_prefix="{}"'.format(args.install_prefix)
+elif args.qt:
+    build_vars += ' -o install_prefix="{}"'.format(args.qt)
+
+if args.ninjaargs:
+    os.environ["NINJAFLAGS"] = args.ninjaargs
+
+if not args.configure and not args.build:
+    # If we have neither --configure nor --build, we should do both configure and build (but install only if requested)
+    args.configure = True
+    args.build = True
+
+if args.configure:
+    run_command('conan install {0} -if "{1}" --build=missing --profile={2} {3}'.format(conanfile_path, build_directory, profile_name, build_vars))
+
+configure_flag = "--configure" if args.configure else ""
+build_flag = "--build" if args.build else ""
+install_flag = "--install" if args.install else ""
+
+run_command('conan build {0} {1} {2} -sf "{3}" -bf "{4}" "{5}"'.format(configure_flag, build_flag, install_flag, src_directory, build_directory, conanfile_path))
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/conanfile.py qtwebkit-opensource-src-5.212/Tools/qt/conanfile.py
--- qtwebkit-5.212.0-alpha4/Tools/qt/conanfile.py	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/conanfile.py	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,172 @@
+# Copyright (C) 2020 Konstantin Tokarev <annulen@yandex.ru>
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+from conans import ConanFile, CMake, tools
+import os
+import shlex
+import argparse
+
+
+class QtWebKitConan(ConanFile):
+    name = "qtwebkit"
+    version = "5.212.0-alpha4"
+    license = "LGPL-2.0-or-later, LGPL-2.1-or-later, BSD-2-Clause"
+    url = "https://github.com/qtwebkit/qtwebkit"
+    description = "Qt port of WebKit"
+    topics = ("qt", "browser-engine", "webkit", "qt5", "qml", "qtwebkit")
+    settings = "os", "compiler", "arch", "arch_build"
+    generators = "cmake", "virtualenv", "txt"
+    exports_sources = "../../*"
+    no_copy_source = True
+    options = {
+        "qt": "ANY",
+        "cmakeargs": "ANY",
+        "build_type": "ANY",
+        "install_prefix": "ANY"
+    }
+    default_options = {
+        "install_prefix": None,
+
+        "icu:shared": True,
+        "icu:data_packaging": "library",
+
+        "libxml2:shared": True,
+        "libxml2:iconv": False,
+        "libxml2:icu": True,
+        "libxml2:zlib": False,
+
+        "libxslt:shared": True,
+
+        "libjpeg-turbo:shared": False,
+        "zlib:shared": False,
+        "libpng:shared": False,
+        "sqlite3:shared": False,
+        "libwebp:shared": False
+    }
+
+    def build_requirements(self):
+        if self.settings.os == 'Linux':
+            if not tools.which('pkg-config'):
+                self.build_requires(
+                    'pkg-config_installer/0.29.2@bincrafters/stable')
+
+        if self.settings.os == 'Windows': # TODO: Fix msys perl or at least allow using non-msys one from PATH
+            self.build_requires("strawberryperl/5.30.0.1")
+
+        if not tools.which("gperf"):
+            self.build_requires("gperf_installer/3.1@conan/stable")
+        if not tools.which("ruby"):
+            self.build_requires("ruby_installer/2.6.3@bincrafters/stable")
+        if not tools.which("bison"):
+            self.build_requires("bison_installer/3.3.2@bincrafters/stable")
+        if not tools.which("flex"):
+            self.build_requires("flex_installer/2.6.4@bincrafters/stable")
+        if not tools.which("ninja"):
+            self.build_requires("ninja/[>=1.9.0]")
+        if not tools.which("cmake"):
+            self.build_requires("cmake/[>=3.18.2]")
+
+    def requirements(self):
+        # TODO: Handle case when custom ICU is needed (AppStore etc., MACOS_USE_SYSTEM_ICU=OFF in CMake)
+        if self.settings.os == 'Windows':
+            self.requires("icu/65.1@qtproject/stable")
+            self.requires("libxml2/2.9.10@qtproject/stable")
+            self.requires("libxslt/1.1.34@qtproject/stable")
+            self.requires("zlib/1.2.11")
+
+        if self.settings.os == 'Windows' or self.settings.os == 'Macos':
+            # FIXME: Pass Qt version, handle more versions
+            qt_version = "5.15.1"
+            if qt_version == "5.14.1":
+                self.requires("sqlite3/3.30.1")
+                self.requires("libjpeg-turbo/2.0.3@qtproject/stable")
+                self.requires("libpng/1.6.37")
+            if qt_version == "5.15.1":
+                self.requires("sqlite3/3.32.3")
+                self.requires("libjpeg-turbo/2.0.5@qtproject/stable")
+                self.requires("libpng/1.6.37")
+
+            self.requires("libwebp/1.1.0")
+
+    def build(self):
+        cmake = CMake(self, set_cmake_flags=True)
+        cmake.generator = "Ninja"
+        cmake.verbose = False
+        cmake.definitions["QT_CONAN_DIR"] = self.build_folder
+        cmake.definitions["QT_CONAN_FILE"] = __file__
+
+        # if self.options.use_ccache:
+        #    cmake.definitions["CMAKE_C_COMPILER_LAUNCHER"] = "ccache"
+        #    cmake.definitions["CMAKE_CXX_COMPILER_LAUNCHER"] = "ccache"
+
+        if self.options.qt:
+            cmake.definitions["Qt5_DIR"] = os.path.join(
+                str(self.options.qt), "lib", "cmake", "Qt5")
+            print("Qt5 directory:" + cmake.definitions["Qt5_DIR"])
+
+        if self.options.build_type:
+            cmake.build_type = str(self.options.build_type)
+
+        if self.options.cmakeargs:
+            cmake_flags = shlex.split(str(self.options.cmakeargs))
+        else:
+            cmake_flags = None
+
+        if "NINJAFLAGS" in os.environ:
+            parser = argparse.ArgumentParser()
+            parser.add_argument('-j', default=None, type=int)
+            jarg, ninja_flags = parser.parse_known_args(
+                shlex.split(os.environ["NINJAFLAGS"]))
+            if jarg.j:
+                os.environ['CONAN_CPU_COUNT'] = str(jarg.j)
+            ninja_flags.insert(0, '--')
+        else:
+            ninja_flags = None
+
+        if self.options.install_prefix:
+            cmake.definitions["CMAKE_INSTALL_PREFIX"] = str(self.options.install_prefix)
+        else:
+            del cmake.definitions["CMAKE_INSTALL_PREFIX"]
+
+        print(self.source_folder)
+        print()
+        print(self.build_folder)
+
+        cmake.configure(args=cmake_flags)
+        cmake.build(args=ninja_flags)
+        cmake.install()
+
+    def imports(self):
+        if self.settings.os == 'Windows':
+            self.copy("icudt65.dll", "./bin", "bin")
+            self.copy("icuin65.dll", "./bin", "bin")
+            self.copy("icuuc65.dll", "./bin", "bin")
+            # Visual Studio
+            self.copy("libxml2.dll", "./bin", "bin")
+            self.copy("libxslt.dll", "./bin", "bin")
+            # MinGW
+            self.copy("libxml2-2.dll", "./bin", "bin")
+            self.copy("libxslt-1.dll", "./bin", "bin")
+
+    def package(self):
+        pass
+
+    def package_info(self):
+        pass
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/installed-files-checker.py qtwebkit-opensource-src-5.212/Tools/qt/installed-files-checker.py
--- qtwebkit-5.212.0-alpha4/Tools/qt/installed-files-checker.py	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/installed-files-checker.py	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,150 @@
+#!/usr/bin/env python3
+# Copyright (C) 2020 Konstantin Tokarev <annulen@yandex.ru>
+# Copyright (C) 2020 Rajagopalan-Gangadharan <g.raju2000@gmail.com>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+# THE POSSIBILITY OF SUCH DAMAGE.
+
+import sys
+from jinja2 import Environment, FileSystemLoader
+import argparse
+import os
+
+parser = argparse.ArgumentParser(description='Checker for Qtwebkit Binaries')
+parser.add_argument(
+    "--version", help=r"Version history of the form {major_version}.{minor_version}.{ver_patch}", required=True)
+parser.add_argument("--install_prefix", help="QtWebkit Install Prefix")
+parser.add_argument("--os", help="Operating system",
+                    required=True, choices=["linux", "macos", "windows"])
+parser.add_argument("--template", help='Relative path to template file',
+                    default="template/QtBinaryChecklist.txt")
+parser.add_argument("--release", help='Release build', action='store_true')
+parser.add_argument("--debug", help='Debug build', action='store_true')
+parser.add_argument("--qt_install_headers", help='Qt headers install path')
+parser.add_argument("--qt_install_libs", help='Qt libraries install path')
+parser.add_argument("--qt_install_archdata", help='Qt archdata install path')
+parser.add_argument("--qt_install_libexecs", help='Qt libexecs install path')
+parser.add_argument("--force_debug_info",
+                    help='Enable debug symbols for release builds', action='store_true')
+parser.add_argument("--icu_version", help='ICU version')
+parser.add_argument(
+    "--toolchain", help='Toolchain used e.g. msvc, mingw for windows')
+parser.add_argument("-v", "--verbose", action='store_true',
+                    help='Print paths of checked files')
+parser.add_argument("--no-wk2", action="store_false", dest="wk2",
+                    help='Disable wk2 specific files')
+
+args = parser.parse_args()
+
+if not args.release and not args.debug:
+    print("Please specify at least one build type!")
+    exit(1)
+
+template_abspath = os.path.abspath(args.template)
+template_folder = os.path.dirname(template_abspath)
+template_name = os.path.basename(template_abspath)
+
+file_loader = FileSystemLoader(template_folder)  # directory of template file
+env = Environment(loader=file_loader)
+
+template = env.get_template(template_name)  # load template file
+
+major, minor, patch = args.version.split('.')
+
+check_list = template.render(os=args.os,
+                             major=major, version=args.version, release=args.release, debug=args.debug,
+                             icu_version=args.icu_version, wk2=args.wk2,
+                             force_debug_info=args.force_debug_info, toolchain=args.toolchain).split('\n')
+
+
+def print_error(msg):
+    print(msg, file=sys.stderr)
+
+
+def custom_args_verify(check_list):
+    error_list = []
+
+    for line in check_list:
+        if line.rstrip():
+            line = line.lstrip()
+
+            if args.verbose:
+                print(line)
+
+            if line.startswith('include/'):
+                chk_path = os.path.join(
+                    args.qt_install_headers, line[len('include/'):])
+            elif line.startswith('lib/'):
+                chk_path = os.path.join(
+                    args.qt_install_libs, line[len('lib/'):])
+            elif line.startswith('mkspecs/') or line.startswith('qml/'):
+                chk_path = os.path.join(args.qt_install_archdata, line)
+            elif line.startswith('libexec/'):
+                chk_path = os.path.join(
+                    args.qt_install_libexecs, line[len('libexec/'):])
+
+            if not os.path.exists(chk_path):
+                error_list.append(chk_path)
+                if args.verbose:
+                    print(line, "\t", "fail")
+            else:
+                if args.verbose:
+                    print(line, "\t", "ok")
+
+    return error_list
+
+
+def default_verify(check_list):
+    error_list = []
+
+    for line in check_list:
+        if line.rstrip():
+            line = line.lstrip()
+
+            chk_path = os.path.join(args.install_prefix, line)
+            if not os.path.exists(chk_path):
+                error_list.append(chk_path)
+                if args.verbose:
+                    print(line, "\t", "fail")
+            else:
+                if args.verbose:
+                    print(line, "\t", "ok")
+
+    return error_list
+
+
+if not args.qt_install_headers and not args.install_prefix:
+    print_error("Specify either the install prefix or custom locations")
+    exit(1)
+
+res = custom_args_verify(
+    check_list) if args.qt_install_headers else default_verify(check_list)
+
+if len(res) != 0:
+    print_error("Errors found files below are missing:")
+    for err in res:
+        print_error(err)
+    exit(1)
+
+
+#python3 installed-files-checker.py --version 5.212.0 --build /mnt/c/qtwebkit/build --os linux
+#
+# py installed-files-checker.py --version 5.20.0 --qt "C:/Qt/5.14.2/msvc2017_64" --build "C:/qtwebkit/build/" --os windows --icu_version=65
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/jhbuild.modules qtwebkit-opensource-src-5.212/Tools/qt/jhbuild.modules
--- qtwebkit-5.212.0-alpha4/Tools/qt/jhbuild.modules	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/jhbuild.modules	2020-09-22 21:30:04.000000000 +1000
@@ -91,6 +91,7 @@
   <autotools id="glib"
              autogen-sh="configure"
              autogenargs="--disable-dtrace --disable-gtk-doc-html">
+    <makeargs value="CFLAGS+=-Wno-error"/>
     <branch module="/pub/GNOME/sources/glib/2.44/glib-2.44.1.tar.xz" version="2.44.1"
             repo="ftp.gnome.org"
             hash="sha256:8811deacaf8a503d0a9b701777ea079ca6a4277be10e3d730d2112735d5eca07">
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/license_writer.sh qtwebkit-opensource-src-5.212/Tools/qt/license_writer.sh
--- qtwebkit-5.212.0-alpha4/Tools/qt/license_writer.sh	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/license_writer.sh	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,27 @@
+#!/bin/bash -x
+if [[ "${TOOLCHAIN}" =~ "win64_mingw" ]]; then
+        SUBDIR="${TOOLCHAIN/win64_/}_64"
+    elif [[ "${TOOLCHAIN}" =~ "win32_mingw" ]]; then
+        SUBDIR="${TOOLCHAIN/win32_/}_32"
+    elif [[ "${TOOLCHAIN}" =~ "win64_msvc" ]]; then
+        SUBDIR="${TOOLCHAIN/win64_/}"
+    elif [[ "${TOOLCHAIN}" =~ "win32_msvc" ]]; then
+        SUBDIR="${TOOLCHAIN/win32_/}"
+    else
+        SUBDIR="${TOOLCHAIN}"
+    fi
+
+CONF_FILE="${QTDIR}/bin/qt.conf"
+echo "[Paths]" > ${CONF_FILE}
+echo "Prefix = .." >> ${CONF_FILE}
+
+# Adjust the license to be able to run qmake
+# sed with -i requires intermediate file on Mac OS
+PRI_FILE="${QTDIR}/mkspecs/qconfig.pri"
+sed -i.bak 's/Enterprise/OpenSource/g' "${PRI_FILE}"
+sed -i.bak 's/licheck.*//g' "${PRI_FILE}"
+rm "${PRI_FILE}.bak"
+
+# Print the directory so that the caller can
+# adjust the PATH variable.
+echo $(dirname "${CONF_FILE}")
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/merge.conf qtwebkit-opensource-src-5.212/Tools/qt/merge.conf
--- qtwebkit-5.212.0-alpha4/Tools/qt/merge.conf	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/merge.conf	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,18 @@
+[merge]
+src_branch: qtwebkit-stable
+dst_branch: qtwebkit-dev
+tmp_branch: tmp-%(src_branch)s-%(dst_branch)s
+
+[scripts]
+pre_merge:
+    echo "pre-merge "
+    git mv Source/WebKit Source/WebKit2
+    git mv Source/WebKitLegacy/ Source/WebKit
+    git commit -m 'tmp mv'
+
+post_merge:
+    echo "post-merge  "
+    git mv Source/WebKit Source/WebKitLegacy
+    git mv Source/WebKit2 Source/WebKit
+    git commit -m 'undo tmp mv'
+
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/merge-helper.py qtwebkit-opensource-src-5.212/Tools/qt/merge-helper.py
--- qtwebkit-5.212.0-alpha4/Tools/qt/merge-helper.py	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/merge-helper.py	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,186 @@
+#!/usr/bin/env python
+# Copyright (C) 2020 Sergey Lapin <slapinid@gmail.com>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+# THE POSSIBILITY OF SUCH DAMAGE.
+
+import subprocess
+import os
+import sys
+from ConfigParser import ConfigParser
+from exceptions import Exception
+
+config = {}
+
+conflict_message = """
+Merge ended up having conflicts.
+
+Use "git status" command to find-out which conflicts require resolution.
+
+Resove them by editing files, adding and removing files, then commit the
+result.
+"""
+
+
+def configure():
+    global config
+    conf = ConfigParser()
+    conf_name = os.path.join(os.path.dirname(
+        os.path.abspath(sys.argv[0])), "merge.conf")
+    print "config: " + conf_name
+    conf.read([conf_name])
+    config["src_branch"] = conf.get("merge", "src_branch")
+    config["dst_branch"] = conf.get("merge", "dst_branch")
+    config["tmp_branch"] = conf.get("merge", "tmp_branch")
+    config["pre_merge"] = conf.get("scripts", "pre_merge")
+    config["post_merge"] = conf.get("scripts", "post_merge")
+    config["keep_tmp"] = False
+    config["reuse_tmp"] = False
+    for p in sys.argv[1:]:
+        if p == "--keep-tmp":
+            config["keep_tmp"] = True
+        elif p == "--reuse-tmp":
+            config["reuse_tmp"] = True
+
+
+def git_new_branch(branch, commit):
+    result = subprocess.call(["git", "checkout", "-b", branch, commit])
+    return result
+
+
+def try_merge():
+    result = subprocess.call(["git", "merge", config["src_branch"]])
+    if result != 0:
+        subprocess.call(["git", "merge", "--abort"])
+    return result
+
+
+def try_merge_with_fix():
+    result = subprocess.call(["git", "merge", config["src_branch"]])
+    if result != 0:
+        print conflict_message
+        unmerged = git_get_unmerged_files()
+        while len(unmerged) > 0:
+            print "Found " + str(len(unmerged)) + " unmerged files."
+            for f in unmerged:
+                print f
+            print "Please fix conflicts and commit result."
+            os.environ["PS1"] = "git conflicts(^D to exit)\n> "
+            os.system("bash  --norc --noprofile -i")
+            unmerged = git_get_unmerged_files()
+    return result
+
+
+def pre_merge():
+    result = os.system(config["pre_merge"])
+    return result
+
+
+def post_merge():
+    result = os.system(config["post_merge"])
+    return result
+
+
+def git_switch_branch(branch):
+    result = subprocess.call(["git", "checkout", branch])
+    return result
+
+
+def git_checkout_branch_files(branch):
+    result = subprocess.call(["git", "checkout", branch, "--", "*"])
+    return result
+
+
+def git_remove_branch(branch):
+    result = subprocess.call(["git", "branch", "-D",  branch])
+    return result
+
+
+def git_write_tree():
+    result = subprocess.check_output(["git", "write-tree"])
+    return result.strip()
+
+
+def git_get_unmerged_files():
+    result = subprocess.check_output(["git", "ls-files", "-u"])
+    data = result.strip()
+    ret = []
+    if data.find("\n") >= 0:
+        for l in data.split("\n"):
+            data = l.split()
+            if len(data) == 4:
+                if not data[3] in ret:
+                    ret.append(data[3])
+
+    return ret
+
+
+def git_commit_tree(branch, tree):
+    result = subprocess.check_output(["git",
+                                      "commit-tree", "-p", "HEAD", "-p",
+                                      branch, "-m", "Merge from %s " % (branch), tree])
+    return result.strip()
+
+
+def git_update_ref(commit):
+    result = subprocess.call(["git", "update-ref",
+                              "-m",  "commit: Merge from %s" % (config["src_branch"]), "HEAD", commit])
+    return result
+
+
+configure()
+print config
+
+if not config["reuse_tmp"]:
+    result = git_new_branch(config["tmp_branch"], config["dst_branch"])
+    if result != 0:
+        raise Exception("Can't create branch " + config["tmp_branch"])
+else:
+    result = git_switch_branch(config["tmp_branch"])
+    if result != 0:
+        raise Exception("Can't switch to branch " + config["tmp_branch"])
+if not config["reuse_tmp"] or try_merge() != 0:
+    result = pre_merge()
+    if result != 0:
+        raise Exception("pre_merge section failed")
+
+    result = try_merge_with_fix()
+
+    result = post_merge()
+    if result != 0:
+        raise Exception("post_merge section failed")
+
+print "Checking out destination branch..."
+git_switch_branch(config["dst_branch"])
+print "Checking out temporary branch files..."
+git_checkout_branch_files(config["tmp_branch"])
+print "Finishing merge..."
+tree = git_write_tree()
+commit = git_commit_tree(config["src_branch"], tree)
+result = git_update_ref(commit)
+if result != 0:
+    raise Exception("Could not commit merge")
+print "Merge done..."
+if not config["keep_tmp"]:
+    print "Removing temporary branch"
+    git_remove_branch(config["tmp_branch"])
+else:
+    print "Temporary branch " + config["tmp_branch"] + " was kept"
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/QtBinaryChecklist.txt qtwebkit-opensource-src-5.212/Tools/qt/QtBinaryChecklist.txt
--- qtwebkit-5.212.0-alpha4/Tools/qt/QtBinaryChecklist.txt	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/QtBinaryChecklist.txt	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,290 @@
+{% if wk2 %}
+    include/QtWebKit/{{version}}/QtWebKit/private/qhttpheader_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquicknetworkreply_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquicknetworkrequest_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquickurlschemedelegate_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquickwebpage_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquickwebpage_p_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquickwebview_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qquickwebview_p_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qtwebsecurityorigin_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebchannelwebkittransport_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebdatabase_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebdownloaditem_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebdownloaditem_p_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebelement_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebhistory_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebiconimageprovider_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebkittest_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebloadrequest_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebnavigationhistory_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebnavigationhistory_p_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebnavigationrequest_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebpermissionrequest_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebplugindatabase_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebpreferences_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebpreferences_p_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebscriptworld_p.h
+    include/QtWebKit/{{version}}/QtWebKit/private/qwebsecurityorigin_p.h
+    qml/QtWebKit/plugins.qmltypes
+    qml/QtWebKit/qmldir
+    qml/QtWebKit/experimental/qmldir
+{% endif %}
+include/QtWebKit/QWebDatabase
+include/QtWebKit/QWebElement
+include/QtWebKit/QWebElementCollection
+include/QtWebKit/QWebFullScreenRequest
+include/QtWebKit/QWebFullScreenVideoHandler
+include/QtWebKit/QWebHapticFeedbackPlayer
+include/QtWebKit/QWebHistory
+include/QtWebKit/QWebHistoryInterface
+include/QtWebKit/QWebHistoryItem
+include/QtWebKit/QWebKitPlatformPlugin
+include/QtWebKit/QWebNotificationData
+include/QtWebKit/QWebNotificationPresenter
+include/QtWebKit/QWebPluginFactory
+include/QtWebKit/QWebSecurityOrigin
+include/QtWebKit/QWebSelectData
+include/QtWebKit/QWebSelectMethod
+include/QtWebKit/QWebSettings
+include/QtWebKit/QWebSpellChecker
+include/QtWebKit/QWebTouchModifier
+include/QtWebKit/QtWebKit
+include/QtWebKit/QtWebKitDepends
+include/QtWebKit/QtWebKitVersion
+include/QtWebKit/qtwebkitversion.h
+include/QtWebKit/qwebdatabase.h
+include/QtWebKit/qwebelement.h
+include/QtWebKit/qwebfullscreenrequest.h
+include/QtWebKit/qwebhistory.h
+include/QtWebKit/qwebhistoryinterface.h
+include/QtWebKit/qwebkitglobal.h
+include/QtWebKit/qwebkitplatformplugin.h
+include/QtWebKit/qwebpluginfactory.h
+include/QtWebKit/qwebsecurityorigin.h
+include/QtWebKit/qwebsettings.h
+include/QtWebKitWidgets/{{version}}/QtWebKitWidgets/private/qwebframe_p.h
+include/QtWebKitWidgets/{{version}}/QtWebKitWidgets/private/qwebinspector_p.h
+include/QtWebKitWidgets/{{version}}/QtWebKitWidgets/private/qwebpage_p.h
+include/QtWebKitWidgets/{{version}}/QtWebKitWidgets/private/qwebviewaccessible_p.h
+include/QtWebKitWidgets/QGraphicsWebView
+include/QtWebKitWidgets/QWebFrame
+include/QtWebKitWidgets/QWebHitTestResult
+include/QtWebKitWidgets/QWebInspector
+include/QtWebKitWidgets/QWebPage
+include/QtWebKitWidgets/QWebView
+include/QtWebKitWidgets/QtWebKitWidgets
+include/QtWebKitWidgets/QtWebKitWidgetsDepends
+include/QtWebKitWidgets/QtWebKitWidgetsVersion
+include/QtWebKitWidgets/qgraphicswebview.h
+include/QtWebKitWidgets/qtwebkitwidgetsversion.h
+include/QtWebKitWidgets/qwebframe.h
+include/QtWebKitWidgets/qwebinspector.h
+include/QtWebKitWidgets/qwebpage.h
+include/QtWebKitWidgets/qwebview.h
+lib/cmake/Qt5WebKit/Qt5WebKitConfig.cmake
+lib/cmake/Qt5WebKit/Qt5WebKitConfigVersion.cmake
+lib/cmake/Qt5WebKit/WebKitTargets.cmake
+lib/cmake/Qt5WebKitWidgets/Qt5WebKitWidgetsConfig.cmake
+lib/cmake/Qt5WebKitWidgets/Qt5WebKitWidgetsConfigVersion.cmake
+lib/cmake/Qt5WebKitWidgets/Qt5WebKitWidgetsTargets.cmake
+mkspecs/modules/qt_lib_webkit.pri
+mkspecs/modules/qt_lib_webkit_private.pri
+mkspecs/modules/qt_lib_webkitwidgets.pri
+mkspecs/modules/qt_lib_webkitwidgets_private.pri
+
+{% if release %}
+    lib/cmake/Qt5WebKit/WebKitTargets-release.cmake
+    lib/cmake/Qt5WebKitWidgets/Qt5WebKitWidgetsTargets-release.cmake
+{% endif %}
+
+{% if os=="linux" %}
+    {% if release %}
+        lib/libQt5WebKit.so
+        lib/libQt5WebKit.so.{{major}}
+        lib/libQt5WebKit.so.{{version}}
+        lib/libQt5WebKitWidgets.so
+        lib/libQt5WebKitWidgets.so.{{major}}
+        lib/libQt5WebKitWidgets.so.{{version}}
+        libexec/QtWebPluginProcess
+    {% endif %}
+
+    {% if force_debug_info %}
+        lib/libQt5WebKit.so.{{version}}.debug
+        lib/libQt5WebKitWidgets.so.{{version}}.debug
+    {% endif %}
+
+{% elif os=="macos" %}
+    lib/QtWebKit.framework/Headers
+    lib/QtWebKit.framework/QtWebKit
+    lib/QtWebKit.framework/Resources
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qhttpheader_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebdatabase_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebelement_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebhistory_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebplugindatabase_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebscriptworld_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebsecurityorigin_p.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebDatabase
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebElement
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebElementCollection
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebFullScreenRequest
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebFullScreenVideoHandler
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebHapticFeedbackPlayer
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebHistory
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebHistoryInterface
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebHistoryItem
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebKitPlatformPlugin
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebNotificationData
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebNotificationPresenter
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebPluginFactory
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebSecurityOrigin
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebSelectData
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebSelectMethod
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebSettings
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebSpellChecker
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QWebTouchModifier
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QtWebKit
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QtWebKitDepends
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/QtWebKitVersion
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qtwebkitversion.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebdatabase.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebelement.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebfullscreenrequest.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebhistory.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebhistoryinterface.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebkitglobal.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebkitplatformplugin.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebpluginfactory.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebsecurityorigin.h
+    lib/QtWebKit.framework/Versions/{{major}}/Headers/qwebsettings.h
+    {% if wk2 %}
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquicknetworkreply_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquicknetworkrequest_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquickurlschemedelegate_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquickwebpage_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquickwebpage_p_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquickwebview_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qquickwebview_p_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qtwebsecurityorigin_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebchannelwebkittransport_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebdownloaditem_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebdownloaditem_p_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebiconimageprovider_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebkittest_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebloadrequest_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebnavigationhistory_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebnavigationhistory_p_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebnavigationrequest_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebpermissionrequest_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebpreferences_p.h
+        lib/QtWebKit.framework/Versions/{{major}}/Headers/{{version}}/QtWebKit/private/qwebpreferences_p_p.h
+    {% endif %}
+    lib/QtWebKit.framework/Versions/{{major}}/QtWebKit
+    lib/QtWebKit.framework/Versions/{{major}}/Resources/Info.plist
+    lib/QtWebKit.framework/Versions/Current
+    lib/QtWebKitWidgets.framework/Headers
+    lib/QtWebKitWidgets.framework/QtWebKitWidgets
+    lib/QtWebKitWidgets.framework/Resources
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/{{version}}/QtWebKitWidgets/private/qwebframe_p.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/{{version}}/QtWebKitWidgets/private/qwebinspector_p.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/{{version}}/QtWebKitWidgets/private/qwebpage_p.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/{{version}}/QtWebKitWidgets/private/qwebviewaccessible_p.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QGraphicsWebView
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QWebFrame
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QWebHitTestResult
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QWebInspector
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QWebPage
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QWebView
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QtWebKitWidgets
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QtWebKitWidgetsDepends
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/QtWebKitWidgetsVersion
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qgraphicswebview.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qtwebkitwidgetsversion.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qwebframe.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qwebinspector.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qwebpage.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Headers/qwebview.h
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/QtWebKitWidgets
+    lib/QtWebKitWidgets.framework/Versions/{{major}}/Resources/Info.plist
+    lib/QtWebKitWidgets.framework/Versions/Current
+
+{% elif os=="windows" %}
+    bin/icudt{{icu_version}}.dll
+    bin/icuin{{icu_version}}.dll
+    bin/icuuc{{icu_version}}.dll
+    {% if wk2 %}
+        bin/QtWebNetworkProcess.exe
+        bin/QtWebProcess.exe
+        bin/QtWebStorageProcess.exe
+    {% endif %}
+
+    {% if toolchain=="msvc" %}
+        bin/libxml2.dll
+        bin/libxslt.dll
+    {% elif toolchain=="mingw" %}
+        bin/libxslt-1.dll
+        bin/libxml2-2.dll
+    {% endif %}
+
+    {% if release %}
+        bin/Qt5WebKit.dll
+        bin/Qt5WebKitWidgets.dll
+
+        {% if force_debug_info and toolchain=="msvc" %}
+            bin/Qt5WebKit.pdb
+            bin/Qt5WebKitWidgets.pdb
+        {% endif %}
+
+        {% if toolchain=="msvc" %}
+            lib/Qt5WebKit.lib
+            lib/Qt5WebKitWidgets.lib
+        {% elif toolchain=="mingw" %}
+            lib/libQt5WebKitWidgets.a
+            lib/libQt5WebKit.a
+        {% endif %}
+
+        qml/QtWebKit/experimental/qmlwebkitexperimentalplugin.dll
+        qml/QtWebKit/qmlwebkitplugin.dll
+    {% endif %}
+
+    {% if debug %}
+        lib/cmake/Qt5WebKit/WebKitTargets-debug.cmake
+        lib/cmake/Qt5WebKitWidgets/Qt5WebKitWidgetsTargets-debug.cmake
+
+        {% if toolchain=="msvc" %}
+            bin/Qt5WebKitWidgetsd.dll
+            bin/Qt5WebKitd.dll
+        {% endif %}
+
+        {% if force_debug_info and toolchain=="msvc" %}
+            bin/Qt5WebKitd.pdb
+            bin/Qt5WebKitWidgetsd.pdb
+        {% endif %}
+
+        {% if toolchain=="msvc" %}
+            lib/Qt5WebKitd.lib
+            lib/Qt5WebKitWidgetsd.lib
+            qml/QtWebKit/experimental/qmlwebkitexperimentalplugind.dll
+            qml/QtWebKit/qmlwebkitplugind.dll
+        {% endif %}
+
+    {% endif %}
+
+{% endif %}
+
+
+{% if os=="linux" or os=="macos" %}
+    {% if wk2 %}
+        libexec/QtWebNetworkProcess
+        libexec/QtWebProcess
+        libexec/QtWebStorageProcess
+        qml/QtWebKit/experimental/libqmlwebkitexperimentalplugin.so
+        qml/QtWebKit/libqmlwebkitplugin.so
+    {% endif %}
+{% endif %}
+
+{% if os=="linux" or os=="windows" %}
+    lib/pkgconfig/Qt5WebKit.pc
+    lib/pkgconfig/Qt5WebKitWidgets.pc
+{% endif %}
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/qt-downloader qtwebkit-opensource-src-5.212/Tools/qt/qt-downloader
--- qtwebkit-5.212.0-alpha4/Tools/qt/qt-downloader	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/qt-downloader	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,404 @@
+#!/usr/bin/env python3
+
+import argparse
+import platform
+import requests
+import semantic_version
+import shutil
+import subprocess
+import sys
+import urllib.request
+from lxml import etree, html
+from pathlib import Path
+import os
+import shlex
+
+
+BaseUrl = 'https://download.qt.io/online/qtsdkrepository/'
+
+OsMap = {
+  'macos': 'mac_x64',
+  'linux': 'linux_x64',
+  'windows': 'windows_x86'
+}
+
+
+def key_by_value(dict, value):
+  return next((left for left, right in dict.items() if right == value), None)
+
+
+def decode_version(v):
+  v = list(v)
+  major = v.pop(0)
+  patch = v.pop() if len(v) > 1 else 0
+  minor = ''.join(v)
+  return '{}.{}.{}'.format(major, minor, patch)
+
+
+def deduce_os():
+  os_type = platform.system().lower()
+  if os_type == 'darwin':
+    os_type = 'macos'
+  return os_type
+
+
+def discover_dirs(url):
+  reply = requests.get(url)
+  page = html.fromstring(reply.content)
+  items = page.xpath('//table//tr[position()>2]//a[not(starts-with(@href, "/"))]/@href')
+  return [item for item in items if item.endswith('/')]
+
+
+def discover_kits(args):
+  os_dict = {}
+  os_types = discover_dirs(BaseUrl)
+  for os_type in os_types:
+    human_os = key_by_value(OsMap, os_type[:-1])
+    current_os = human_os if human_os is not None else os_type[:-1]
+    os_dict[current_os] = None
+
+    if not (args.os == 'discover' and args.all or args.os != 'discover' and args.os in [os_type[:-1], human_os]):
+      continue
+
+    targets_dict = {}
+    targets = discover_dirs(BaseUrl + os_type)
+    targets = [target for target in targets if target != 'root/']
+    for target in targets:
+      targets_dict[target[:-1]] = None
+
+      if not (args.target == 'discover' and args.all or args.target != 'discover' and args.target == target[:-1]):
+        continue
+
+      versions_dict = {}
+      versions = discover_dirs(BaseUrl + os_type + target)
+      for version in versions:
+        if version.startswith('tools_') or version.endswith('_preview/') or version.endswith('_wasm/') or '_src' in version or not version.startswith('qt5_'):
+          continue
+
+        ver = decode_version(version[len('qt5_'):-1])
+        versions_dict[ver] = None
+
+        if not (args.version == 'discover' and args.all or args.version != 'discover' and args.version != 'latest' and args.version == ver):
+          continue
+
+        toolchains = discover_dirs(BaseUrl + os_type + target + version)
+        toolchains = [toolchain.split('.')[2:] for toolchain in toolchains]
+        toolchains = [toolchain[-1] for toolchain in toolchains if len(toolchain) > 0]
+        toolchains = set([toolchain[:-1] for toolchain in toolchains if not toolchain.startswith('qt') and not toolchain.startswith('debug')])
+
+        versions_dict[ver] = toolchains
+
+      targets_dict[target[:-1]] = versions_dict
+
+    os_dict[current_os] = targets_dict
+
+  return os_dict
+
+
+def build_url(args):
+  ver = args.version.replace('.', '')
+  return BaseUrl + '{}/{}/qt5_{}/'.format(OsMap[args.os], args.target, ver)
+
+
+def toolchain_build_url(args, tools):
+  return BaseUrl + '{}/{}/tools_{}/'.format(OsMap[args.os], args.target, tools)
+
+
+def ossl_info(url, name):
+  reply = requests.get(url + "Updates.xml")
+  update_xml = etree.fromstring(reply.content)
+
+  for package in update_xml.xpath('//PackageUpdate'):
+    name = package.xpath('Name/text()')[0]
+    if name.startswith('qt.') and name.endswith('_{}'.format(name[len(name)-3:])):
+      version = package.xpath('Version/text()')[0]
+      archives = package.xpath('DownloadableArchives/text()')[0].split(', ')
+      return (name, version, archives)
+
+  print('Update.xml does not contain proper entry for Qt kit', file=sys.stderr)
+  return None
+
+
+def mingw_info(url, mingw):
+  reply = requests.get(url + "Updates.xml")
+  update_xml = etree.fromstring(reply.content)
+
+  for package in update_xml.xpath('//PackageUpdate'):
+    name = package.xpath('Name/text()')[0]
+    if name.startswith('qt.') and name.endswith('.{}'.format(mingw)):
+      version = package.xpath('Version/text()')[0]
+      archives = package.xpath('DownloadableArchives/text()')[0].split(', ')
+      return (name, version, archives)
+
+  print('Update.xml does not contain proper entry for Qt kit', file=sys.stderr)
+  return None
+
+
+def get_info(url, version, toolchain):
+  reply = requests.get(url + "Updates.xml")
+  update_xml = etree.fromstring(reply.content)
+
+  ver = version.replace('.', '')
+
+  for package in update_xml.xpath('//PackageUpdate'):
+    name = package.xpath('Name/text()')[0]
+    if name.startswith('qt.') and name.endswith('.{}.{}'.format(ver, toolchain)):
+      version = package.xpath('Version/text()')[0]
+      archives = package.xpath('DownloadableArchives/text()')[0].split(', ')
+      return (name, version, archives)
+
+  print('Update.xml does not contain proper entry for Qt kit', file=sys.stderr)
+  return None
+
+
+def download_and_extract(archives_url, archives, output, req_modules):
+  for archive in archives:
+    module = archive.split('-')[0]
+    if len(req_modules) != 0 and (module not in req_modules):
+        continue
+    try:
+      print('Downloading module {}... '.format(module), end='', flush=True)
+      with urllib.request.urlopen(archives_url + archive) as response, open(archive, 'wb') as out_file:
+        shutil.copyfileobj(response, out_file)
+
+      print('\rExtracting module {}... '.format(module), end='', flush=True)
+      subprocess.run('7z x {0} -o{1}'.format(archive, output), shell=True, check=True,
+        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+      print('\rInstalled module {} successfully'.format(module))
+    except subprocess.CalledProcessError as e:
+      print('Error: {}'.format(e))
+
+      os_type = deduce_os()
+      suggestion = ''
+      if os_type == 'linux':
+        suggestion = ' Run sudo apt install p7zip-full on Ubuntu'
+      elif os_type == 'macos':
+        suggestion = ' Run brew install p7zip on macOS'
+        
+      raise RuntimeError('Check that 7z command is in your PATH.{}'.format(suggestion))
+    except KeyboardInterrupt:
+      print('Interrupted')
+      raise KeyboardInterrupt
+    finally:
+      Path(archive).unlink()
+
+  print('Finished installation')
+
+
+def show_discover_context(args, parser):
+  if args.os != 'discover':
+    if args.os == 'auto':
+      args.os = deduce_os()
+
+    print('OS type: {}'.format(args.os))
+
+  if args.target != 'discover':
+    print('Target: {}'.format(args.target))
+
+  if args.version != 'discover':
+    if args.version == 'latest':
+      print('Discovering latest version... ', end='')
+      kits = discover_kits(args)
+      print('Done')
+      check_os_type(args, kits)
+      targets = kits[args.os]
+      check_targets(args, targets)
+      versions = targets[args.target]
+      args.version = str(sorted(map(semantic_version.Version, versions.keys()))[-1])
+    elif not semantic_version.validate(args.version):
+      print('Wrong version: {}. Should follow Semantic Versioning format: major.minor.patch\n'.format(args.version), file=sys.stderr)
+      parser.print_help()
+      sys.exit(1)
+
+    print('Qt version: {}'.format(args.version))
+
+  if args.toolchain != 'discover':
+    print('Toolchain: {}'.format(args.toolchain))
+
+
+def show_discovered_parameters(args, params, labels):
+  print('Discovering available ', end='')
+  
+  discoverables = []
+  for index, param in enumerate(params):
+    if param == 'discover':
+      discoverables.append(labels[index])
+
+  if not args.all:
+    discoverables = discoverables[:1]
+
+  if len(discoverables) == 1:
+    print('{}...'.format(discoverables[0]), end='', flush=True)
+  elif len(discoverables) == 2:
+    print('{}...'.format(' and '.join(discoverables)), end='', flush=True)
+  else:
+    print('{}, and {}...'.format(', '.join(discoverables[:-1]), discoverables[-1]), end='', flush=True)
+
+
+def show_os_types_only(kits):
+  print('  Choose from: {}'.format(', '.join(sorted(kits.keys()))))
+
+
+def show_targets_only(targets):
+  print('  Choose from: {}'.format(', '.join(sorted(targets.keys()))))
+
+
+def show_versions_only(versions):
+  print('  Choose from: {}'.format(', '.join(map(str, sorted(map(semantic_version.Version, versions.keys()))))))
+
+
+def show_toolchains_only(toolchains):
+  print('  Choose from: {}'.format(', '.join(sorted(toolchains))))
+
+
+def check_os_type(args, kits):
+  if not args.os in kits:
+    print('  Unknown OS type: {}'.format(args.os))
+    show_os_types_only(kits)
+    sys.exit(1)
+
+
+def check_targets(args, targets):
+  if not args.target in targets:
+    print('  Unknown target: {}'.format(args.target))
+    show_targets_only(targets)
+    sys.exit(1)
+
+
+def check_versions(args, versions):
+  if not args.version in versions:
+    print('  Unknown version: {}'.format(args.version))
+    show_versions_only(versions)
+    sys.exit(1)
+
+
+def check_toolchains(args, toolchains):
+  if not args.toolchain in toolchains:
+    print('  Unknown toolchain: {}'.format(args.toolchain))
+    show_toolchains_only(toolchains)
+    sys.exit(1)
+
+def show_os_types_and_all(kits, indent = 0):
+  for os_type, targets in kits.items():
+    print('  {}{}:'.format('  ' * indent, os_type))
+    show_targets_and_all(targets, indent + 1)
+
+
+def show_targets_and_all(targets, indent = 0):
+  for target, versions in sorted(targets.items()):
+    print('  {}Target {} supports toolchains:'.format('  ' * indent, target))
+    show_versions_and_all(versions, indent + 1)
+
+
+def show_versions_and_all(versions, indent = 0):
+  for version, toolchains in sorted(versions.items()):
+    print('  {}{}: {}'.format('  ' * indent, version, ', '.join(sorted(toolchains))))
+
+
+def show_discovery_results(args, kits):
+  print(' Done')
+
+  if args.os == 'discover':
+    if not args.all:
+      show_os_types_only(kits)
+    else:
+      show_os_types_and_all(kits)
+  elif args.target == 'discover':
+    check_os_type(args, kits)
+    targets = kits[args.os]
+    if not args.all:
+      show_targets_only(targets)
+    else:
+      show_targets_and_all(targets)
+  elif args.version == 'discover':
+    check_os_type(args, kits)
+    targets = kits[args.os]
+    check_targets(args, targets)
+    versions = targets[args.target]
+    if not args.all:
+      show_versions_only(versions)
+    else:
+      show_versions_and_all(versions)
+  elif args.toolchain == 'discover':
+    check_os_type(args, kits)
+    targets = kits[args.os]
+    check_targets(args, targets)
+    versions = targets[args.target]
+    check_versions(args, versions)
+    toolchains = versions[args.version]
+    show_toolchains_only(toolchains)
+  else:
+    check_os_type(args, kits)
+    targets = kits[args.os]
+    check_targets(args, targets)
+    versions = targets[args.target]
+    check_versions(args, versions)
+    toolchains = versions[args.version]
+    check_toolchains(args, toolchains)
+
+
+def verify_parameters(args):
+  print('Verifying arguments...', end='')
+  kits = discover_kits(args)
+  show_discovery_results(args, kits)
+
+
+def main():
+  parser = argparse.ArgumentParser(description='Qt downloader',
+    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
+  parser.add_argument('os', nargs='?', default='discover', help='Operating system type: {}, auto, or discovered one. Omit this to discover available OS types'.format(', '.join(OsMap.keys())))
+  parser.add_argument('target', nargs='?', default='discover', help='Target platform. Omit this to discover available targets')
+  parser.add_argument('version', nargs='?', default='discover', help='Qt version conforming to Semantic Versioning format: major.minor.patch. Use \'latest\' to get most up to date version. Omit this to discover available versions.')
+  parser.add_argument('toolchain', nargs='?', default='discover', help='Toolchain to use. Omit this to discover available toolchains')
+  parser.add_argument('-a', '--all', action='store_true', help='Discover allowed values for all missing arguments')
+  parser.add_argument('--output', '-o', default=os.getcwd(), help='Output directory')
+  parser.add_argument('--qt_modules', default='', help='Download selected qt modules')
+  parser.add_argument('--mingw', '-m', default=None,
+                      help='Download Mingw from Qt.Expected Format - win{arch}_mingw{major}{minor} eg: win32_mingw730')
+  parser.add_argument('--openssl', choices=['openssl_x64', 'openssl_x86'],
+                      default=None, help='Download openSSl Distribution from Qt. ')
+
+  args = parser.parse_args()
+
+  show_discover_context(args, parser)
+
+  params = [args.os, args.target, args.version, args.toolchain]
+  labels = ['OS types', 'targets', 'Qt versions', 'toolchains']
+  if 'discover' in params:
+    show_discovered_parameters(args, params, labels)
+    kits = discover_kits(args)
+    show_discovery_results(args, kits)
+    sys.exit(0)
+  else:
+    verify_parameters(args)
+    url = build_url(args)
+
+    info = get_info(url, args.version, args.toolchain)
+    if info is None:
+      sys.exit(1)
+
+    if args.mingw:
+      mingw = toolchain_build_url(args, 'mingw')
+      mingw_name, mingw_version, mingw_archives = mingw_info(mingw, args.mingw)
+      download_and_extract(mingw + mingw_name + '/' + mingw_version, mingw_archives, args.output, [])
+
+    if args.openssl:
+      ossl = toolchain_build_url(args, args.openssl)
+      ossl_name, ossl_version, ossl_archives = ossl_info(ossl, args.openssl)
+      download_and_extract(ossl + ossl_name + '/' + ossl_version, ossl_archives, args.output, [])
+
+    name, version, archives = info
+    qt_modules = shlex.split(args.qt_modules)
+    download_and_extract(url + name + '/' + version, archives, args.output, qt_modules)
+
+
+if __name__ == '__main__':
+  try:
+    main()
+  except IOError as error:
+    print(error)
+  except RuntimeError as error:
+    print(error)
+  except KeyboardInterrupt:
+    print('Stopped by user')
+
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/qt-downloader-requirements.txt qtwebkit-opensource-src-5.212/Tools/qt/qt-downloader-requirements.txt
--- qtwebkit-5.212.0-alpha4/Tools/qt/qt-downloader-requirements.txt	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/qt-downloader-requirements.txt	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,3 @@
+requests
+semantic_version
+lxml
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/setup-qt5-submodules-for-coin.sh qtwebkit-opensource-src-5.212/Tools/qt/setup-qt5-submodules-for-coin.sh
--- qtwebkit-5.212.0-alpha4/Tools/qt/setup-qt5-submodules-for-coin.sh	1970-01-01 10:00:00.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/setup-qt5-submodules-for-coin.sh	2020-09-22 21:30:04.000000000 +1000
@@ -0,0 +1,62 @@
+#!/bin/bash -e
+# Copyright (C) 2020 Konstantin Tokarev <annulen@yandex.ru>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+# THE POSSIBILITY OF SUCH DAMAGE.
+
+usage() {
+    echo "Usage: $0 <qt_ref>"
+    echo "    where qt_ref is tag or other git reference from qt5.git repo to take submodules from"
+    exit 0
+}
+
+if [ -z "$1" ]; then
+    usage
+fi
+
+if [ "$1" = "--help" ]; then
+    usage
+fi
+
+QT_REF="$1"
+SCRIPTNAME=$(basename "$0")
+
+for m in qt*; do
+    if [ -d "$m" ]; then
+        case "$m" in
+        qtbase|qtdeclarative|qtlocation|qtmultimedia|qtsensors|qtwebchannel)
+            if [ -n "$QT_REF" ]; then
+                echo "Checking out '$QT_REF' in $m"
+                git checkout -q "$QT_REF" "$m"
+            else
+                echo "Keeping '$m'"
+            fi
+            ;;
+        *)
+            git rm "$m";;
+        esac
+    fi
+done
+git commit -m "*** AUTOGENERATED COMMIT ***
+
+Remove Qt modules not used in QtWebKit.
+This commit was generated by ${SCRIPTNAME}.
+"
diff -Nru qtwebkit-5.212.0-alpha4/Tools/qt/update-wip-qtwebkit-refs qtwebkit-opensource-src-5.212/Tools/qt/update-wip-qtwebkit-refs
--- qtwebkit-5.212.0-alpha4/Tools/qt/update-wip-qtwebkit-refs	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/qt/update-wip-qtwebkit-refs	2020-09-22 21:30:04.000000000 +1000
@@ -34,6 +34,9 @@
 print "Remote '$remote': ", `git remote get-url $remote`, "\n";
 $? == 0 or die "git exited with code $?";
 
+print "Remote 'qtwebkit': ", `git remote get-url qtwebkit`, "\n";
+$? == 0 or die "git exited with code $?";
+
 print `git --no-pager log --color -n1 --decorate=full $commit`;
 $? == 0 or die "git exited with code $?";
 
@@ -45,3 +48,8 @@
 print "git push -f $remote $commit:refs/heads/wip/qtwebkit/5.212 && git push -f $remote $commit:refs/staging/wip/qtwebkit/5.212\n";
 `git push -f $remote $commit:refs/heads/wip/qtwebkit/5.212 && git push -f $remote $commit:refs/staging/wip/qtwebkit/5.212`;
 $? == 0 or die "git exited with code $?";
+
+my $qt5TagName = "qtwebkit-5.212-" . time();
+print "git tag -a '$qt5TagName' -m '$qt5TagName' && git push qtwebkit '$qt5TagName'\n";
+`git tag -a '$qt5TagName' -m '$qt5TagName' && git push qtwebkit '$qt5TagName'`;
+$? == 0 or die "git exited with code $?";
diff -Nru qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/launcherwindow.cpp qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/launcherwindow.cpp
--- qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/launcherwindow.cpp	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/launcherwindow.cpp	2020-09-22 21:30:04.000000000 +1000
@@ -170,11 +170,13 @@
     } else {
         WebViewGraphicsBased* view = new WebViewGraphicsBased(splitter);
         m_view = view;
+#ifndef QT_NO_OPENGL
         if (!m_windowOptions.useQOpenGLWidgetViewport)
             toggleQGLWidgetViewport(m_windowOptions.useQGLWidgetViewport);
 #ifdef QT_OPENGL_LIB
         if (!m_windowOptions.useQGLWidgetViewport)
             toggleQOpenGLWidgetViewport(m_windowOptions.useQOpenGLWidgetViewport);
+#endif // QT_OPENGL_LIB
 #endif
         view->setPage(page());
 
@@ -1357,3 +1359,5 @@
         page()->findText(m_lineEdit->text(), QFlag(m_findFlag));
 }
 #endif
+
+#include "moc_launcherwindow.cpp"
diff -Nru qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/useragentlist.txt qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/useragentlist.txt
--- qtwebkit-5.212.0-alpha4/Tools/QtTestBrowser/useragentlist.txt	2020-03-05 03:16:37.000000000 +1000
+++ qtwebkit-opensource-src-5.212/Tools/QtTestBrowser/useragentlist.txt	2020-09-22 21:30:04.000000000 +1000
@@ -1,13 +1,17 @@
-Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) QtTestBrowser/0.1 Safari/535.1
-Mozilla/5.0 (SymbianOS/9.4; U; Series60/5.0) AppleWebKit/535.1 (KHTML, like Gecko) QtTestBrowser/0.1 Mobile Safari/535.1
-Mozilla/5.0 (Macintosh; PPC Mac OS X) AppleWebKit/125.2 (KHTML, like Gecko) Safari/125.8
-Mozilla/5.0 (Unknown; like Android 2.2; Intel Mac OS X 10_6) AppleWebKit/533.3 (KHTML, like Gecko) Version/4.0.3 Mobile Safari/533.3
-Mozilla/5.0 (iPhone; CPU OS 3_2 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
-Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7
-Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
-Opera/9.80 (Windows NT 6.0; U; en) Presto/2.8.99 Version/11.10
+Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0
+Mozilla/5.0 (Linux; Android 7.1.1; E6883) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Mobile Safari/537.36
+Mozilla/5.0 (Linux; Android 9; G8441) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.111 Mobile Safari/537.36
+Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Safari/605.1.15
 Mozilla/5.0 (SymbianOS/9.4; U; Series60/5.0 Nokia5800d-1b/20.2.014; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/413 (KHTML, like Gecko) Safari/413
-Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)
-Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
-Mozilla/5.0 (Windows; Windows NT 5.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.68 Safari/534.24
-Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1
+Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0
+Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18363
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) QtTestBrowser/0.1 Version/10.0 Safari/602.1
+Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15 Epiphany/605.1.15
+Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
+Mozilla/5.0 (X11; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0
+Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Mobile/15E148 Safari/604.1
+Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1
+Opera/9.80 (Windows NT 6.1) Presto/2.12.388 Version/12.18
+Opera/9.80 (X11; Linux x86_64) Presto/2.12.388 Version/12.16
